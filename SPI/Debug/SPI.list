
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003898  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003a5c  08003a5c  00004a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a74  08003a74  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a74  08003a74  00004a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a7c  08003a7c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a7c  08003a7c  00004a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a80  08003a80  00004a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a84  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  2000000c  08003a90  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  08003a90  000055b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6ea  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002176  00000000  00000000  00013726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  000158a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000920  00000000  00000000  00016480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb80  00000000  00000000  00016da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f284  00000000  00000000  00036920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be8b2  00000000  00000000  00045ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104456  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003170  00000000  00000000  0010449c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0010760c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003a44 	.word	0x08003a44

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003a44 	.word	0x08003a44

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ADXL345_initialization>:
#include "ADXL345_SPI.h"


uint8_t ADXL345_initialization(SPI_HandleTypeDef *hspi, ADXL345 *dev)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
	dev->hspiHandle = hspi;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	601a      	str	r2, [r3, #0]
    uint8_t regAddr = ADXL345_REG_DEVICE_ID | 0x80; // 0x80 means READ 1 byte
 8000504:	2300      	movs	r3, #0
 8000506:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800050a:	b2db      	uxtb	r3, r3
 800050c:	737b      	strb	r3, [r7, #13]
    uint8_t regData;
    uint8_t errNum = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;

    // Read if the REGISTER_DEVICE_ID answers with the correct data ADXL345_DEVICE_ID 0xE5 p.24
    HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	2110      	movs	r1, #16
 8000516:	4844      	ldr	r0, [pc, #272]	@ (8000628 <ADXL345_initialization+0x134>)
 8000518:	f000 ff0e 	bl	8001338 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(dev->hspiHandle, &regAddr, 1, HAL_MAX_DELAY);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	6818      	ldr	r0, [r3, #0]
 8000520:	f107 010d 	add.w	r1, r7, #13
 8000524:	f04f 33ff 	mov.w	r3, #4294967295
 8000528:	2201      	movs	r2, #1
 800052a:	f001 ff54 	bl	80023d6 <HAL_SPI_Transmit>
 800052e:	4603      	mov	r3, r0
 8000530:	73bb      	strb	r3, [r7, #14]
	status = HAL_SPI_Receive(dev->hspiHandle, &regData, 1, HAL_MAX_DELAY);
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	6818      	ldr	r0, [r3, #0]
 8000536:	f107 010c 	add.w	r1, r7, #12
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
 800053e:	2201      	movs	r2, #1
 8000540:	f002 f88c 	bl	800265c <HAL_SPI_Receive>
 8000544:	4603      	mov	r3, r0
 8000546:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2110      	movs	r1, #16
 800054c:	4836      	ldr	r0, [pc, #216]	@ (8000628 <ADXL345_initialization+0x134>)
 800054e:	f000 fef3 	bl	8001338 <HAL_GPIO_WritePin>
    errNum += (status != HAL_OK);
 8000552:	7bbb      	ldrb	r3, [r7, #14]
 8000554:	2b00      	cmp	r3, #0
 8000556:	bf14      	ite	ne
 8000558:	2301      	movne	r3, #1
 800055a:	2300      	moveq	r3, #0
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	4413      	add	r3, r2
 8000564:	73fb      	strb	r3, [r7, #15]
    if (regData != ADXL345_DEVICE_ID)
 8000566:	7b3b      	ldrb	r3, [r7, #12]
 8000568:	22e5      	movs	r2, #229	@ 0xe5
 800056a:	4293      	cmp	r3, r2
 800056c:	d001      	beq.n	8000572 <ADXL345_initialization+0x7e>
    {
    	return 255; //
 800056e:	23ff      	movs	r3, #255	@ 0xff
 8000570:	e055      	b.n	800061e <ADXL345_initialization+0x12a>
    }

    // Set the register ADXL345_REG_POWER_CTL to enable measurement mode 0b00001000 = 0x08 p.26
    regAddr = ADXL345_REG_POWER_CTL;
 8000572:	232d      	movs	r3, #45	@ 0x2d
 8000574:	737b      	strb	r3, [r7, #13]
    regData = 0x08;
 8000576:	2308      	movs	r3, #8
 8000578:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2110      	movs	r1, #16
 800057e:	482a      	ldr	r0, [pc, #168]	@ (8000628 <ADXL345_initialization+0x134>)
 8000580:	f000 feda 	bl	8001338 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(dev->hspiHandle, &regAddr, 1, HAL_MAX_DELAY);
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f107 010d 	add.w	r1, r7, #13
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	2201      	movs	r2, #1
 8000592:	f001 ff20 	bl	80023d6 <HAL_SPI_Transmit>
 8000596:	4603      	mov	r3, r0
 8000598:	73bb      	strb	r3, [r7, #14]
	status = HAL_SPI_Transmit(dev->hspiHandle, &regData, 1, HAL_MAX_DELAY);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	6818      	ldr	r0, [r3, #0]
 800059e:	f107 010c 	add.w	r1, r7, #12
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	2201      	movs	r2, #1
 80005a8:	f001 ff15 	bl	80023d6 <HAL_SPI_Transmit>
 80005ac:	4603      	mov	r3, r0
 80005ae:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2110      	movs	r1, #16
 80005b4:	481c      	ldr	r0, [pc, #112]	@ (8000628 <ADXL345_initialization+0x134>)
 80005b6:	f000 febf 	bl	8001338 <HAL_GPIO_WritePin>

	uint8_t holaa = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	72fb      	strb	r3, [r7, #11]
	regAddr = ADXL345_REG_POWER_CTL | 0x80;
 80005be:	232d      	movs	r3, #45	@ 0x2d
 80005c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2110      	movs	r1, #16
 80005cc:	4816      	ldr	r0, [pc, #88]	@ (8000628 <ADXL345_initialization+0x134>)
 80005ce:	f000 feb3 	bl	8001338 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dev->hspiHandle, &regAddr, 1, HAL_MAX_DELAY);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	f107 010d 	add.w	r1, r7, #13
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	2201      	movs	r2, #1
 80005e0:	f001 fef9 	bl	80023d6 <HAL_SPI_Transmit>
 80005e4:	4603      	mov	r3, r0
 80005e6:	73bb      	strb	r3, [r7, #14]
	status = HAL_SPI_Receive(dev->hspiHandle, &holaa, 1, HAL_MAX_DELAY);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	f107 010b 	add.w	r1, r7, #11
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	2201      	movs	r2, #1
 80005f6:	f002 f831 	bl	800265c <HAL_SPI_Receive>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(ADXL_CS_PORT, ADXL_CS_PIN, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2110      	movs	r1, #16
 8000602:	4809      	ldr	r0, [pc, #36]	@ (8000628 <ADXL345_initialization+0x134>)
 8000604:	f000 fe98 	bl	8001338 <HAL_GPIO_WritePin>

    errNum += (status != HAL_OK);
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf14      	ite	ne
 800060e:	2301      	movne	r3, #1
 8000610:	2300      	moveq	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	4413      	add	r3, r2
 800061a:	73fb      	strb	r3, [r7, #15]

    return 0;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40020000 	.word	0x40020000

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fb71 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f819 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f913 	bl	8000864 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800063e:	f000 f8b7 	bl	80007b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000642:	f000 f8df 	bl	8000804 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000646:	f000 f87d 	bl	8000744 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // Chip Select pin High to indicate no communication
 800064a:	2201      	movs	r2, #1
 800064c:	2110      	movs	r1, #16
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <main+0x38>)
 8000650:	f000 fe72 	bl	8001338 <HAL_GPIO_WritePin>
  ADXL345 adxl345;
  ADXL345_initialization(&hspi1, &adxl345);
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	4803      	ldr	r0, [pc, #12]	@ (8000668 <main+0x3c>)
 800065a:	f7ff ff4b 	bl	80004f4 <ADXL345_initialization>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0x32>
 8000662:	bf00      	nop
 8000664:	40020000 	.word	0x40020000
 8000668:	20000028 	.word	0x20000028

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	@ 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2234      	movs	r2, #52	@ 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 f9b5 	bl	80039ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b29      	ldr	r3, [pc, #164]	@ (800073c <SystemClock_Config+0xd0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a28      	ldr	r2, [pc, #160]	@ (800073c <SystemClock_Config+0xd0>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a0:	4b26      	ldr	r3, [pc, #152]	@ (800073c <SystemClock_Config+0xd0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <SystemClock_Config+0xd4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a22      	ldr	r2, [pc, #136]	@ (8000740 <SystemClock_Config+0xd4>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <SystemClock_Config+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80006e0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80006e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006ea:	2308      	movs	r3, #8
 80006ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fb60 	bl	8001dbc <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000702:	f000 f971 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2302      	movs	r3, #2
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2103      	movs	r1, #3
 8000722:	4618      	mov	r0, r3
 8000724:	f000 ff5c 	bl	80015e0 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800072e:	f000 f95b 	bl	80009e8 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	@ 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	@ (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2202      	movs	r2, #2
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2201      	movs	r2, #1
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2228      	movs	r2, #40	@ 0x28
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f001 fd95 	bl	80022c4 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f922 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000028 	.word	0x20000028
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_USART3_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_USART3_UART_Init+0x4c>)
 80007e8:	f002 fb42 	bl	8002e70 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f8f9 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000080 	.word	0x20000080
 8000800:	40004800 	.word	0x40004800

08000804 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000808:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800080a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800080e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000810:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000812:	2206      	movs	r2, #6
 8000814:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000818:	2202      	movs	r2, #2
 800081a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800081c:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800081e:	2200      	movs	r2, #0
 8000820:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000824:	2202      	movs	r2, #2
 8000826:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000828:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800082a:	2201      	movs	r2, #1
 800082c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000830:	2200      	movs	r2, #0
 8000832:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000834:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000836:	2200      	movs	r2, #0
 8000838:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800083c:	2201      	movs	r2, #1
 800083e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000842:	2201      	movs	r2, #1
 8000844:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000848:	2200      	movs	r2, #0
 800084a:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084e:	f000 fd8c 	bl	800136a <HAL_PCD_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000858:	f000 f8c6 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200000c8 	.word	0x200000c8

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	@ 0x30
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	4b55      	ldr	r3, [pc, #340]	@ (80009d4 <MX_GPIO_Init+0x170>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a54      	ldr	r2, [pc, #336]	@ (80009d4 <MX_GPIO_Init+0x170>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b52      	ldr	r3, [pc, #328]	@ (80009d4 <MX_GPIO_Init+0x170>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	4b4e      	ldr	r3, [pc, #312]	@ (80009d4 <MX_GPIO_Init+0x170>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a4d      	ldr	r2, [pc, #308]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b4b      	ldr	r3, [pc, #300]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b47      	ldr	r3, [pc, #284]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a46      	ldr	r2, [pc, #280]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b44      	ldr	r3, [pc, #272]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b40      	ldr	r3, [pc, #256]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a3f      	ldr	r2, [pc, #252]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b3d      	ldr	r3, [pc, #244]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b39      	ldr	r3, [pc, #228]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a38      	ldr	r2, [pc, #224]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b36      	ldr	r3, [pc, #216]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b32      	ldr	r3, [pc, #200]	@ (80009d4 <MX_GPIO_Init+0x170>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a31      	ldr	r2, [pc, #196]	@ (80009d4 <MX_GPIO_Init+0x170>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b2f      	ldr	r3, [pc, #188]	@ (80009d4 <MX_GPIO_Init+0x170>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2110      	movs	r1, #16
 8000926:	482c      	ldr	r0, [pc, #176]	@ (80009d8 <MX_GPIO_Init+0x174>)
 8000928:	f000 fd06 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000932:	482a      	ldr	r0, [pc, #168]	@ (80009dc <MX_GPIO_Init+0x178>)
 8000934:	f000 fd00 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2140      	movs	r1, #64	@ 0x40
 800093c:	4828      	ldr	r0, [pc, #160]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 800093e:	f000 fcfb 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000942:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000948:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4822      	ldr	r0, [pc, #136]	@ (80009e4 <MX_GPIO_Init+0x180>)
 800095a:	f000 fb59 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800095e:	2310      	movs	r3, #16
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4818      	ldr	r0, [pc, #96]	@ (80009d8 <MX_GPIO_Init+0x174>)
 8000976:	f000 fb4b 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800097a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4812      	ldr	r0, [pc, #72]	@ (80009dc <MX_GPIO_Init+0x178>)
 8000994:	f000 fb3c 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000998:	2340      	movs	r3, #64	@ 0x40
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 80009b0:	f000 fb2e 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b4:	2380      	movs	r3, #128	@ 0x80
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 80009c8:	f000 fb22 	bl	8001010 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3730      	adds	r7, #48	@ 0x30
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40021800 	.word	0x40021800
 80009e4:	40020800 	.word	0x40020800

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <Error_Handler+0x8>

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	4a0f      	ldr	r2, [pc, #60]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	4a08      	ldr	r2, [pc, #32]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	@ 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a19      	ldr	r2, [pc, #100]	@ (8000ac8 <HAL_SPI_MspInit+0x84>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12b      	bne.n	8000abe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <HAL_SPI_MspInit+0x88>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6e:	4a17      	ldr	r2, [pc, #92]	@ (8000acc <HAL_SPI_MspInit+0x88>)
 8000a70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <HAL_SPI_MspInit+0x88>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <HAL_SPI_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a10      	ldr	r2, [pc, #64]	@ (8000acc <HAL_SPI_MspInit+0x88>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <HAL_SPI_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a9e:	23e0      	movs	r3, #224	@ 0xe0
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <HAL_SPI_MspInit+0x8c>)
 8000aba:	f000 faa9 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	@ 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40013000 	.word	0x40013000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <HAL_UART_MspInit+0x84>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12c      	bne.n	8000b50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <HAL_UART_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	4a17      	ldr	r2, [pc, #92]	@ (8000b5c <HAL_UART_MspInit+0x88>)
 8000b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a10      	ldr	r2, [pc, #64]	@ (8000b5c <HAL_UART_MspInit+0x88>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b40:	2307      	movs	r3, #7
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <HAL_UART_MspInit+0x8c>)
 8000b4c:	f000 fa60 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	@ 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40004800 	.word	0x40004800
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b098      	sub	sp, #96	@ 0x60
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	223c      	movs	r2, #60	@ 0x3c
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 ff30 	bl	80039ea <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b92:	d14d      	bne.n	8000c30 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b94:	2320      	movs	r3, #32
 8000b96:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 ff3d 	bl	8001a20 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000bac:	f7ff ff1c 	bl	80009e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <HAL_PCD_MspInit+0xd4>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <HAL_PCD_MspInit+0xd4>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <HAL_PCD_MspInit+0xd4>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bcc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bde:	230a      	movs	r3, #10
 8000be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000be6:	4619      	mov	r1, r3
 8000be8:	4814      	ldr	r0, [pc, #80]	@ (8000c3c <HAL_PCD_MspInit+0xd8>)
 8000bea:	f000 fa11 	bl	8001010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c00:	4619      	mov	r1, r3
 8000c02:	480e      	ldr	r0, [pc, #56]	@ (8000c3c <HAL_PCD_MspInit+0xd8>)
 8000c04:	f000 fa04 	bl	8001010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <HAL_PCD_MspInit+0xd4>)
 8000c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <HAL_PCD_MspInit+0xd4>)
 8000c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c12:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <HAL_PCD_MspInit+0xd4>)
 8000c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1c:	4a06      	ldr	r2, [pc, #24]	@ (8000c38 <HAL_PCD_MspInit+0xd4>)
 8000c1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c22:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <HAL_PCD_MspInit+0xd4>)
 8000c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3760      	adds	r7, #96	@ 0x60
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c96:	f000 f891 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc8:	f7ff ffea 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f002 fe83 	bl	80039fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fc99 	bl	800062c <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cfc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d08:	08003a84 	.word	0x08003a84
  ldr r2, =_sbss
 8000d0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d10:	200005b0 	.word	0x200005b0

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	@ (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	@ (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f931 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fe52 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f93b 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 f911 	bl	8000fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	@ (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	200005ac 	.word	0x200005ac

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	@ (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200005ac 	.word	0x200005ac

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	@ (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	@ (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	@ 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	@ 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f74:	d301      	bcc.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00f      	b.n	8000f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	210f      	movs	r1, #15
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f7ff ff8e 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff47 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff5c 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff8e 	bl	8000efc <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5d 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb0 	bl	8000f64 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	e165      	b.n	80012f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	429a      	cmp	r2, r3
 8001046:	f040 8154 	bne.w	80012f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d005      	beq.n	8001062 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105e:	2b02      	cmp	r3, #2
 8001060:	d130      	bne.n	80010c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	f003 0201 	and.w	r2, r3, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d017      	beq.n	8001100 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d123      	bne.n	8001154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	69b9      	ldr	r1, [r7, #24]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0203 	and.w	r2, r3, #3
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80ae 	beq.w	80012f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b5d      	ldr	r3, [pc, #372]	@ (8001310 <HAL_GPIO_Init+0x300>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a5c      	ldr	r2, [pc, #368]	@ (8001310 <HAL_GPIO_Init+0x300>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001310 <HAL_GPIO_Init+0x300>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b2:	4a58      	ldr	r2, [pc, #352]	@ (8001314 <HAL_GPIO_Init+0x304>)
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001318 <HAL_GPIO_Init+0x308>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d025      	beq.n	800122a <HAL_GPIO_Init+0x21a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4e      	ldr	r2, [pc, #312]	@ (800131c <HAL_GPIO_Init+0x30c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d01f      	beq.n	8001226 <HAL_GPIO_Init+0x216>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001320 <HAL_GPIO_Init+0x310>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d019      	beq.n	8001222 <HAL_GPIO_Init+0x212>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001324 <HAL_GPIO_Init+0x314>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x20e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001328 <HAL_GPIO_Init+0x318>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x20a>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4a      	ldr	r2, [pc, #296]	@ (800132c <HAL_GPIO_Init+0x31c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x206>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a49      	ldr	r2, [pc, #292]	@ (8001330 <HAL_GPIO_Init+0x320>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x202>
 800120e:	2306      	movs	r3, #6
 8001210:	e00c      	b.n	800122c <HAL_GPIO_Init+0x21c>
 8001212:	2307      	movs	r3, #7
 8001214:	e00a      	b.n	800122c <HAL_GPIO_Init+0x21c>
 8001216:	2305      	movs	r3, #5
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x21c>
 800121a:	2304      	movs	r3, #4
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x21c>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x21c>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x21c>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x21c>
 800122a:	2300      	movs	r3, #0
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4935      	ldr	r1, [pc, #212]	@ (8001314 <HAL_GPIO_Init+0x304>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b3a      	ldr	r3, [pc, #232]	@ (8001334 <HAL_GPIO_Init+0x324>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a31      	ldr	r2, [pc, #196]	@ (8001334 <HAL_GPIO_Init+0x324>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <HAL_GPIO_Init+0x324>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a26      	ldr	r2, [pc, #152]	@ (8001334 <HAL_GPIO_Init+0x324>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800129e:	4b25      	ldr	r3, [pc, #148]	@ (8001334 <HAL_GPIO_Init+0x324>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001334 <HAL_GPIO_Init+0x324>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <HAL_GPIO_Init+0x324>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ec:	4a11      	ldr	r2, [pc, #68]	@ (8001334 <HAL_GPIO_Init+0x324>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	f67f ae96 	bls.w	800102c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3724      	adds	r7, #36	@ 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40013800 	.word	0x40013800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40021400 	.word	0x40021400
 8001330:	40021800 	.word	0x40021800
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001354:	e003      	b.n	800135e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af02      	add	r7, sp, #8
 8001370:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e108      	b.n	800158e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fbe4 	bl	8000b64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013aa:	d102      	bne.n	80013b2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 f882 	bl	80034c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7c1a      	ldrb	r2, [r3, #16]
 80013c4:	f88d 2000 	strb.w	r2, [sp]
 80013c8:	3304      	adds	r3, #4
 80013ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013cc:	f002 f814 	bl	80033f8 <USB_CoreInit>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2202      	movs	r2, #2
 80013da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0d5      	b.n	800158e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 f87a 	bl	80034e2 <USB_SetCurrentMode>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e0c6      	b.n	800158e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e04a      	b.n	800149c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	3315      	adds	r3, #21
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	3314      	adds	r3, #20
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	b298      	uxth	r0, r3
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	332e      	adds	r3, #46	@ 0x2e
 8001442:	4602      	mov	r2, r0
 8001444:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	3318      	adds	r3, #24
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	331c      	adds	r3, #28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	3320      	adds	r3, #32
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	3324      	adds	r3, #36	@ 0x24
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	3301      	adds	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	791b      	ldrb	r3, [r3, #4]
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d3af      	bcc.n	8001406 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e044      	b.n	8001536 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	3301      	adds	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	791b      	ldrb	r3, [r3, #4]
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	429a      	cmp	r2, r3
 800153e:	d3b5      	bcc.n	80014ac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7c1a      	ldrb	r2, [r3, #16]
 8001548:	f88d 2000 	strb.w	r2, [sp]
 800154c:	3304      	adds	r3, #4
 800154e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001550:	f002 f814 	bl	800357c <USB_DevInit>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e013      	b.n	800158e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7b1b      	ldrb	r3, [r3, #12]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d102      	bne.n	8001582 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f80a 	bl	8001596 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f002 f9cf 	bl	800392a <USB_DevDisconnect>

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c8:	f043 0303 	orr.w	r3, r3, #3
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0cc      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b68      	ldr	r3, [pc, #416]	@ (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d90c      	bls.n	800161c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b65      	ldr	r3, [pc, #404]	@ (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b63      	ldr	r3, [pc, #396]	@ (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0b8      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001634:	4b59      	ldr	r3, [pc, #356]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a58      	ldr	r2, [pc, #352]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800163e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800164c:	4b53      	ldr	r3, [pc, #332]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a52      	ldr	r2, [pc, #328]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001658:	4b50      	ldr	r3, [pc, #320]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	494d      	ldr	r1, [pc, #308]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d044      	beq.n	8001700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b47      	ldr	r3, [pc, #284]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d119      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e07f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d003      	beq.n	800169e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	2b03      	cmp	r3, #3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169e:	4b3f      	ldr	r3, [pc, #252]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e06f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	4b3b      	ldr	r3, [pc, #236]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e067      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4b37      	ldr	r3, [pc, #220]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f023 0203 	bic.w	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4934      	ldr	r1, [pc, #208]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d0:	f7ff fb88 	bl	8000de4 <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff fb84 	bl	8000de4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e04f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 020c 	and.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1eb      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001700:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d20c      	bcs.n	8001728 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e032      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b19      	ldr	r3, [pc, #100]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4916      	ldr	r1, [pc, #88]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	490e      	ldr	r1, [pc, #56]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001766:	f000 f821 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	490a      	ldr	r1, [pc, #40]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a09      	ldr	r2, [pc, #36]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fae8 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00
 800179c:	40023800 	.word	0x40023800
 80017a0:	08003a5c 	.word	0x08003a5c
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b0:	b094      	sub	sp, #80	@ 0x50
 80017b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80017b8:	2300      	movs	r3, #0
 80017ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017bc:	2300      	movs	r3, #0
 80017be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c4:	4b79      	ldr	r3, [pc, #484]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x200>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d00d      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x40>
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	f200 80e1 	bhi.w	8001998 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x34>
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017de:	e0db      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b73      	ldr	r3, [pc, #460]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80017e2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80017e4:	e0db      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e6:	4b73      	ldr	r3, [pc, #460]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80017e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017ea:	e0d8      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ec:	4b6f      	ldr	r3, [pc, #444]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x200>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f6:	4b6d      	ldr	r3, [pc, #436]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x200>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d063      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001802:	4b6a      	ldr	r3, [pc, #424]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	2200      	movs	r2, #0
 800180a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800180c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800180e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001814:	633b      	str	r3, [r7, #48]	@ 0x30
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	@ 0x34
 800181a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800181e:	4622      	mov	r2, r4
 8001820:	462b      	mov	r3, r5
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f04f 0100 	mov.w	r1, #0
 800182a:	0159      	lsls	r1, r3, #5
 800182c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001830:	0150      	lsls	r0, r2, #5
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4621      	mov	r1, r4
 8001838:	1a51      	subs	r1, r2, r1
 800183a:	6139      	str	r1, [r7, #16]
 800183c:	4629      	mov	r1, r5
 800183e:	eb63 0301 	sbc.w	r3, r3, r1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001850:	4659      	mov	r1, fp
 8001852:	018b      	lsls	r3, r1, #6
 8001854:	4651      	mov	r1, sl
 8001856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800185a:	4651      	mov	r1, sl
 800185c:	018a      	lsls	r2, r1, #6
 800185e:	4651      	mov	r1, sl
 8001860:	ebb2 0801 	subs.w	r8, r2, r1
 8001864:	4659      	mov	r1, fp
 8001866:	eb63 0901 	sbc.w	r9, r3, r1
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800187a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800187e:	4690      	mov	r8, r2
 8001880:	4699      	mov	r9, r3
 8001882:	4623      	mov	r3, r4
 8001884:	eb18 0303 	adds.w	r3, r8, r3
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	462b      	mov	r3, r5
 800188c:	eb49 0303 	adc.w	r3, r9, r3
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800189e:	4629      	mov	r1, r5
 80018a0:	024b      	lsls	r3, r1, #9
 80018a2:	4621      	mov	r1, r4
 80018a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018a8:	4621      	mov	r1, r4
 80018aa:	024a      	lsls	r2, r1, #9
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018b2:	2200      	movs	r2, #0
 80018b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018bc:	f7fe fca2 	bl	8000204 <__aeabi_uldivmod>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4613      	mov	r3, r2
 80018c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018c8:	e058      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ca:	4b38      	ldr	r3, [pc, #224]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x200>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	2200      	movs	r2, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	4611      	mov	r1, r2
 80018d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018da:	623b      	str	r3, [r7, #32]
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018e4:	4642      	mov	r2, r8
 80018e6:	464b      	mov	r3, r9
 80018e8:	f04f 0000 	mov.w	r0, #0
 80018ec:	f04f 0100 	mov.w	r1, #0
 80018f0:	0159      	lsls	r1, r3, #5
 80018f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f6:	0150      	lsls	r0, r2, #5
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4641      	mov	r1, r8
 80018fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001902:	4649      	mov	r1, r9
 8001904:	eb63 0b01 	sbc.w	fp, r3, r1
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001914:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001918:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800191c:	ebb2 040a 	subs.w	r4, r2, sl
 8001920:	eb63 050b 	sbc.w	r5, r3, fp
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	00eb      	lsls	r3, r5, #3
 800192e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001932:	00e2      	lsls	r2, r4, #3
 8001934:	4614      	mov	r4, r2
 8001936:	461d      	mov	r5, r3
 8001938:	4643      	mov	r3, r8
 800193a:	18e3      	adds	r3, r4, r3
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	464b      	mov	r3, r9
 8001940:	eb45 0303 	adc.w	r3, r5, r3
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001952:	4629      	mov	r1, r5
 8001954:	028b      	lsls	r3, r1, #10
 8001956:	4621      	mov	r1, r4
 8001958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800195c:	4621      	mov	r1, r4
 800195e:	028a      	lsls	r2, r1, #10
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001966:	2200      	movs	r2, #0
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	61fa      	str	r2, [r7, #28]
 800196c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001970:	f7fe fc48 	bl	8000204 <__aeabi_uldivmod>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4613      	mov	r3, r2
 800197a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x200>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	3301      	adds	r3, #1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800198c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800198e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001996:	e002      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800199a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800199c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3750      	adds	r7, #80	@ 0x50
 80019a4:	46bd      	mov	sp, r7
 80019a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	00f42400 	.word	0x00f42400
 80019b4:	007a1200 	.word	0x007a1200

080019b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019bc:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <HAL_RCC_GetHCLKFreq+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000

080019d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019d4:	f7ff fff0 	bl	80019b8 <HAL_RCC_GetHCLKFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	0a9b      	lsrs	r3, r3, #10
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4903      	ldr	r1, [pc, #12]	@ (80019f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	08003a6c 	.word	0x08003a6c

080019f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019fc:	f7ff ffdc 	bl	80019b8 <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0b5b      	lsrs	r3, r3, #13
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	@ (8001a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	08003a6c 	.word	0x08003a6c

08001a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d010      	beq.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001a40:	4b87      	ldr	r3, [pc, #540]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a46:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4984      	ldr	r1, [pc, #528]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d010      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a6e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a74:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4978      	ldr	r1, [pc, #480]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8083 	beq.w	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aae:	4b6c      	ldr	r3, [pc, #432]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001aba:	4b6a      	ldr	r3, [pc, #424]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a69      	ldr	r2, [pc, #420]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ac6:	f7ff f98d 	bl	8000de4 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7ff f989 	bl	8000de4 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e162      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ae0:	4b60      	ldr	r3, [pc, #384]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aec:	4b5c      	ldr	r3, [pc, #368]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001af4:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d02f      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d028      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b0a:	4b55      	ldr	r3, [pc, #340]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b12:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b14:	4b54      	ldr	r3, [pc, #336]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b1a:	4b53      	ldr	r3, [pc, #332]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b20:	4a4f      	ldr	r2, [pc, #316]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b26:	4b4e      	ldr	r3, [pc, #312]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d114      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff f957 	bl	8000de4 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff f953 	bl	8000de4 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e12a      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	4b43      	ldr	r3, [pc, #268]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ee      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001b68:	d10d      	bne.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001b7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b7e:	4938      	ldr	r1, [pc, #224]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
 8001b84:	e005      	b.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8001b86:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	4a35      	ldr	r2, [pc, #212]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001b90:	6093      	str	r3, [r2, #8]
 8001b92:	4b33      	ldr	r3, [pc, #204]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9e:	4930      	ldr	r1, [pc, #192]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bb8:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00a      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001bc6:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bcc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd4:	4922      	ldr	r1, [pc, #136]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d011      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001be8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bee:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf6:	491a      	ldr	r1, [pc, #104]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c06:	d101      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00a      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c1e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	490e      	ldr	r1, [pc, #56]	@ (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d004      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b80      	cmp	r3, #128	@ 0x80
 8001c3a:	f040 8091 	bne.w	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c44:	f7ff f8ce 	bl	8000de4 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c4a:	e013      	b.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c4c:	f7ff f8ca 	bl	8000de4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d90c      	bls.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0a3      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40007000 	.word	0x40007000
 8001c68:	42470e40 	.word	0x42470e40
 8001c6c:	424711e0 	.word	0x424711e0
 8001c70:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c74:	4b4e      	ldr	r3, [pc, #312]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e5      	bne.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001c80:	4a4c      	ldr	r2, [pc, #304]	@ (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c86:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d023      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d019      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d004      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001cc4:	d00e      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d019      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d115      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ce2:	d110      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	019b      	lsls	r3, r3, #6
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	061b      	lsls	r3, r3, #24
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	071b      	lsls	r3, r3, #28
 8001cfe:	492c      	ldr	r1, [pc, #176]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d010      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	019b      	lsls	r3, r3, #6
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	061b      	lsls	r3, r3, #24
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	071b      	lsls	r3, r3, #28
 8001d2c:	4920      	ldr	r1, [pc, #128]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d34:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d3a:	f7ff f853 	bl	8000de4 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d42:	f7ff f84f 	bl	8000de4 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e028      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d54:	4b16      	ldr	r3, [pc, #88]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00a      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d6c:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7a:	490d      	ldr	r1, [pc, #52]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00a      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d94:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	4904      	ldr	r1, [pc, #16]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	424710d8 	.word	0x424710d8
 8001db8:	42470068 	.word	0x42470068

08001dbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e273      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d075      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dda:	4b88      	ldr	r3, [pc, #544]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d00c      	beq.n	8001e00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de6:	4b85      	ldr	r3, [pc, #532]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d112      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df2:	4b82      	ldr	r3, [pc, #520]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dfe:	d10b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	4b7e      	ldr	r3, [pc, #504]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d05b      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x108>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d157      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e24e      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e20:	d106      	bne.n	8001e30 <HAL_RCC_OscConfig+0x74>
 8001e22:	4b76      	ldr	r3, [pc, #472]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a75      	ldr	r2, [pc, #468]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e01d      	b.n	8001e6c <HAL_RCC_OscConfig+0xb0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x98>
 8001e3a:	4b70      	ldr	r3, [pc, #448]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6f      	ldr	r2, [pc, #444]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b6d      	ldr	r3, [pc, #436]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a6c      	ldr	r2, [pc, #432]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0xb0>
 8001e54:	4b69      	ldr	r3, [pc, #420]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a68      	ldr	r2, [pc, #416]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b66      	ldr	r3, [pc, #408]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a65      	ldr	r2, [pc, #404]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d013      	beq.n	8001e9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7fe ffb6 	bl	8000de4 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7fe ffb2 	bl	8000de4 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	@ 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e213      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0xc0>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7fe ffa2 	bl	8000de4 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7fe ff9e 	bl	8000de4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	@ 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e1ff      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	4b51      	ldr	r3, [pc, #324]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xe8>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d063      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ede:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d11c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eea:	4b44      	ldr	r3, [pc, #272]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d116      	bne.n	8001f24 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef6:	4b41      	ldr	r3, [pc, #260]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_RCC_OscConfig+0x152>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e1d3      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4937      	ldr	r1, [pc, #220]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	e03a      	b.n	8001f9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2c:	4b34      	ldr	r3, [pc, #208]	@ (8002000 <HAL_RCC_OscConfig+0x244>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe ff57 	bl	8000de4 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7fe ff53 	bl	8000de4 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e1b4      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b28      	ldr	r3, [pc, #160]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4925      	ldr	r1, [pc, #148]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
 8001f6c:	e015      	b.n	8001f9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6e:	4b24      	ldr	r3, [pc, #144]	@ (8002000 <HAL_RCC_OscConfig+0x244>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7fe ff36 	bl	8000de4 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7c:	f7fe ff32 	bl	8000de4 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e193      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d036      	beq.n	8002014 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d016      	beq.n	8001fdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <HAL_RCC_OscConfig+0x248>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb4:	f7fe ff16 	bl	8000de4 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7fe ff12 	bl	8000de4 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e173      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x200>
 8001fda:	e01b      	b.n	8002014 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fdc:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_RCC_OscConfig+0x248>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7fe feff 	bl	8000de4 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	e00e      	b.n	8002008 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fea:	f7fe fefb 	bl	8000de4 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d907      	bls.n	8002008 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e15c      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
 8001ffc:	40023800 	.word	0x40023800
 8002000:	42470000 	.word	0x42470000
 8002004:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	4b8a      	ldr	r3, [pc, #552]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 800200a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ea      	bne.n	8001fea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8097 	beq.w	8002150 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002026:	4b83      	ldr	r3, [pc, #524]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10f      	bne.n	8002052 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b7f      	ldr	r3, [pc, #508]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	4a7e      	ldr	r2, [pc, #504]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	@ 0x40
 8002042:	4b7c      	ldr	r3, [pc, #496]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002052:	4b79      	ldr	r3, [pc, #484]	@ (8002238 <HAL_RCC_OscConfig+0x47c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d118      	bne.n	8002090 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205e:	4b76      	ldr	r3, [pc, #472]	@ (8002238 <HAL_RCC_OscConfig+0x47c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a75      	ldr	r2, [pc, #468]	@ (8002238 <HAL_RCC_OscConfig+0x47c>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206a:	f7fe febb 	bl	8000de4 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002072:	f7fe feb7 	bl	8000de4 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e118      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	4b6c      	ldr	r3, [pc, #432]	@ (8002238 <HAL_RCC_OscConfig+0x47c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x2ea>
 8002098:	4b66      	ldr	r3, [pc, #408]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209c:	4a65      	ldr	r2, [pc, #404]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a4:	e01c      	b.n	80020e0 <HAL_RCC_OscConfig+0x324>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x30c>
 80020ae:	4b61      	ldr	r3, [pc, #388]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b2:	4a60      	ldr	r2, [pc, #384]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020be:	4a5d      	ldr	r2, [pc, #372]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0x324>
 80020c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020cc:	4a59      	ldr	r2, [pc, #356]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d4:	4b57      	ldr	r3, [pc, #348]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d8:	4a56      	ldr	r2, [pc, #344]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 80020da:	f023 0304 	bic.w	r3, r3, #4
 80020de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d015      	beq.n	8002114 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e8:	f7fe fe7c 	bl	8000de4 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7fe fe78 	bl	8000de4 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0d7      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002106:	4b4b      	ldr	r3, [pc, #300]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0ee      	beq.n	80020f0 <HAL_RCC_OscConfig+0x334>
 8002112:	e014      	b.n	800213e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe fe66 	bl	8000de4 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211a:	e00a      	b.n	8002132 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211c:	f7fe fe62 	bl	8000de4 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e0c1      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002132:	4b40      	ldr	r3, [pc, #256]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ee      	bne.n	800211c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002144:	4b3b      	ldr	r3, [pc, #236]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	4a3a      	ldr	r2, [pc, #232]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 800214a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800214e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80ad 	beq.w	80022b4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800215a:	4b36      	ldr	r3, [pc, #216]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b08      	cmp	r3, #8
 8002164:	d060      	beq.n	8002228 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d145      	bne.n	80021fa <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b33      	ldr	r3, [pc, #204]	@ (800223c <HAL_RCC_OscConfig+0x480>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fe36 	bl	8000de4 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217c:	f7fe fe32 	bl	8000de4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e093      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	4b29      	ldr	r3, [pc, #164]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69da      	ldr	r2, [r3, #28]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	3b01      	subs	r3, #1
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	071b      	lsls	r3, r3, #28
 80021c6:	491b      	ldr	r1, [pc, #108]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021cc:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <HAL_RCC_OscConfig+0x480>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7fe fe07 	bl	8000de4 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe fe03 	bl	8000de4 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e064      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ec:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x41e>
 80021f8:	e05c      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <HAL_RCC_OscConfig+0x480>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe fdf0 	bl	8000de4 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fdec 	bl	8000de4 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e04d      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x44c>
 8002226:	e045      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e040      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
 8002234:	40023800 	.word	0x40023800
 8002238:	40007000 	.word	0x40007000
 800223c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002240:	4b1f      	ldr	r3, [pc, #124]	@ (80022c0 <HAL_RCC_OscConfig+0x504>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d030      	beq.n	80022b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d129      	bne.n	80022b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d122      	bne.n	80022b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002270:	4013      	ands	r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002278:	4293      	cmp	r3, r2
 800227a:	d119      	bne.n	80022b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	3b01      	subs	r3, #1
 800228a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d10f      	bne.n	80022b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d107      	bne.n	80022b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800

080022c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e07b      	b.n	80023ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d108      	bne.n	80022f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022e6:	d009      	beq.n	80022fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
 80022ee:	e005      	b.n	80022fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe fb94 	bl	8000a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002332:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002380:	ea42 0103 	orr.w	r1, r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002388:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	f003 0104 	and.w	r1, r3, #4
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	f003 0210 	and.w	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b088      	sub	sp, #32
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_SPI_Transmit+0x22>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e12d      	b.n	8002654 <HAL_SPI_Transmit+0x27e>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002400:	f7fe fcf0 	bl	8000de4 <HAL_GetTick>
 8002404:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d002      	beq.n	800241c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002416:	2302      	movs	r3, #2
 8002418:	77fb      	strb	r3, [r7, #31]
    goto error;
 800241a:	e116      	b.n	800264a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_SPI_Transmit+0x52>
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800242c:	e10d      	b.n	800264a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2203      	movs	r2, #3
 8002432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	88fa      	ldrh	r2, [r7, #6]
 8002446:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002474:	d10f      	bne.n	8002496 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002484:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002494:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a0:	2b40      	cmp	r3, #64	@ 0x40
 80024a2:	d007      	beq.n	80024b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024bc:	d14f      	bne.n	800255e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_SPI_Transmit+0xf6>
 80024c6:	8afb      	ldrh	r3, [r7, #22]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d142      	bne.n	8002552 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	881a      	ldrh	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	1c9a      	adds	r2, r3, #2
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024f0:	e02f      	b.n	8002552 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d112      	bne.n	8002526 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	881a      	ldrh	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002510:	1c9a      	adds	r2, r3, #2
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002524:	e015      	b.n	8002552 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002526:	f7fe fc5d 	bl	8000de4 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d803      	bhi.n	800253e <HAL_SPI_Transmit+0x168>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d102      	bne.n	8002544 <HAL_SPI_Transmit+0x16e>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002550:	e07b      	b.n	800264a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ca      	bne.n	80024f2 <HAL_SPI_Transmit+0x11c>
 800255c:	e050      	b.n	8002600 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_SPI_Transmit+0x196>
 8002566:	8afb      	ldrh	r3, [r7, #22]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d144      	bne.n	80025f6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	330c      	adds	r3, #12
 8002576:	7812      	ldrb	r2, [r2, #0]
 8002578:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002592:	e030      	b.n	80025f6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d113      	bne.n	80025ca <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	330c      	adds	r3, #12
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025c8:	e015      	b.n	80025f6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025ca:	f7fe fc0b 	bl	8000de4 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d803      	bhi.n	80025e2 <HAL_SPI_Transmit+0x20c>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d102      	bne.n	80025e8 <HAL_SPI_Transmit+0x212>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80025f4:	e029      	b.n	800264a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1c9      	bne.n	8002594 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	6839      	ldr	r1, [r7, #0]
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fbdf 	bl	8002dc8 <SPI_EndRxTxTransaction>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	77fb      	strb	r3, [r7, #31]
 8002640:	e003      	b.n	800264a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002652:	7ffb      	ldrb	r3, [r7, #31]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d002      	beq.n	8002682 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800267c:	2302      	movs	r3, #2
 800267e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002680:	e0fb      	b.n	800287a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800268a:	d112      	bne.n	80026b2 <HAL_SPI_Receive+0x56>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10e      	bne.n	80026b2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2204      	movs	r2, #4
 8002698:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800269c:	88fa      	ldrh	r2, [r7, #6]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	4613      	mov	r3, r2
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f8ef 	bl	800288c <HAL_SPI_TransmitReceive>
 80026ae:	4603      	mov	r3, r0
 80026b0:	e0e8      	b.n	8002884 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_SPI_Receive+0x64>
 80026bc:	2302      	movs	r3, #2
 80026be:	e0e1      	b.n	8002884 <HAL_SPI_Receive+0x228>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026c8:	f7fe fb8c 	bl	8000de4 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_SPI_Receive+0x7e>
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026de:	e0cc      	b.n	800287a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2204      	movs	r2, #4
 80026e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	88fa      	ldrh	r2, [r7, #6]
 80026fe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002726:	d10f      	bne.n	8002748 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002736:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002746:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002752:	2b40      	cmp	r3, #64	@ 0x40
 8002754:	d007      	beq.n	8002766 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d16a      	bne.n	8002844 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800276e:	e032      	b.n	80027d6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d115      	bne.n	80027aa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f103 020c 	add.w	r2, r3, #12
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278a:	7812      	ldrb	r2, [r2, #0]
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027a8:	e015      	b.n	80027d6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027aa:	f7fe fb1b 	bl	8000de4 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d803      	bhi.n	80027c2 <HAL_SPI_Receive+0x166>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d102      	bne.n	80027c8 <HAL_SPI_Receive+0x16c>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d106      	bne.n	80027d6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80027d4:	e051      	b.n	800287a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1c7      	bne.n	8002770 <HAL_SPI_Receive+0x114>
 80027e0:	e035      	b.n	800284e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d113      	bne.n	8002818 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fa:	b292      	uxth	r2, r2
 80027fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002802:	1c9a      	adds	r2, r3, #2
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002816:	e015      	b.n	8002844 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002818:	f7fe fae4 	bl	8000de4 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d803      	bhi.n	8002830 <HAL_SPI_Receive+0x1d4>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282e:	d102      	bne.n	8002836 <HAL_SPI_Receive+0x1da>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002842:	e01a      	b.n	800287a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1c9      	bne.n	80027e2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fa52 	bl	8002cfc <SPI_EndRxTransaction>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	75fb      	strb	r3, [r7, #23]
 8002870:	e003      	b.n	800287a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002882:	7dfb      	ldrb	r3, [r7, #23]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08c      	sub	sp, #48	@ 0x30
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800289a:	2301      	movs	r3, #1
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_SPI_TransmitReceive+0x26>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e198      	b.n	8002be4 <HAL_SPI_TransmitReceive+0x358>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028ba:	f7fe fa93 	bl	8000de4 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80028d0:	887b      	ldrh	r3, [r7, #2]
 80028d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d00f      	beq.n	80028fc <HAL_SPI_TransmitReceive+0x70>
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028e2:	d107      	bne.n	80028f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d103      	bne.n	80028f4 <HAL_SPI_TransmitReceive+0x68>
 80028ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d003      	beq.n	80028fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
 80028f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80028fa:	e16d      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_SPI_TransmitReceive+0x82>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_SPI_TransmitReceive+0x82>
 8002908:	887b      	ldrh	r3, [r7, #2]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d103      	bne.n	8002916 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002914:	e160      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b04      	cmp	r3, #4
 8002920:	d003      	beq.n	800292a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2205      	movs	r2, #5
 8002926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	887a      	ldrh	r2, [r7, #2]
 800293a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	887a      	ldrh	r2, [r7, #2]
 800294c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	887a      	ldrh	r2, [r7, #2]
 8002952:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296a:	2b40      	cmp	r3, #64	@ 0x40
 800296c:	d007      	beq.n	800297e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800297c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002986:	d17c      	bne.n	8002a82 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_SPI_TransmitReceive+0x10a>
 8002990:	8b7b      	ldrh	r3, [r7, #26]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d16a      	bne.n	8002a6c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	881a      	ldrh	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	1c9a      	adds	r2, r3, #2
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029ba:	e057      	b.n	8002a6c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d11b      	bne.n	8002a02 <HAL_SPI_TransmitReceive+0x176>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d016      	beq.n	8002a02 <HAL_SPI_TransmitReceive+0x176>
 80029d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d113      	bne.n	8002a02 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	881a      	ldrh	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	1c9a      	adds	r2, r3, #2
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d119      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x1b8>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d014      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a24:	b292      	uxth	r2, r2
 8002a26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2c:	1c9a      	adds	r2, r3, #2
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a40:	2301      	movs	r3, #1
 8002a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a44:	f7fe f9ce 	bl	8000de4 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d80b      	bhi.n	8002a6c <HAL_SPI_TransmitReceive+0x1e0>
 8002a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5a:	d007      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002a6a:	e0b5      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1a2      	bne.n	80029bc <HAL_SPI_TransmitReceive+0x130>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d19d      	bne.n	80029bc <HAL_SPI_TransmitReceive+0x130>
 8002a80:	e080      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x204>
 8002a8a:	8b7b      	ldrh	r3, [r7, #26]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d16f      	bne.n	8002b70 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	330c      	adds	r3, #12
 8002a9a:	7812      	ldrb	r2, [r2, #0]
 8002a9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab6:	e05b      	b.n	8002b70 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d11c      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x274>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d017      	beq.n	8002b00 <HAL_SPI_TransmitReceive+0x274>
 8002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d114      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	330c      	adds	r3, #12
 8002ae0:	7812      	ldrb	r2, [r2, #0]
 8002ae2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d119      	bne.n	8002b42 <HAL_SPI_TransmitReceive+0x2b6>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d014      	beq.n	8002b42 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b42:	f7fe f94f 	bl	8000de4 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d803      	bhi.n	8002b5a <HAL_SPI_TransmitReceive+0x2ce>
 8002b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d102      	bne.n	8002b60 <HAL_SPI_TransmitReceive+0x2d4>
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002b6e:	e033      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d19e      	bne.n	8002ab8 <HAL_SPI_TransmitReceive+0x22c>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d199      	bne.n	8002ab8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f91d 	bl	8002dc8 <SPI_EndRxTxTransaction>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002ba0:	e01a      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bce:	e003      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002be0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3730      	adds	r7, #48	@ 0x30
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bfc:	f7fe f8f2 	bl	8000de4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c0c:	f7fe f8ea 	bl	8000de4 <HAL_GetTick>
 8002c10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c12:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	015b      	lsls	r3, r3, #5
 8002c18:	0d1b      	lsrs	r3, r3, #20
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	fb02 f303 	mul.w	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c22:	e054      	b.n	8002cce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2a:	d050      	beq.n	8002cce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c2c:	f7fe f8da 	bl	8000de4 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d902      	bls.n	8002c42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d13d      	bne.n	8002cbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c5a:	d111      	bne.n	8002c80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c64:	d004      	beq.n	8002c70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6e:	d107      	bne.n	8002c80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c88:	d10f      	bne.n	8002caa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ca8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e017      	b.n	8002cee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d19b      	bne.n	8002c24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000000 	.word	0x20000000

08002cfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d10:	d111      	bne.n	8002d36 <SPI_EndRxTransaction+0x3a>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d1a:	d004      	beq.n	8002d26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d24:	d107      	bne.n	8002d36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d3e:	d12a      	bne.n	8002d96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d48:	d012      	beq.n	8002d70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2180      	movs	r1, #128	@ 0x80
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff ff49 	bl	8002bec <SPI_WaitFlagStateUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d02d      	beq.n	8002dbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e026      	b.n	8002dbe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2200      	movs	r2, #0
 8002d78:	2101      	movs	r1, #1
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f7ff ff36 	bl	8002bec <SPI_WaitFlagStateUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01a      	beq.n	8002dbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8a:	f043 0220 	orr.w	r2, r3, #32
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e013      	b.n	8002dbe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2101      	movs	r1, #1
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff ff23 	bl	8002bec <SPI_WaitFlagStateUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db0:	f043 0220 	orr.w	r2, r3, #32
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e000      	b.n	8002dbe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	2102      	movs	r1, #2
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7ff ff04 	bl	8002bec <SPI_WaitFlagStateUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dee:	f043 0220 	orr.w	r2, r3, #32
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e032      	b.n	8002e60 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <SPI_EndRxTxTransaction+0xa0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8002e6c <SPI_EndRxTxTransaction+0xa4>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	0d5b      	lsrs	r3, r3, #21
 8002e06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e18:	d112      	bne.n	8002e40 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2200      	movs	r2, #0
 8002e22:	2180      	movs	r1, #128	@ 0x80
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff fee1 	bl	8002bec <SPI_WaitFlagStateUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d016      	beq.n	8002e5e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e00f      	b.n	8002e60 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e56:	2b80      	cmp	r3, #128	@ 0x80
 8002e58:	d0f2      	beq.n	8002e40 <SPI_EndRxTxTransaction+0x78>
 8002e5a:	e000      	b.n	8002e5e <SPI_EndRxTxTransaction+0x96>
        break;
 8002e5c:	bf00      	nop
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	165e9f81 	.word	0x165e9f81

08002e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e042      	b.n	8002f08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fe1c 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2224      	movs	r2, #36	@ 0x24
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f82b 	bl	8002f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f14:	b0c0      	sub	sp, #256	@ 0x100
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2c:	68d9      	ldr	r1, [r3, #12]
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	ea40 0301 	orr.w	r3, r0, r1
 8002f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f68:	f021 010c 	bic.w	r1, r1, #12
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f76:	430b      	orrs	r3, r1
 8002f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f8a:	6999      	ldr	r1, [r3, #24]
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	ea40 0301 	orr.w	r3, r0, r1
 8002f96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b8f      	ldr	r3, [pc, #572]	@ (80031dc <UART_SetConfig+0x2cc>)
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d005      	beq.n	8002fb0 <UART_SetConfig+0xa0>
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	4b8d      	ldr	r3, [pc, #564]	@ (80031e0 <UART_SetConfig+0x2d0>)
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d104      	bne.n	8002fba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fb0:	f7fe fd22 	bl	80019f8 <HAL_RCC_GetPCLK2Freq>
 8002fb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002fb8:	e003      	b.n	8002fc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fba:	f7fe fd09 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8002fbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fcc:	f040 810c 	bne.w	80031e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002fde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	462b      	mov	r3, r5
 8002fe6:	1891      	adds	r1, r2, r2
 8002fe8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002fea:	415b      	adcs	r3, r3
 8002fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	eb12 0801 	adds.w	r8, r2, r1
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	eb43 0901 	adc.w	r9, r3, r1
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800300a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800300e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003012:	4690      	mov	r8, r2
 8003014:	4699      	mov	r9, r3
 8003016:	4623      	mov	r3, r4
 8003018:	eb18 0303 	adds.w	r3, r8, r3
 800301c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003020:	462b      	mov	r3, r5
 8003022:	eb49 0303 	adc.w	r3, r9, r3
 8003026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003036:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800303a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800303e:	460b      	mov	r3, r1
 8003040:	18db      	adds	r3, r3, r3
 8003042:	653b      	str	r3, [r7, #80]	@ 0x50
 8003044:	4613      	mov	r3, r2
 8003046:	eb42 0303 	adc.w	r3, r2, r3
 800304a:	657b      	str	r3, [r7, #84]	@ 0x54
 800304c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003054:	f7fd f8d6 	bl	8000204 <__aeabi_uldivmod>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4b61      	ldr	r3, [pc, #388]	@ (80031e4 <UART_SetConfig+0x2d4>)
 800305e:	fba3 2302 	umull	r2, r3, r3, r2
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	011c      	lsls	r4, r3, #4
 8003066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003070:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003078:	4642      	mov	r2, r8
 800307a:	464b      	mov	r3, r9
 800307c:	1891      	adds	r1, r2, r2
 800307e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003080:	415b      	adcs	r3, r3
 8003082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003088:	4641      	mov	r1, r8
 800308a:	eb12 0a01 	adds.w	sl, r2, r1
 800308e:	4649      	mov	r1, r9
 8003090:	eb43 0b01 	adc.w	fp, r3, r1
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a8:	4692      	mov	sl, r2
 80030aa:	469b      	mov	fp, r3
 80030ac:	4643      	mov	r3, r8
 80030ae:	eb1a 0303 	adds.w	r3, sl, r3
 80030b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030b6:	464b      	mov	r3, r9
 80030b8:	eb4b 0303 	adc.w	r3, fp, r3
 80030bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80030d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030d4:	460b      	mov	r3, r1
 80030d6:	18db      	adds	r3, r3, r3
 80030d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80030da:	4613      	mov	r3, r2
 80030dc:	eb42 0303 	adc.w	r3, r2, r3
 80030e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80030e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80030ea:	f7fd f88b 	bl	8000204 <__aeabi_uldivmod>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4611      	mov	r1, r2
 80030f4:	4b3b      	ldr	r3, [pc, #236]	@ (80031e4 <UART_SetConfig+0x2d4>)
 80030f6:	fba3 2301 	umull	r2, r3, r3, r1
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	2264      	movs	r2, #100	@ 0x64
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	1acb      	subs	r3, r1, r3
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800310a:	4b36      	ldr	r3, [pc, #216]	@ (80031e4 <UART_SetConfig+0x2d4>)
 800310c:	fba3 2302 	umull	r2, r3, r3, r2
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003118:	441c      	add	r4, r3
 800311a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800311e:	2200      	movs	r2, #0
 8003120:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003124:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800312c:	4642      	mov	r2, r8
 800312e:	464b      	mov	r3, r9
 8003130:	1891      	adds	r1, r2, r2
 8003132:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003134:	415b      	adcs	r3, r3
 8003136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800313c:	4641      	mov	r1, r8
 800313e:	1851      	adds	r1, r2, r1
 8003140:	6339      	str	r1, [r7, #48]	@ 0x30
 8003142:	4649      	mov	r1, r9
 8003144:	414b      	adcs	r3, r1
 8003146:	637b      	str	r3, [r7, #52]	@ 0x34
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003154:	4659      	mov	r1, fp
 8003156:	00cb      	lsls	r3, r1, #3
 8003158:	4651      	mov	r1, sl
 800315a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315e:	4651      	mov	r1, sl
 8003160:	00ca      	lsls	r2, r1, #3
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	4603      	mov	r3, r0
 8003168:	4642      	mov	r2, r8
 800316a:	189b      	adds	r3, r3, r2
 800316c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003170:	464b      	mov	r3, r9
 8003172:	460a      	mov	r2, r1
 8003174:	eb42 0303 	adc.w	r3, r2, r3
 8003178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003188:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800318c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003190:	460b      	mov	r3, r1
 8003192:	18db      	adds	r3, r3, r3
 8003194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003196:	4613      	mov	r3, r2
 8003198:	eb42 0303 	adc.w	r3, r2, r3
 800319c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800319e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80031a6:	f7fd f82d 	bl	8000204 <__aeabi_uldivmod>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4b0d      	ldr	r3, [pc, #52]	@ (80031e4 <UART_SetConfig+0x2d4>)
 80031b0:	fba3 1302 	umull	r1, r3, r3, r2
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	2164      	movs	r1, #100	@ 0x64
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	3332      	adds	r3, #50	@ 0x32
 80031c2:	4a08      	ldr	r2, [pc, #32]	@ (80031e4 <UART_SetConfig+0x2d4>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	f003 0207 	and.w	r2, r3, #7
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4422      	add	r2, r4
 80031d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031d8:	e106      	b.n	80033e8 <UART_SetConfig+0x4d8>
 80031da:	bf00      	nop
 80031dc:	40011000 	.word	0x40011000
 80031e0:	40011400 	.word	0x40011400
 80031e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ec:	2200      	movs	r2, #0
 80031ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80031fa:	4642      	mov	r2, r8
 80031fc:	464b      	mov	r3, r9
 80031fe:	1891      	adds	r1, r2, r2
 8003200:	6239      	str	r1, [r7, #32]
 8003202:	415b      	adcs	r3, r3
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24
 8003206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800320a:	4641      	mov	r1, r8
 800320c:	1854      	adds	r4, r2, r1
 800320e:	4649      	mov	r1, r9
 8003210:	eb43 0501 	adc.w	r5, r3, r1
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	00eb      	lsls	r3, r5, #3
 800321e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003222:	00e2      	lsls	r2, r4, #3
 8003224:	4614      	mov	r4, r2
 8003226:	461d      	mov	r5, r3
 8003228:	4643      	mov	r3, r8
 800322a:	18e3      	adds	r3, r4, r3
 800322c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003230:	464b      	mov	r3, r9
 8003232:	eb45 0303 	adc.w	r3, r5, r3
 8003236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003246:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003256:	4629      	mov	r1, r5
 8003258:	008b      	lsls	r3, r1, #2
 800325a:	4621      	mov	r1, r4
 800325c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003260:	4621      	mov	r1, r4
 8003262:	008a      	lsls	r2, r1, #2
 8003264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003268:	f7fc ffcc 	bl	8000204 <__aeabi_uldivmod>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4b60      	ldr	r3, [pc, #384]	@ (80033f4 <UART_SetConfig+0x4e4>)
 8003272:	fba3 2302 	umull	r2, r3, r3, r2
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	011c      	lsls	r4, r3, #4
 800327a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800327e:	2200      	movs	r2, #0
 8003280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003284:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800328c:	4642      	mov	r2, r8
 800328e:	464b      	mov	r3, r9
 8003290:	1891      	adds	r1, r2, r2
 8003292:	61b9      	str	r1, [r7, #24]
 8003294:	415b      	adcs	r3, r3
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800329c:	4641      	mov	r1, r8
 800329e:	1851      	adds	r1, r2, r1
 80032a0:	6139      	str	r1, [r7, #16]
 80032a2:	4649      	mov	r1, r9
 80032a4:	414b      	adcs	r3, r1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032b4:	4659      	mov	r1, fp
 80032b6:	00cb      	lsls	r3, r1, #3
 80032b8:	4651      	mov	r1, sl
 80032ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032be:	4651      	mov	r1, sl
 80032c0:	00ca      	lsls	r2, r1, #3
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	4642      	mov	r2, r8
 80032ca:	189b      	adds	r3, r3, r2
 80032cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032d0:	464b      	mov	r3, r9
 80032d2:	460a      	mov	r2, r1
 80032d4:	eb42 0303 	adc.w	r3, r2, r3
 80032d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032f4:	4649      	mov	r1, r9
 80032f6:	008b      	lsls	r3, r1, #2
 80032f8:	4641      	mov	r1, r8
 80032fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032fe:	4641      	mov	r1, r8
 8003300:	008a      	lsls	r2, r1, #2
 8003302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003306:	f7fc ff7d 	bl	8000204 <__aeabi_uldivmod>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4611      	mov	r1, r2
 8003310:	4b38      	ldr	r3, [pc, #224]	@ (80033f4 <UART_SetConfig+0x4e4>)
 8003312:	fba3 2301 	umull	r2, r3, r3, r1
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2264      	movs	r2, #100	@ 0x64
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	1acb      	subs	r3, r1, r3
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	3332      	adds	r3, #50	@ 0x32
 8003324:	4a33      	ldr	r2, [pc, #204]	@ (80033f4 <UART_SetConfig+0x4e4>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003330:	441c      	add	r4, r3
 8003332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003336:	2200      	movs	r2, #0
 8003338:	673b      	str	r3, [r7, #112]	@ 0x70
 800333a:	677a      	str	r2, [r7, #116]	@ 0x74
 800333c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003340:	4642      	mov	r2, r8
 8003342:	464b      	mov	r3, r9
 8003344:	1891      	adds	r1, r2, r2
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	415b      	adcs	r3, r3
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003350:	4641      	mov	r1, r8
 8003352:	1851      	adds	r1, r2, r1
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	4649      	mov	r1, r9
 8003358:	414b      	adcs	r3, r1
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003368:	4659      	mov	r1, fp
 800336a:	00cb      	lsls	r3, r1, #3
 800336c:	4651      	mov	r1, sl
 800336e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003372:	4651      	mov	r1, sl
 8003374:	00ca      	lsls	r2, r1, #3
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	4603      	mov	r3, r0
 800337c:	4642      	mov	r2, r8
 800337e:	189b      	adds	r3, r3, r2
 8003380:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003382:	464b      	mov	r3, r9
 8003384:	460a      	mov	r2, r1
 8003386:	eb42 0303 	adc.w	r3, r2, r3
 800338a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	663b      	str	r3, [r7, #96]	@ 0x60
 8003396:	667a      	str	r2, [r7, #100]	@ 0x64
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80033a4:	4649      	mov	r1, r9
 80033a6:	008b      	lsls	r3, r1, #2
 80033a8:	4641      	mov	r1, r8
 80033aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ae:	4641      	mov	r1, r8
 80033b0:	008a      	lsls	r2, r1, #2
 80033b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80033b6:	f7fc ff25 	bl	8000204 <__aeabi_uldivmod>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <UART_SetConfig+0x4e4>)
 80033c0:	fba3 1302 	umull	r1, r3, r3, r2
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	2164      	movs	r1, #100	@ 0x64
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	3332      	adds	r3, #50	@ 0x32
 80033d2:	4a08      	ldr	r2, [pc, #32]	@ (80033f4 <UART_SetConfig+0x4e4>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	f003 020f 	and.w	r2, r3, #15
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4422      	add	r2, r4
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	bf00      	nop
 80033ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033ee:	46bd      	mov	sp, r7
 80033f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f4:	51eb851f 	.word	0x51eb851f

080033f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033f8:	b084      	sub	sp, #16
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	f107 001c 	add.w	r0, r7, #28
 8003406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800340a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800340e:	2b01      	cmp	r3, #1
 8003410:	d123      	bne.n	800345a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003416:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800343a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800343e:	2b01      	cmp	r3, #1
 8003440:	d105      	bne.n	800344e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa9a 	bl	8003988 <USB_CoreReset>
 8003454:	4603      	mov	r3, r0
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e01b      	b.n	8003492 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa8e 	bl	8003988 <USB_CoreReset>
 800346c:	4603      	mov	r3, r0
 800346e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003470:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003474:	2b00      	cmp	r3, #0
 8003476:	d106      	bne.n	8003486 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	639a      	str	r2, [r3, #56]	@ 0x38
 8003484:	e005      	b.n	8003492 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003492:	7fbb      	ldrb	r3, [r7, #30]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d10b      	bne.n	80034b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f043 0206 	orr.w	r2, r3, #6
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034bc:	b004      	add	sp, #16
 80034be:	4770      	bx	lr

080034c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f023 0201 	bic.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d115      	bne.n	8003530 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003510:	200a      	movs	r0, #10
 8003512:	f7fd fc73 	bl	8000dfc <HAL_Delay>
      ms += 10U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	330a      	adds	r3, #10
 800351a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fa25 	bl	800396c <USB_GetMode>
 8003522:	4603      	mov	r3, r0
 8003524:	2b01      	cmp	r3, #1
 8003526:	d01e      	beq.n	8003566 <USB_SetCurrentMode+0x84>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2bc7      	cmp	r3, #199	@ 0xc7
 800352c:	d9f0      	bls.n	8003510 <USB_SetCurrentMode+0x2e>
 800352e:	e01a      	b.n	8003566 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d115      	bne.n	8003562 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003542:	200a      	movs	r0, #10
 8003544:	f7fd fc5a 	bl	8000dfc <HAL_Delay>
      ms += 10U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	330a      	adds	r3, #10
 800354c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fa0c 	bl	800396c <USB_GetMode>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <USB_SetCurrentMode+0x84>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2bc7      	cmp	r3, #199	@ 0xc7
 800355e:	d9f0      	bls.n	8003542 <USB_SetCurrentMode+0x60>
 8003560:	e001      	b.n	8003566 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e005      	b.n	8003572 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2bc8      	cmp	r3, #200	@ 0xc8
 800356a:	d101      	bne.n	8003570 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800357c:	b084      	sub	sp, #16
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800358a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	e009      	b.n	80035b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3340      	adds	r3, #64	@ 0x40
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	2200      	movs	r2, #0
 80035a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	3301      	adds	r3, #1
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2b0e      	cmp	r3, #14
 80035b4:	d9f2      	bls.n	800359c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d11c      	bne.n	80035f8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e005      	b.n	8003604 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800360a:	461a      	mov	r2, r3
 800360c:	2300      	movs	r3, #0
 800360e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003610:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003614:	2b01      	cmp	r3, #1
 8003616:	d10d      	bne.n	8003634 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003620:	2100      	movs	r1, #0
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f968 	bl	80038f8 <USB_SetDevSpeed>
 8003628:	e008      	b.n	800363c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800362a:	2101      	movs	r1, #1
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f963 	bl	80038f8 <USB_SetDevSpeed>
 8003632:	e003      	b.n	800363c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003634:	2103      	movs	r1, #3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f95e 	bl	80038f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800363c:	2110      	movs	r1, #16
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f8fa 	bl	8003838 <USB_FlushTxFifo>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f924 	bl	800389c <USB_FlushRxFifo>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003664:	461a      	mov	r2, r3
 8003666:	2300      	movs	r3, #0
 8003668:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003670:	461a      	mov	r2, r3
 8003672:	2300      	movs	r3, #0
 8003674:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800367c:	461a      	mov	r2, r3
 800367e:	2300      	movs	r3, #0
 8003680:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	e043      	b.n	8003710 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800369a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800369e:	d118      	bne.n	80036d2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b2:	461a      	mov	r2, r3
 80036b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e013      	b.n	80036e4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036c8:	461a      	mov	r2, r3
 80036ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e008      	b.n	80036e4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036de:	461a      	mov	r2, r3
 80036e0:	2300      	movs	r3, #0
 80036e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036f0:	461a      	mov	r2, r3
 80036f2:	2300      	movs	r3, #0
 80036f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003702:	461a      	mov	r2, r3
 8003704:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003708:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	3301      	adds	r3, #1
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003714:	461a      	mov	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4293      	cmp	r3, r2
 800371a:	d3b5      	bcc.n	8003688 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	e043      	b.n	80037aa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003734:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003738:	d118      	bne.n	800376c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800374c:	461a      	mov	r2, r3
 800374e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	e013      	b.n	800377e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003762:	461a      	mov	r2, r3
 8003764:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e008      	b.n	800377e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003778:	461a      	mov	r2, r3
 800377a:	2300      	movs	r3, #0
 800377c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800378a:	461a      	mov	r2, r3
 800378c:	2300      	movs	r3, #0
 800378e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800379c:	461a      	mov	r2, r3
 800379e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	3301      	adds	r3, #1
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80037ae:	461a      	mov	r2, r3
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d3b5      	bcc.n	8003722 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80037d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80037d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d105      	bne.n	80037ec <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f043 0210 	orr.w	r2, r3, #16
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <USB_DevInit+0x2b8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80037f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f043 0208 	orr.w	r2, r3, #8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800380c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003810:	2b01      	cmp	r3, #1
 8003812:	d107      	bne.n	8003824 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800381c:	f043 0304 	orr.w	r3, r3, #4
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003824:	7dfb      	ldrb	r3, [r7, #23]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003830:	b004      	add	sp, #16
 8003832:	4770      	bx	lr
 8003834:	803c3800 	.word	0x803c3800

08003838 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3301      	adds	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003852:	d901      	bls.n	8003858 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e01b      	b.n	8003890 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	daf2      	bge.n	8003846 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	019b      	lsls	r3, r3, #6
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3301      	adds	r3, #1
 8003874:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800387c:	d901      	bls.n	8003882 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e006      	b.n	8003890 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b20      	cmp	r3, #32
 800388c:	d0f0      	beq.n	8003870 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3301      	adds	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80038b4:	d901      	bls.n	80038ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e018      	b.n	80038ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	daf2      	bge.n	80038a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2210      	movs	r2, #16
 80038ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3301      	adds	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80038d8:	d901      	bls.n	80038de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e006      	b.n	80038ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d0f0      	beq.n	80038cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	68f9      	ldr	r1, [r7, #12]
 8003914:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003944:	f023 0303 	bic.w	r3, r3, #3
 8003948:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003958:	f043 0302 	orr.w	r3, r3, #2
 800395c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 0301 	and.w	r3, r3, #1
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3301      	adds	r3, #1
 8003998:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039a0:	d901      	bls.n	80039a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e01b      	b.n	80039de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	daf2      	bge.n	8003994 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3301      	adds	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039ca:	d901      	bls.n	80039d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e006      	b.n	80039de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d0f0      	beq.n	80039be <USB_CoreReset+0x36>

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <memset>:
 80039ea:	4402      	add	r2, r0
 80039ec:	4603      	mov	r3, r0
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d100      	bne.n	80039f4 <memset+0xa>
 80039f2:	4770      	bx	lr
 80039f4:	f803 1b01 	strb.w	r1, [r3], #1
 80039f8:	e7f9      	b.n	80039ee <memset+0x4>
	...

080039fc <__libc_init_array>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003a34 <__libc_init_array+0x38>)
 8003a00:	4c0d      	ldr	r4, [pc, #52]	@ (8003a38 <__libc_init_array+0x3c>)
 8003a02:	1b64      	subs	r4, r4, r5
 8003a04:	10a4      	asrs	r4, r4, #2
 8003a06:	2600      	movs	r6, #0
 8003a08:	42a6      	cmp	r6, r4
 8003a0a:	d109      	bne.n	8003a20 <__libc_init_array+0x24>
 8003a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8003a3c <__libc_init_array+0x40>)
 8003a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8003a40 <__libc_init_array+0x44>)
 8003a10:	f000 f818 	bl	8003a44 <_init>
 8003a14:	1b64      	subs	r4, r4, r5
 8003a16:	10a4      	asrs	r4, r4, #2
 8003a18:	2600      	movs	r6, #0
 8003a1a:	42a6      	cmp	r6, r4
 8003a1c:	d105      	bne.n	8003a2a <__libc_init_array+0x2e>
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a24:	4798      	blx	r3
 8003a26:	3601      	adds	r6, #1
 8003a28:	e7ee      	b.n	8003a08 <__libc_init_array+0xc>
 8003a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2e:	4798      	blx	r3
 8003a30:	3601      	adds	r6, #1
 8003a32:	e7f2      	b.n	8003a1a <__libc_init_array+0x1e>
 8003a34:	08003a7c 	.word	0x08003a7c
 8003a38:	08003a7c 	.word	0x08003a7c
 8003a3c:	08003a7c 	.word	0x08003a7c
 8003a40:	08003a80 	.word	0x08003a80

08003a44 <_init>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr

08003a50 <_fini>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr
