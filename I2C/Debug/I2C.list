
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c98  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08008e68  08008e68  00009e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009238  08009238  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009238  08009238  0000a238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009240  08009240  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009240  08009240  0000a240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009244  08009244  0000a244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009248  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c8  200001d4  0800941c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000099c  0800941c  0000b99c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146e9  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e7  00000000  00000000  0001f8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  000222d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f03  00000000  00000000  000235e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226ca  00000000  00000000  000244eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179fe  00000000  00000000  00046bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9d29  00000000  00000000  0005e5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001282dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063d8  00000000  00000000  00128320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012e6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008e50 	.word	0x08008e50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008e50 	.word	0x08008e50

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <ADXL345_initialization>:
#include "ADXL345.h"

uint8_t ADXL345_initialization(I2C_HandleTypeDef *hi2c, ADXL345 *dev)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af04      	add	r7, sp, #16
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	dev->hi2cHandle = hi2c;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	601a      	str	r2, [r3, #0]
    uint8_t regData;
    uint8_t errNum = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;

    // Read if the REGISTER_DEVICE_ID answers with the correct data ADXL345_DEVICE_ID 0xE5 p.24
    status = HAL_I2C_Mem_Read(dev->hi2cHandle, ADXL345_ADDRESS, ADXL345_REG_DEVICE_ID, I2C_MEMADD_SIZE_8BIT, &regData, 1, HAL_MAX_DELAY);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	2301      	movs	r3, #1
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	f107 030d 	add.w	r3, r7, #13
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	21a6      	movs	r1, #166	@ 0xa6
 8000fa6:	f001 fdd1 	bl	8002b4c <HAL_I2C_Mem_Read>
 8000faa:	4603      	mov	r3, r0
 8000fac:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf14      	ite	ne
 8000fb4:	2301      	movne	r3, #1
 8000fb6:	2300      	moveq	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	73fb      	strb	r3, [r7, #15]
    if (regData != ADXL345_DEVICE_ID)
 8000fc2:	7b7b      	ldrb	r3, [r7, #13]
 8000fc4:	2be5      	cmp	r3, #229	@ 0xe5
 8000fc6:	d001      	beq.n	8000fcc <ADXL345_initialization+0x54>
    {
    	return 255; //
 8000fc8:	23ff      	movs	r3, #255	@ 0xff
 8000fca:	e01d      	b.n	8001008 <ADXL345_initialization+0x90>
    }

    // Set the register ADXL345_REG_POWER_CTL to enable measurement mode 0b00001000 = 0x08 p.26
    regData = 0x08;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Mem_Write(dev->hi2cHandle, ADXL345_ADDRESS, ADXL345_REG_POWER_CTL, I2C_MEMADD_SIZE_8BIT, &regData, 1, HAL_MAX_DELAY);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	f107 030d 	add.w	r3, r7, #13
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	222d      	movs	r2, #45	@ 0x2d
 8000fe8:	21a6      	movs	r1, #166	@ 0xa6
 8000fea:	f001 fcb5 	bl	8002958 <HAL_I2C_Mem_Write>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf14      	ite	ne
 8000ff8:	2301      	movne	r3, #1
 8000ffa:	2300      	moveq	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	461a      	mov	r2, r3
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	4413      	add	r3, r2
 8001004:	73fb      	strb	r3, [r7, #15]

    return 0;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <ADXL345_set_offset>:

void ADXL345_set_offset(ADXL345 *dev)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af04      	add	r7, sp, #16
 8001016:	6078      	str	r0, [r7, #4]
	// p.31 Calculating offsets. For example in Y axis with normalised values I was consistently getting a 0.1 offset value
	// So 0.1/0.0156 = 6.4LSB which approximately is 6LSB. Decimal -6 represented in twos complements is 0b11111010
	uint8_t offsetX = 0b00000000;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
	uint8_t offsetY = 0b11111010;
 800101c:	23fa      	movs	r3, #250	@ 0xfa
 800101e:	73bb      	strb	r3, [r7, #14]
	uint8_t offsetZ = 0b11110100;
 8001020:	23f4      	movs	r3, #244	@ 0xf4
 8001022:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(dev->hi2cHandle, ADXL345_ADDRESS, ADXL345_REG_OFSX, I2C_MEMADD_SIZE_8BIT, &offsetX, 1, HAL_MAX_DELAY);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	2301      	movs	r3, #1
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	f107 030f 	add.w	r3, r7, #15
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	221e      	movs	r2, #30
 800103c:	21a6      	movs	r1, #166	@ 0xa6
 800103e:	f001 fc8b 	bl	8002958 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(dev->hi2cHandle, ADXL345_ADDRESS, ADXL345_REG_OFSY, I2C_MEMADD_SIZE_8BIT, &offsetY, 1, HAL_MAX_DELAY);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2301      	movs	r3, #1
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	f107 030e 	add.w	r3, r7, #14
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	221f      	movs	r2, #31
 800105a:	21a6      	movs	r1, #166	@ 0xa6
 800105c:	f001 fc7c 	bl	8002958 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(dev->hi2cHandle, ADXL345_ADDRESS, ADXL345_REG_OFSZ, I2C_MEMADD_SIZE_8BIT, &offsetZ, 1, HAL_MAX_DELAY);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	2301      	movs	r3, #1
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	f107 030d 	add.w	r3, r7, #13
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	2220      	movs	r2, #32
 8001078:	21a6      	movs	r1, #166	@ 0xa6
 800107a:	f001 fc6d 	bl	8002958 <HAL_I2C_Mem_Write>

}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <ADXL345_get_acc_raw>:

HAL_StatusTypeDef ADXL345_get_acc_raw(ADXL345 *dev)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b088      	sub	sp, #32
 800108a:	af04      	add	r7, sp, #16
 800108c:	6078      	str	r0, [r7, #4]
	uint8_t data[6];

	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(dev->hi2cHandle, ADXL345_ADDRESS, ADXL345_REG_DATAX0, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2306      	movs	r3, #6
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	2232      	movs	r2, #50	@ 0x32
 80010a6:	21a6      	movs	r1, #166	@ 0xa6
 80010a8:	f001 fd50 	bl	8002b4c <HAL_I2C_Mem_Read>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]

	dev->acc_rawX = (int16_t)((data[1] << 8) | data[0]);
 80010b0:	7a7b      	ldrb	r3, [r7, #9]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7a3b      	ldrb	r3, [r7, #8]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21a      	sxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	809a      	strh	r2, [r3, #4]
	dev->acc_rawY = (int16_t)((data[3] << 8) | data[2]);
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7abb      	ldrb	r3, [r7, #10]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	80da      	strh	r2, [r3, #6]
	dev->acc_rawZ = (int16_t)((data[5] << 8) | data[4]);
 80010d4:	7b7b      	ldrb	r3, [r7, #13]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7b3b      	ldrb	r3, [r7, #12]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	811a      	strh	r2, [r3, #8]

	return status;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <ADXL345_get_acc_norm>:

HAL_StatusTypeDef ADXL345_get_acc_norm(ADXL345 *dev)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = ADXL345_get_acc_raw(dev);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffc4 	bl	8001086 <ADXL345_get_acc_raw>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]

	dev->acc_msp2X = dev->acc_rawX * 0.004;// * 9.81;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa2b 	bl	8000564 <__aeabi_i2d>
 800110e:	a31e      	add	r3, pc, #120	@ (adr r3, 8001188 <ADXL345_get_acc_norm+0x98>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f7ff fa90 	bl	8000638 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f7ff fd62 	bl	8000be8 <__aeabi_d2f>
 8001124:	4602      	mov	r2, r0
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60da      	str	r2, [r3, #12]
	dev->acc_msp2Y = dev->acc_rawY * 0.004;// * 9.81;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fa17 	bl	8000564 <__aeabi_i2d>
 8001136:	a314      	add	r3, pc, #80	@ (adr r3, 8001188 <ADXL345_get_acc_norm+0x98>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fa7c 	bl	8000638 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fd4e 	bl	8000be8 <__aeabi_d2f>
 800114c:	4602      	mov	r2, r0
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	611a      	str	r2, [r3, #16]
	dev->acc_msp2Z = dev->acc_rawZ * 0.004;// * 9.81;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fa03 	bl	8000564 <__aeabi_i2d>
 800115e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001188 <ADXL345_get_acc_norm+0x98>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa68 	bl	8000638 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fd3a 	bl	8000be8 <__aeabi_d2f>
 8001174:	4602      	mov	r2, r0
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	615a      	str	r2, [r3, #20]

	return status;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	f3af 8000 	nop.w
 8001188:	d2f1a9fc 	.word	0xd2f1a9fc
 800118c:	3f70624d 	.word	0x3f70624d

08001190 <ADXL345_print_norm>:
	  HAL_UART_Transmit(huart, (uint8_t *)rn, strlen(rn), HAL_MAX_DELAY);
}


void ADXL345_print_norm(ADXL345 *dev, UART_HandleTypeDef *huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b092      	sub	sp, #72	@ 0x48
 8001194:	af02      	add	r7, sp, #8
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	  char bufferX[10];
	  char bufferY[10];
	  char bufferZ[10];

	  const char *msgX = "X=";
 800119a:	4b59      	ldr	r3, [pc, #356]	@ (8001300 <ADXL345_print_norm+0x170>)
 800119c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  const char *msgY = "Y=";
 800119e:	4b59      	ldr	r3, [pc, #356]	@ (8001304 <ADXL345_print_norm+0x174>)
 80011a0:	63bb      	str	r3, [r7, #56]	@ 0x38
	  const char *msgZ = "Z=";
 80011a2:	4b59      	ldr	r3, [pc, #356]	@ (8001308 <ADXL345_print_norm+0x178>)
 80011a4:	637b      	str	r3, [r7, #52]	@ 0x34
	  const char *space = "\t";
 80011a6:	4b59      	ldr	r3, [pc, #356]	@ (800130c <ADXL345_print_norm+0x17c>)
 80011a8:	633b      	str	r3, [r7, #48]	@ 0x30
	  const char *rn = "\r\n";
 80011aa:	4b59      	ldr	r3, [pc, #356]	@ (8001310 <ADXL345_print_norm+0x180>)
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

	  snprintf(bufferX, sizeof(bufferX), "%f", dev->acc_msp2X);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9e8 	bl	8000588 <__aeabi_f2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	f107 0020 	add.w	r0, r7, #32
 80011c0:	e9cd 2300 	strd	r2, r3, [sp]
 80011c4:	4a53      	ldr	r2, [pc, #332]	@ (8001314 <ADXL345_print_norm+0x184>)
 80011c6:	210a      	movs	r1, #10
 80011c8:	f005 fd02 	bl	8006bd0 <sniprintf>
	  snprintf(bufferY, sizeof(bufferY), "%f", dev->acc_msp2Y);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9d9 	bl	8000588 <__aeabi_f2d>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	f107 0014 	add.w	r0, r7, #20
 80011de:	e9cd 2300 	strd	r2, r3, [sp]
 80011e2:	4a4c      	ldr	r2, [pc, #304]	@ (8001314 <ADXL345_print_norm+0x184>)
 80011e4:	210a      	movs	r1, #10
 80011e6:	f005 fcf3 	bl	8006bd0 <sniprintf>
	  snprintf(bufferZ, sizeof(bufferZ), "%f", dev->acc_msp2Z);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9ca 	bl	8000588 <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	f107 0008 	add.w	r0, r7, #8
 80011fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001200:	4a44      	ldr	r2, [pc, #272]	@ (8001314 <ADXL345_print_norm+0x184>)
 8001202:	210a      	movs	r1, #10
 8001204:	f005 fce4 	bl	8006bd0 <sniprintf>

	  HAL_UART_Transmit(huart, (uint8_t *)msgX, strlen(msgX), HAL_MAX_DELAY);
 8001208:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800120a:	f7ff f851 	bl	80002b0 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	b29a      	uxth	r2, r3
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001218:	6838      	ldr	r0, [r7, #0]
 800121a:	f004 f90b 	bl	8005434 <HAL_UART_Transmit>
	  HAL_UART_Transmit(huart, (uint8_t *)bufferX, strlen(bufferX), HAL_MAX_DELAY);
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f844 	bl	80002b0 <strlen>
 8001228:	4603      	mov	r3, r0
 800122a:	b29a      	uxth	r2, r3
 800122c:	f107 0120 	add.w	r1, r7, #32
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	6838      	ldr	r0, [r7, #0]
 8001236:	f004 f8fd 	bl	8005434 <HAL_UART_Transmit>
	  HAL_UART_Transmit(huart, (uint8_t *)space, strlen(space), HAL_MAX_DELAY);
 800123a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800123c:	f7ff f838 	bl	80002b0 <strlen>
 8001240:	4603      	mov	r3, r0
 8001242:	b29a      	uxth	r2, r3
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	f004 f8f2 	bl	8005434 <HAL_UART_Transmit>

	  HAL_UART_Transmit(huart, (uint8_t *)msgY, strlen(msgY), HAL_MAX_DELAY);
 8001250:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001252:	f7ff f82d 	bl	80002b0 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001260:	6838      	ldr	r0, [r7, #0]
 8001262:	f004 f8e7 	bl	8005434 <HAL_UART_Transmit>
	  HAL_UART_Transmit(huart, (uint8_t *)bufferY, strlen(bufferY), HAL_MAX_DELAY);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f820 	bl	80002b0 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	b29a      	uxth	r2, r3
 8001274:	f107 0114 	add.w	r1, r7, #20
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f004 f8d9 	bl	8005434 <HAL_UART_Transmit>
	  HAL_UART_Transmit(huart, (uint8_t *)space, strlen(space), HAL_MAX_DELAY);
 8001282:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001284:	f7ff f814 	bl	80002b0 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001292:	6838      	ldr	r0, [r7, #0]
 8001294:	f004 f8ce 	bl	8005434 <HAL_UART_Transmit>

	  HAL_UART_Transmit(huart, (uint8_t *)msgZ, strlen(msgZ), HAL_MAX_DELAY);
 8001298:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800129a:	f7ff f809 	bl	80002b0 <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80012a8:	6838      	ldr	r0, [r7, #0]
 80012aa:	f004 f8c3 	bl	8005434 <HAL_UART_Transmit>
	  HAL_UART_Transmit(huart, (uint8_t *)bufferZ, strlen(bufferZ), HAL_MAX_DELAY);
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe fffc 	bl	80002b0 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f107 0108 	add.w	r1, r7, #8
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	6838      	ldr	r0, [r7, #0]
 80012c6:	f004 f8b5 	bl	8005434 <HAL_UART_Transmit>
	  HAL_UART_Transmit(huart, (uint8_t *)space, strlen(space), HAL_MAX_DELAY);
 80012ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012cc:	f7fe fff0 	bl	80002b0 <strlen>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012da:	6838      	ldr	r0, [r7, #0]
 80012dc:	f004 f8aa 	bl	8005434 <HAL_UART_Transmit>

	  HAL_UART_Transmit(huart, (uint8_t *)rn, strlen(rn), HAL_MAX_DELAY);
 80012e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012e2:	f7fe ffe5 	bl	80002b0 <strlen>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80012f0:	6838      	ldr	r0, [r7, #0]
 80012f2:	f004 f89f 	bl	8005434 <HAL_UART_Transmit>
}
 80012f6:	bf00      	nop
 80012f8:	3740      	adds	r7, #64	@ 0x40
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	08008e68 	.word	0x08008e68
 8001304:	08008e6c 	.word	0x08008e6c
 8001308:	08008e70 	.word	0x08008e70
 800130c:	08008e74 	.word	0x08008e74
 8001310:	08008e78 	.word	0x08008e78
 8001314:	08008e80 	.word	0x08008e80

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131e:	f000 fead 	bl	800207c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001322:	f000 f893 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001326:	f000 fad3 	bl	80018d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800132a:	f000 fa77 	bl	800181c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800132e:	f000 fa9f 	bl	8001870 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8001332:	f000 f8f7 	bl	8001524 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001336:	f000 f923 	bl	8001580 <MX_TIM3_Init>
  MX_TIM4_Init();
 800133a:	f000 f997 	bl	800166c <MX_TIM4_Init>
  MX_TIM12_Init();
 800133e:	f000 fa0b 	bl	8001758 <MX_TIM12_Init>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001342:	2100      	movs	r1, #0
 8001344:	4839      	ldr	r0, [pc, #228]	@ (800142c <main+0x114>)
 8001346:	f003 fa3b 	bl	80047c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800134a:	2108      	movs	r1, #8
 800134c:	4838      	ldr	r0, [pc, #224]	@ (8001430 <main+0x118>)
 800134e:	f003 fa37 	bl	80047c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001352:	2104      	movs	r1, #4
 8001354:	4837      	ldr	r0, [pc, #220]	@ (8001434 <main+0x11c>)
 8001356:	f003 fa33 	bl	80047c0 <HAL_TIM_PWM_Start>

  /* USER CODE BEGIN 2 */
  const char *msgOK = "ADXL I2C Initialized\r\n";
 800135a:	4b37      	ldr	r3, [pc, #220]	@ (8001438 <main+0x120>)
 800135c:	61fb      	str	r3, [r7, #28]
  const char *msgKO = "ADXL I2C Failed\r\n";
 800135e:	4b37      	ldr	r3, [pc, #220]	@ (800143c <main+0x124>)
 8001360:	61bb      	str	r3, [r7, #24]
  ADXL345 adxl345;

  if (ADXL345_initialization(&hi2c2, &adxl345) == 0)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4836      	ldr	r0, [pc, #216]	@ (8001440 <main+0x128>)
 8001368:	f7ff fe06 	bl	8000f78 <ADXL345_initialization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10b      	bne.n	800138a <main+0x72>
  {
	  HAL_UART_Transmit(&huart3, (uint8_t *)msgOK, strlen(msgOK), HAL_MAX_DELAY);
 8001372:	69f8      	ldr	r0, [r7, #28]
 8001374:	f7fe ff9c 	bl	80002b0 <strlen>
 8001378:	4603      	mov	r3, r0
 800137a:	b29a      	uxth	r2, r3
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	69f9      	ldr	r1, [r7, #28]
 8001382:	4830      	ldr	r0, [pc, #192]	@ (8001444 <main+0x12c>)
 8001384:	f004 f856 	bl	8005434 <HAL_UART_Transmit>
 8001388:	e00a      	b.n	80013a0 <main+0x88>
  } else {
	  HAL_UART_Transmit(&huart3, (uint8_t *)msgKO, strlen(msgKO), HAL_MAX_DELAY);
 800138a:	69b8      	ldr	r0, [r7, #24]
 800138c:	f7fe ff90 	bl	80002b0 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	69b9      	ldr	r1, [r7, #24]
 800139a:	482a      	ldr	r0, [pc, #168]	@ (8001444 <main+0x12c>)
 800139c:	f004 f84a 	bl	8005434 <HAL_UART_Transmit>
  }

  ADXL345_set_offset(&adxl345);
 80013a0:	463b      	mov	r3, r7
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fe34 	bl	8001010 <ADXL345_set_offset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ADXL345_get_acc_norm(&adxl345);
 80013a8:	463b      	mov	r3, r7
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fea0 	bl	80010f0 <ADXL345_get_acc_norm>
	  ADXL345_print_norm(&adxl345, &huart3);
 80013b0:	463b      	mov	r3, r7
 80013b2:	4924      	ldr	r1, [pc, #144]	@ (8001444 <main+0x12c>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff feeb 	bl	8001190 <ADXL345_print_norm>
	  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, (uint32_t)((adxl345.acc_msp2X+1)*20000) );
 80013ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80013be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013c6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001448 <main+0x130>
 80013ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <main+0x114>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d6:	ee17 2a90 	vmov	r2, s15
 80013da:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint32_t)((adxl345.acc_msp2Y+1)*20000) );
 80013dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013e8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001448 <main+0x130>
 80013ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <main+0x118>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f8:	ee17 2a90 	vmov	r2, s15
 80013fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (uint32_t)((adxl345.acc_msp2Z+1)*20000) );
 80013fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001406:	ee77 7a87 	vadd.f32	s15, s15, s14
 800140a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001448 <main+0x130>
 800140e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <main+0x11c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141a:	ee17 2a90 	vmov	r2, s15
 800141e:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_Delay(100);
 8001420:	2064      	movs	r0, #100	@ 0x64
 8001422:	f000 fe9d 	bl	8002160 <HAL_Delay>
	  ADXL345_get_acc_norm(&adxl345);
 8001426:	bf00      	nop
 8001428:	e7be      	b.n	80013a8 <main+0x90>
 800142a:	bf00      	nop
 800142c:	200002d4 	.word	0x200002d4
 8001430:	20000244 	.word	0x20000244
 8001434:	2000028c 	.word	0x2000028c
 8001438:	08008e84 	.word	0x08008e84
 800143c:	08008e9c 	.word	0x08008e9c
 8001440:	200001f0 	.word	0x200001f0
 8001444:	2000031c 	.word	0x2000031c
 8001448:	469c4000 	.word	0x469c4000

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	@ 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	2234      	movs	r2, #52	@ 0x34
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f005 fc2f 	bl	8006cbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b29      	ldr	r3, [pc, #164]	@ (800151c <SystemClock_Config+0xd0>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a28      	ldr	r2, [pc, #160]	@ (800151c <SystemClock_Config+0xd0>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b26      	ldr	r3, [pc, #152]	@ (800151c <SystemClock_Config+0xd0>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <SystemClock_Config+0xd4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a22      	ldr	r2, [pc, #136]	@ (8001520 <SystemClock_Config+0xd4>)
 8001496:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <SystemClock_Config+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80014b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b2:	2302      	movs	r3, #2
 80014b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014bc:	2308      	movs	r3, #8
 80014be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80014c0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014c6:	2304      	movs	r3, #4
 80014c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80014ca:	2308      	movs	r3, #8
 80014cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fe46 	bl	8004168 <HAL_RCC_OscConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014e2:	f000 fa99 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e6:	230f      	movs	r3, #15
 80014e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ea:	2302      	movs	r3, #2
 80014ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	2103      	movs	r1, #3
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fa42 	bl	800398c <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800150e:	f000 fa83 	bl	8001a18 <Error_Handler>
  }
}
 8001512:	bf00      	nop
 8001514:	3750      	adds	r7, #80	@ 0x50
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000

08001524 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <MX_I2C2_Init+0x50>)
 800152a:	4a13      	ldr	r2, [pc, #76]	@ (8001578 <MX_I2C2_Init+0x54>)
 800152c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_I2C2_Init+0x50>)
 8001530:	4a12      	ldr	r2, [pc, #72]	@ (800157c <MX_I2C2_Init+0x58>)
 8001532:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <MX_I2C2_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <MX_I2C2_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <MX_I2C2_Init+0x50>)
 8001542:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001546:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <MX_I2C2_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <MX_I2C2_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <MX_I2C2_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <MX_I2C2_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	@ (8001574 <MX_I2C2_Init+0x50>)
 8001562:	f001 f8b5 	bl	80026d0 <HAL_I2C_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800156c:	f000 fa54 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200001f0 	.word	0x200001f0
 8001578:	40005800 	.word	0x40005800
 800157c:	000186a0 	.word	0x000186a0

08001580 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08e      	sub	sp, #56	@ 0x38
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001586:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
 80015ac:	615a      	str	r2, [r3, #20]
 80015ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001664 <MX_TIM3_Init+0xe4>)
 80015b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001668 <MX_TIM3_Init+0xe8>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 80015b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <MX_TIM3_Init+0xe4>)
 80015b8:	225f      	movs	r2, #95	@ 0x5f
 80015ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b29      	ldr	r3, [pc, #164]	@ (8001664 <MX_TIM3_Init+0xe4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80015c2:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <MX_TIM3_Init+0xe4>)
 80015c4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80015c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b26      	ldr	r3, [pc, #152]	@ (8001664 <MX_TIM3_Init+0xe4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d0:	4b24      	ldr	r3, [pc, #144]	@ (8001664 <MX_TIM3_Init+0xe4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015d6:	4823      	ldr	r0, [pc, #140]	@ (8001664 <MX_TIM3_Init+0xe4>)
 80015d8:	f003 f84a 	bl	8004670 <HAL_TIM_Base_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015e2:	f000 fa19 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015f0:	4619      	mov	r1, r3
 80015f2:	481c      	ldr	r0, [pc, #112]	@ (8001664 <MX_TIM3_Init+0xe4>)
 80015f4:	f003 fa6e 	bl	8004ad4 <HAL_TIM_ConfigClockSource>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015fe:	f000 fa0b 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001602:	4818      	ldr	r0, [pc, #96]	@ (8001664 <MX_TIM3_Init+0xe4>)
 8001604:	f003 f883 	bl	800470e <HAL_TIM_PWM_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800160e:	f000 fa03 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800161a:	f107 0320 	add.w	r3, r7, #32
 800161e:	4619      	mov	r1, r3
 8001620:	4810      	ldr	r0, [pc, #64]	@ (8001664 <MX_TIM3_Init+0xe4>)
 8001622:	f003 fe3b 	bl	800529c <HAL_TIMEx_MasterConfigSynchronization>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800162c:	f000 f9f4 	bl	8001a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001630:	2360      	movs	r3, #96	@ 0x60
 8001632:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2208      	movs	r2, #8
 8001644:	4619      	mov	r1, r3
 8001646:	4807      	ldr	r0, [pc, #28]	@ (8001664 <MX_TIM3_Init+0xe4>)
 8001648:	f003 f982 	bl	8004950 <HAL_TIM_PWM_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001652:	f000 f9e1 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001656:	4803      	ldr	r0, [pc, #12]	@ (8001664 <MX_TIM3_Init+0xe4>)
 8001658:	f000 faa2 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 800165c:	bf00      	nop
 800165e:	3738      	adds	r7, #56	@ 0x38
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000244 	.word	0x20000244
 8001668:	40000400 	.word	0x40000400

0800166c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08e      	sub	sp, #56	@ 0x38
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	f107 0320 	add.w	r3, r7, #32
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	615a      	str	r2, [r3, #20]
 800169a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800169c:	4b2c      	ldr	r3, [pc, #176]	@ (8001750 <MX_TIM4_Init+0xe4>)
 800169e:	4a2d      	ldr	r2, [pc, #180]	@ (8001754 <MX_TIM4_Init+0xe8>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <MX_TIM4_Init+0xe4>)
 80016a4:	225f      	movs	r2, #95	@ 0x5f
 80016a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <MX_TIM4_Init+0xe4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80016ae:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <MX_TIM4_Init+0xe4>)
 80016b0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80016b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <MX_TIM4_Init+0xe4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <MX_TIM4_Init+0xe4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016c2:	4823      	ldr	r0, [pc, #140]	@ (8001750 <MX_TIM4_Init+0xe4>)
 80016c4:	f002 ffd4 	bl	8004670 <HAL_TIM_Base_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80016ce:	f000 f9a3 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016dc:	4619      	mov	r1, r3
 80016de:	481c      	ldr	r0, [pc, #112]	@ (8001750 <MX_TIM4_Init+0xe4>)
 80016e0:	f003 f9f8 	bl	8004ad4 <HAL_TIM_ConfigClockSource>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80016ea:	f000 f995 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016ee:	4818      	ldr	r0, [pc, #96]	@ (8001750 <MX_TIM4_Init+0xe4>)
 80016f0:	f003 f80d 	bl	800470e <HAL_TIM_PWM_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80016fa:	f000 f98d 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	4619      	mov	r1, r3
 800170c:	4810      	ldr	r0, [pc, #64]	@ (8001750 <MX_TIM4_Init+0xe4>)
 800170e:	f003 fdc5 	bl	800529c <HAL_TIMEx_MasterConfigSynchronization>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001718:	f000 f97e 	bl	8001a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171c:	2360      	movs	r3, #96	@ 0x60
 800171e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2204      	movs	r2, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4807      	ldr	r0, [pc, #28]	@ (8001750 <MX_TIM4_Init+0xe4>)
 8001734:	f003 f90c 	bl	8004950 <HAL_TIM_PWM_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800173e:	f000 f96b 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001742:	4803      	ldr	r0, [pc, #12]	@ (8001750 <MX_TIM4_Init+0xe4>)
 8001744:	f000 fa2c 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 8001748:	bf00      	nop
 800174a:	3738      	adds	r7, #56	@ 0x38
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2000028c 	.word	0x2000028c
 8001754:	40000800 	.word	0x40000800

08001758 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800177e:	4b25      	ldr	r3, [pc, #148]	@ (8001814 <MX_TIM12_Init+0xbc>)
 8001780:	4a25      	ldr	r2, [pc, #148]	@ (8001818 <MX_TIM12_Init+0xc0>)
 8001782:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 8001784:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <MX_TIM12_Init+0xbc>)
 8001786:	225f      	movs	r2, #95	@ 0x5f
 8001788:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <MX_TIM12_Init+0xbc>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19999;
 8001790:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <MX_TIM12_Init+0xbc>)
 8001792:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001796:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001798:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <MX_TIM12_Init+0xbc>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <MX_TIM12_Init+0xbc>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80017a4:	481b      	ldr	r0, [pc, #108]	@ (8001814 <MX_TIM12_Init+0xbc>)
 80017a6:	f002 ff63 	bl	8004670 <HAL_TIM_Base_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80017b0:	f000 f932 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	4619      	mov	r1, r3
 80017c0:	4814      	ldr	r0, [pc, #80]	@ (8001814 <MX_TIM12_Init+0xbc>)
 80017c2:	f003 f987 	bl	8004ad4 <HAL_TIM_ConfigClockSource>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80017cc:	f000 f924 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80017d0:	4810      	ldr	r0, [pc, #64]	@ (8001814 <MX_TIM12_Init+0xbc>)
 80017d2:	f002 ff9c 	bl	800470e <HAL_TIM_PWM_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80017dc:	f000 f91c 	bl	8001a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e0:	2360      	movs	r3, #96	@ 0x60
 80017e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4807      	ldr	r0, [pc, #28]	@ (8001814 <MX_TIM12_Init+0xbc>)
 80017f8:	f003 f8aa 	bl	8004950 <HAL_TIM_PWM_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001802:	f000 f909 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001806:	4803      	ldr	r0, [pc, #12]	@ (8001814 <MX_TIM12_Init+0xbc>)
 8001808:	f000 f9ca 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 800180c:	bf00      	nop
 800180e:	3730      	adds	r7, #48	@ 0x30
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200002d4 	.word	0x200002d4
 8001818:	40001800 	.word	0x40001800

0800181c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <MX_USART3_UART_Init+0x4c>)
 8001822:	4a12      	ldr	r2, [pc, #72]	@ (800186c <MX_USART3_UART_Init+0x50>)
 8001824:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <MX_USART3_UART_Init+0x4c>)
 8001828:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <MX_USART3_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <MX_USART3_UART_Init+0x4c>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <MX_USART3_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <MX_USART3_UART_Init+0x4c>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <MX_USART3_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <MX_USART3_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	@ (8001868 <MX_USART3_UART_Init+0x4c>)
 8001854:	f003 fd9e 	bl	8005394 <HAL_UART_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800185e:	f000 f8db 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000031c 	.word	0x2000031c
 800186c:	40004800 	.word	0x40004800

08001870 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001876:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800187a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800187c:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800187e:	2206      	movs	r2, #6
 8001880:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001884:	2202      	movs	r2, #2
 8001886:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001888:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800188a:	2200      	movs	r2, #0
 800188c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800188e:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001890:	2202      	movs	r2, #2
 8001892:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001894:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001896:	2201      	movs	r2, #1
 8001898:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800189c:	2200      	movs	r2, #0
 800189e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018ac:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	@ (80018cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018ba:	f001 ff2d 	bl	8003718 <HAL_PCD_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80018c4:	f000 f8a8 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000364 	.word	0x20000364

080018d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	@ 0x30
 80018d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	4b48      	ldr	r3, [pc, #288]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a47      	ldr	r2, [pc, #284]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b45      	ldr	r3, [pc, #276]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	4b41      	ldr	r3, [pc, #260]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a40      	ldr	r2, [pc, #256]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 800190c:	f043 0320 	orr.w	r3, r3, #32
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b3e      	ldr	r3, [pc, #248]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0320 	and.w	r3, r3, #32
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a39      	ldr	r2, [pc, #228]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b37      	ldr	r3, [pc, #220]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b33      	ldr	r3, [pc, #204]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a32      	ldr	r2, [pc, #200]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b30      	ldr	r3, [pc, #192]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a2b      	ldr	r2, [pc, #172]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a24      	ldr	r2, [pc, #144]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 800197c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a1d      	ldr	r2, [pc, #116]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <MX_GPIO_Init+0x13c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2140      	movs	r1, #64	@ 0x40
 80019ae:	4818      	ldr	r0, [pc, #96]	@ (8001a10 <MX_GPIO_Init+0x140>)
 80019b0:	f000 fe74 	bl	800269c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80019b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4812      	ldr	r0, [pc, #72]	@ (8001a14 <MX_GPIO_Init+0x144>)
 80019cc:	f000 fcd2 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80019d0:	2340      	movs	r3, #64	@ 0x40
 80019d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	480a      	ldr	r0, [pc, #40]	@ (8001a10 <MX_GPIO_Init+0x140>)
 80019e8:	f000 fcc4 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <MX_GPIO_Init+0x140>)
 8001a00:	f000 fcb8 	bl	8002374 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a04:	bf00      	nop
 8001a06:	3730      	adds	r7, #48	@ 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40021800 	.word	0x40021800
 8001a14:	40020800 	.word	0x40020800

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <Error_Handler+0x8>

08001a24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <HAL_MspInit+0x4c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	4a0f      	ldr	r2, [pc, #60]	@ (8001a70 <HAL_MspInit+0x4c>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a70 <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_MspInit+0x4c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	4a08      	ldr	r2, [pc, #32]	@ (8001a70 <HAL_MspInit+0x4c>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a19      	ldr	r2, [pc, #100]	@ (8001af8 <HAL_I2C_MspInit+0x84>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d12b      	bne.n	8001aee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <HAL_I2C_MspInit+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <HAL_I2C_MspInit+0x88>)
 8001aa0:	f043 0320 	orr.w	r3, r3, #32
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <HAL_I2C_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0320 	and.w	r3, r3, #32
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab6:	2312      	movs	r3, #18
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	480c      	ldr	r0, [pc, #48]	@ (8001b00 <HAL_I2C_MspInit+0x8c>)
 8001ace:	f000 fc51 	bl	8002374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_I2C_MspInit+0x88>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	4a08      	ldr	r2, [pc, #32]	@ (8001afc <HAL_I2C_MspInit+0x88>)
 8001adc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_I2C_MspInit+0x88>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	@ 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40005800 	.word	0x40005800
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40021400 	.word	0x40021400

08001b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1f      	ldr	r2, [pc, #124]	@ (8001b90 <HAL_TIM_Base_MspInit+0x8c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10e      	bne.n	8001b34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <HAL_TIM_Base_MspInit+0x90>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8001b94 <HAL_TIM_Base_MspInit+0x90>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b26:	4b1b      	ldr	r3, [pc, #108]	@ (8001b94 <HAL_TIM_Base_MspInit+0x90>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001b32:	e026      	b.n	8001b82 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a17      	ldr	r2, [pc, #92]	@ (8001b98 <HAL_TIM_Base_MspInit+0x94>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d10e      	bne.n	8001b5c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <HAL_TIM_Base_MspInit+0x90>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	4a13      	ldr	r2, [pc, #76]	@ (8001b94 <HAL_TIM_Base_MspInit+0x90>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4e:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_TIM_Base_MspInit+0x90>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
}
 8001b5a:	e012      	b.n	8001b82 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM12)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0e      	ldr	r2, [pc, #56]	@ (8001b9c <HAL_TIM_Base_MspInit+0x98>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d10d      	bne.n	8001b82 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <HAL_TIM_Base_MspInit+0x90>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <HAL_TIM_Base_MspInit+0x90>)
 8001b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <HAL_TIM_Base_MspInit+0x90>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
}
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40000400 	.word	0x40000400
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40000800 	.word	0x40000800
 8001b9c:	40001800 	.word	0x40001800

08001ba0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	@ 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a36      	ldr	r2, [pc, #216]	@ (8001c98 <HAL_TIM_MspPostInit+0xf8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d11e      	bne.n	8001c00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	4b35      	ldr	r3, [pc, #212]	@ (8001c9c <HAL_TIM_MspPostInit+0xfc>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	4a34      	ldr	r2, [pc, #208]	@ (8001c9c <HAL_TIM_MspPostInit+0xfc>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd2:	4b32      	ldr	r3, [pc, #200]	@ (8001c9c <HAL_TIM_MspPostInit+0xfc>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bde:	2301      	movs	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4829      	ldr	r0, [pc, #164]	@ (8001ca0 <HAL_TIM_MspPostInit+0x100>)
 8001bfa:	f000 fbbb 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001bfe:	e047      	b.n	8001c90 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a27      	ldr	r2, [pc, #156]	@ (8001ca4 <HAL_TIM_MspPostInit+0x104>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d11e      	bne.n	8001c48 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <HAL_TIM_MspPostInit+0xfc>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a22      	ldr	r2, [pc, #136]	@ (8001c9c <HAL_TIM_MspPostInit+0xfc>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <HAL_TIM_MspPostInit+0xfc>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c26:	2380      	movs	r3, #128	@ 0x80
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c36:	2302      	movs	r3, #2
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4817      	ldr	r0, [pc, #92]	@ (8001ca0 <HAL_TIM_MspPostInit+0x100>)
 8001c42:	f000 fb97 	bl	8002374 <HAL_GPIO_Init>
}
 8001c46:	e023      	b.n	8001c90 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM12)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a16      	ldr	r2, [pc, #88]	@ (8001ca8 <HAL_TIM_MspPostInit+0x108>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d11e      	bne.n	8001c90 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <HAL_TIM_MspPostInit+0xfc>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a10      	ldr	r2, [pc, #64]	@ (8001c9c <HAL_TIM_MspPostInit+0xfc>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <HAL_TIM_MspPostInit+0xfc>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001c80:	2309      	movs	r3, #9
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <HAL_TIM_MspPostInit+0x100>)
 8001c8c:	f000 fb72 	bl	8002374 <HAL_GPIO_Init>
}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	@ 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40000800 	.word	0x40000800
 8001ca8:	40001800 	.word	0x40001800

08001cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	@ 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a19      	ldr	r2, [pc, #100]	@ (8001d30 <HAL_UART_MspInit+0x84>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12c      	bne.n	8001d28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_UART_MspInit+0x88>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	4a17      	ldr	r2, [pc, #92]	@ (8001d34 <HAL_UART_MspInit+0x88>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_UART_MspInit+0x88>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_UART_MspInit+0x88>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a10      	ldr	r2, [pc, #64]	@ (8001d34 <HAL_UART_MspInit+0x88>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_UART_MspInit+0x88>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <HAL_UART_MspInit+0x8c>)
 8001d24:	f000 fb26 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	@ 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40004800 	.word	0x40004800
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020c00 	.word	0x40020c00

08001d3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b098      	sub	sp, #96	@ 0x60
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	223c      	movs	r2, #60	@ 0x3c
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f004 ffae 	bl	8006cbe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d6a:	d14d      	bne.n	8001e08 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001d70:	2300      	movs	r3, #0
 8001d72:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 f827 	bl	8003dcc <HAL_RCCEx_PeriphCLKConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8001d84:	f7ff fe48 	bl	8001a18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <HAL_PCD_MspInit+0xd4>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	4a1f      	ldr	r2, [pc, #124]	@ (8001e10 <HAL_PCD_MspInit+0xd4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d98:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <HAL_PCD_MspInit+0xd4>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001da4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001db6:	230a      	movs	r3, #10
 8001db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4814      	ldr	r0, [pc, #80]	@ (8001e14 <HAL_PCD_MspInit+0xd8>)
 8001dc2:	f000 fad7 	bl	8002374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001dc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480e      	ldr	r0, [pc, #56]	@ (8001e14 <HAL_PCD_MspInit+0xd8>)
 8001ddc:	f000 faca 	bl	8002374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <HAL_PCD_MspInit+0xd4>)
 8001de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <HAL_PCD_MspInit+0xd4>)
 8001de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dea:	6353      	str	r3, [r2, #52]	@ 0x34
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	4b07      	ldr	r3, [pc, #28]	@ (8001e10 <HAL_PCD_MspInit+0xd4>)
 8001df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df4:	4a06      	ldr	r2, [pc, #24]	@ (8001e10 <HAL_PCD_MspInit+0xd4>)
 8001df6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dfa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <HAL_PCD_MspInit+0xd4>)
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e08:	bf00      	nop
 8001e0a:	3760      	adds	r7, #96	@ 0x60
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000

08001e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <NMI_Handler+0x4>

08001e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <HardFault_Handler+0x4>

08001e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <MemManage_Handler+0x4>

08001e30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6e:	f000 f957 	bl	8002120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  return 1;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_kill>:

int _kill(int pid, int sig)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e90:	f004 ff68 	bl	8006d64 <__errno>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2216      	movs	r2, #22
 8001e98:	601a      	str	r2, [r3, #0]
  return -1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_exit>:

void _exit (int status)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eae:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffe7 	bl	8001e86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <_exit+0x12>

08001ebc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e00a      	b.n	8001ee4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ece:	f3af 8000 	nop.w
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	60ba      	str	r2, [r7, #8]
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbf0      	blt.n	8001ece <_read+0x12>
  }

  return len;
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	e009      	b.n	8001f1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	60ba      	str	r2, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf1      	blt.n	8001f08 <_write+0x12>
  }
  return len;
 8001f24:	687b      	ldr	r3, [r7, #4]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_close>:

int _close(int file)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f56:	605a      	str	r2, [r3, #4]
  return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_isatty>:

int _isatty(int file)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	@ (8001ff4 <_sbrk+0x5c>)
 8001fa2:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <_sbrk+0x60>)
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc8:	f004 fecc 	bl	8006d64 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20040000 	.word	0x20040000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	20000848 	.word	0x20000848
 8002000:	200009a0 	.word	0x200009a0

08002004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <SystemInit+0x20>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200e:	4a05      	ldr	r2, [pc, #20]	@ (8002024 <SystemInit+0x20>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002028:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002060 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800202c:	f7ff ffea 	bl	8002004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002030:	480c      	ldr	r0, [pc, #48]	@ (8002064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002032:	490d      	ldr	r1, [pc, #52]	@ (8002068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002034:	4a0d      	ldr	r2, [pc, #52]	@ (800206c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002038:	e002      	b.n	8002040 <LoopCopyDataInit>

0800203a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800203c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203e:	3304      	adds	r3, #4

08002040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002044:	d3f9      	bcc.n	800203a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002048:	4c0a      	ldr	r4, [pc, #40]	@ (8002074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800204c:	e001      	b.n	8002052 <LoopFillZerobss>

0800204e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002050:	3204      	adds	r2, #4

08002052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002054:	d3fb      	bcc.n	800204e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002056:	f004 fe8b 	bl	8006d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205a:	f7ff f95d 	bl	8001318 <main>
  bx  lr    
 800205e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002060:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800206c:	08009248 	.word	0x08009248
  ldr r2, =_sbss
 8002070:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002074:	2000099c 	.word	0x2000099c

08002078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC_IRQHandler>
	...

0800207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002080:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0d      	ldr	r2, [pc, #52]	@ (80020bc <HAL_Init+0x40>)
 8002086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800208a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <HAL_Init+0x40>)
 8002092:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002098:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a07      	ldr	r2, [pc, #28]	@ (80020bc <HAL_Init+0x40>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a4:	2003      	movs	r0, #3
 80020a6:	f000 f931 	bl	800230c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f000 f808 	bl	80020c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b0:	f7ff fcb8 	bl	8001a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023c00 	.word	0x40023c00

080020c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c8:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <HAL_InitTick+0x54>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_InitTick+0x58>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f93b 	bl	800235a <HAL_SYSTICK_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00e      	b.n	800210c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0f      	cmp	r3, #15
 80020f2:	d80a      	bhi.n	800210a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f4:	2200      	movs	r2, #0
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f000 f911 	bl	8002322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002100:	4a06      	ldr	r2, [pc, #24]	@ (800211c <HAL_InitTick+0x5c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000000 	.word	0x20000000
 8002118:	20000008 	.word	0x20000008
 800211c:	20000004 	.word	0x20000004

08002120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_IncTick+0x20>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_IncTick+0x24>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <HAL_IncTick+0x24>)
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000008 	.word	0x20000008
 8002144:	2000084c 	.word	0x2000084c

08002148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b03      	ldr	r3, [pc, #12]	@ (800215c <HAL_GetTick+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	2000084c 	.word	0x2000084c

08002160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002168:	f7ff ffee 	bl	8002148 <HAL_GetTick>
 800216c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d005      	beq.n	8002186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <HAL_Delay+0x44>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002186:	bf00      	nop
 8002188:	f7ff ffde 	bl	8002148 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	429a      	cmp	r2, r3
 8002196:	d8f7      	bhi.n	8002188 <HAL_Delay+0x28>
  {
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000008 	.word	0x20000008

080021a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b8:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	@ (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f4:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <__NVIC_GetPriorityGrouping+0x18>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 0307 	and.w	r3, r3, #7
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	@ (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	@ (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	@ 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	@ 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022d8:	d301      	bcc.n	80022de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022da:	2301      	movs	r3, #1
 80022dc:	e00f      	b.n	80022fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022de:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <SysTick_Config+0x40>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e6:	210f      	movs	r1, #15
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f7ff ff8e 	bl	800220c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f0:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <SysTick_Config+0x40>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f6:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <SysTick_Config+0x40>)
 80022f8:	2207      	movs	r2, #7
 80022fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	e000e010 	.word	0xe000e010

0800230c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff47 	bl	80021a8 <__NVIC_SetPriorityGrouping>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002334:	f7ff ff5c 	bl	80021f0 <__NVIC_GetPriorityGrouping>
 8002338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	6978      	ldr	r0, [r7, #20]
 8002340:	f7ff ff8e 	bl	8002260 <NVIC_EncodePriority>
 8002344:	4602      	mov	r2, r0
 8002346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff5d 	bl	800220c <__NVIC_SetPriority>
}
 8002352:	bf00      	nop
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffb0 	bl	80022c8 <SysTick_Config>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	@ 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	e165      	b.n	800265c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002390:	2201      	movs	r2, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	f040 8154 	bne.w	8002656 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d005      	beq.n	80023c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d130      	bne.n	8002428 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023fc:	2201      	movs	r2, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 0201 	and.w	r2, r3, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b03      	cmp	r3, #3
 8002432:	d017      	beq.n	8002464 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d123      	bne.n	80024b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	08da      	lsrs	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3208      	adds	r2, #8
 8002478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	08da      	lsrs	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3208      	adds	r2, #8
 80024b2:	69b9      	ldr	r1, [r7, #24]
 80024b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0203 	and.w	r2, r3, #3
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80ae 	beq.w	8002656 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002674 <HAL_GPIO_Init+0x300>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	4a5c      	ldr	r2, [pc, #368]	@ (8002674 <HAL_GPIO_Init+0x300>)
 8002504:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002508:	6453      	str	r3, [r2, #68]	@ 0x44
 800250a:	4b5a      	ldr	r3, [pc, #360]	@ (8002674 <HAL_GPIO_Init+0x300>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002516:	4a58      	ldr	r2, [pc, #352]	@ (8002678 <HAL_GPIO_Init+0x304>)
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	220f      	movs	r2, #15
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4f      	ldr	r2, [pc, #316]	@ (800267c <HAL_GPIO_Init+0x308>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d025      	beq.n	800258e <HAL_GPIO_Init+0x21a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4e      	ldr	r2, [pc, #312]	@ (8002680 <HAL_GPIO_Init+0x30c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01f      	beq.n	800258a <HAL_GPIO_Init+0x216>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4d      	ldr	r2, [pc, #308]	@ (8002684 <HAL_GPIO_Init+0x310>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d019      	beq.n	8002586 <HAL_GPIO_Init+0x212>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4c      	ldr	r2, [pc, #304]	@ (8002688 <HAL_GPIO_Init+0x314>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0x20e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4b      	ldr	r2, [pc, #300]	@ (800268c <HAL_GPIO_Init+0x318>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00d      	beq.n	800257e <HAL_GPIO_Init+0x20a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4a      	ldr	r2, [pc, #296]	@ (8002690 <HAL_GPIO_Init+0x31c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_Init+0x206>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a49      	ldr	r2, [pc, #292]	@ (8002694 <HAL_GPIO_Init+0x320>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_GPIO_Init+0x202>
 8002572:	2306      	movs	r3, #6
 8002574:	e00c      	b.n	8002590 <HAL_GPIO_Init+0x21c>
 8002576:	2307      	movs	r3, #7
 8002578:	e00a      	b.n	8002590 <HAL_GPIO_Init+0x21c>
 800257a:	2305      	movs	r3, #5
 800257c:	e008      	b.n	8002590 <HAL_GPIO_Init+0x21c>
 800257e:	2304      	movs	r3, #4
 8002580:	e006      	b.n	8002590 <HAL_GPIO_Init+0x21c>
 8002582:	2303      	movs	r3, #3
 8002584:	e004      	b.n	8002590 <HAL_GPIO_Init+0x21c>
 8002586:	2302      	movs	r3, #2
 8002588:	e002      	b.n	8002590 <HAL_GPIO_Init+0x21c>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_GPIO_Init+0x21c>
 800258e:	2300      	movs	r3, #0
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	f002 0203 	and.w	r2, r2, #3
 8002596:	0092      	lsls	r2, r2, #2
 8002598:	4093      	lsls	r3, r2
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025a0:	4935      	ldr	r1, [pc, #212]	@ (8002678 <HAL_GPIO_Init+0x304>)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	3302      	adds	r3, #2
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002698 <HAL_GPIO_Init+0x324>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d2:	4a31      	ldr	r2, [pc, #196]	@ (8002698 <HAL_GPIO_Init+0x324>)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002698 <HAL_GPIO_Init+0x324>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025fc:	4a26      	ldr	r2, [pc, #152]	@ (8002698 <HAL_GPIO_Init+0x324>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002602:	4b25      	ldr	r3, [pc, #148]	@ (8002698 <HAL_GPIO_Init+0x324>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002626:	4a1c      	ldr	r2, [pc, #112]	@ (8002698 <HAL_GPIO_Init+0x324>)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800262c:	4b1a      	ldr	r3, [pc, #104]	@ (8002698 <HAL_GPIO_Init+0x324>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002650:	4a11      	ldr	r2, [pc, #68]	@ (8002698 <HAL_GPIO_Init+0x324>)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3301      	adds	r3, #1
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b0f      	cmp	r3, #15
 8002660:	f67f ae96 	bls.w	8002390 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3724      	adds	r7, #36	@ 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	40013800 	.word	0x40013800
 800267c:	40020000 	.word	0x40020000
 8002680:	40020400 	.word	0x40020400
 8002684:	40020800 	.word	0x40020800
 8002688:	40020c00 	.word	0x40020c00
 800268c:	40021000 	.word	0x40021000
 8002690:	40021400 	.word	0x40021400
 8002694:	40021800 	.word	0x40021800
 8002698:	40013c00 	.word	0x40013c00

0800269c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
 80026a8:	4613      	mov	r3, r2
 80026aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026ac:	787b      	ldrb	r3, [r7, #1]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026b8:	e003      	b.n	80026c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	041a      	lsls	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	619a      	str	r2, [r3, #24]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e12b      	b.n	800293a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff f9bc 	bl	8001a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2224      	movs	r2, #36	@ 0x24
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002722:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002732:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002734:	f001 fb22 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8002738:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4a81      	ldr	r2, [pc, #516]	@ (8002944 <HAL_I2C_Init+0x274>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d807      	bhi.n	8002754 <HAL_I2C_Init+0x84>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a80      	ldr	r2, [pc, #512]	@ (8002948 <HAL_I2C_Init+0x278>)
 8002748:	4293      	cmp	r3, r2
 800274a:	bf94      	ite	ls
 800274c:	2301      	movls	r3, #1
 800274e:	2300      	movhi	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e006      	b.n	8002762 <HAL_I2C_Init+0x92>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4a7d      	ldr	r2, [pc, #500]	@ (800294c <HAL_I2C_Init+0x27c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	bf94      	ite	ls
 800275c:	2301      	movls	r3, #1
 800275e:	2300      	movhi	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e0e7      	b.n	800293a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4a78      	ldr	r2, [pc, #480]	@ (8002950 <HAL_I2C_Init+0x280>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	0c9b      	lsrs	r3, r3, #18
 8002774:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a6a      	ldr	r2, [pc, #424]	@ (8002944 <HAL_I2C_Init+0x274>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d802      	bhi.n	80027a4 <HAL_I2C_Init+0xd4>
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3301      	adds	r3, #1
 80027a2:	e009      	b.n	80027b8 <HAL_I2C_Init+0xe8>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	4a69      	ldr	r2, [pc, #420]	@ (8002954 <HAL_I2C_Init+0x284>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	3301      	adds	r3, #1
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	430b      	orrs	r3, r1
 80027be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	495c      	ldr	r1, [pc, #368]	@ (8002944 <HAL_I2C_Init+0x274>)
 80027d4:	428b      	cmp	r3, r1
 80027d6:	d819      	bhi.n	800280c <HAL_I2C_Init+0x13c>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1e59      	subs	r1, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e6:	1c59      	adds	r1, r3, #1
 80027e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027ec:	400b      	ands	r3, r1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_I2C_Init+0x138>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1e59      	subs	r1, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002800:	3301      	adds	r3, #1
 8002802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002806:	e051      	b.n	80028ac <HAL_I2C_Init+0x1dc>
 8002808:	2304      	movs	r3, #4
 800280a:	e04f      	b.n	80028ac <HAL_I2C_Init+0x1dc>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d111      	bne.n	8002838 <HAL_I2C_Init+0x168>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1e58      	subs	r0, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	440b      	add	r3, r1
 8002822:	fbb0 f3f3 	udiv	r3, r0, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e012      	b.n	800285e <HAL_I2C_Init+0x18e>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1e58      	subs	r0, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	0099      	lsls	r1, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	fbb0 f3f3 	udiv	r3, r0, r3
 800284e:	3301      	adds	r3, #1
 8002850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Init+0x196>
 8002862:	2301      	movs	r3, #1
 8002864:	e022      	b.n	80028ac <HAL_I2C_Init+0x1dc>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10e      	bne.n	800288c <HAL_I2C_Init+0x1bc>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1e58      	subs	r0, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	440b      	add	r3, r1
 800287c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002880:	3301      	adds	r3, #1
 8002882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800288a:	e00f      	b.n	80028ac <HAL_I2C_Init+0x1dc>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e58      	subs	r0, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	0099      	lsls	r1, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	6809      	ldr	r1, [r1, #0]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6911      	ldr	r1, [r2, #16]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68d2      	ldr	r2, [r2, #12]
 80028e6:	4311      	orrs	r1, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	430b      	orrs	r3, r1
 80028ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	000186a0 	.word	0x000186a0
 8002948:	001e847f 	.word	0x001e847f
 800294c:	003d08ff 	.word	0x003d08ff
 8002950:	431bde83 	.word	0x431bde83
 8002954:	10624dd3 	.word	0x10624dd3

08002958 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	4608      	mov	r0, r1
 8002962:	4611      	mov	r1, r2
 8002964:	461a      	mov	r2, r3
 8002966:	4603      	mov	r3, r0
 8002968:	817b      	strh	r3, [r7, #10]
 800296a:	460b      	mov	r3, r1
 800296c:	813b      	strh	r3, [r7, #8]
 800296e:	4613      	mov	r3, r2
 8002970:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002972:	f7ff fbe9 	bl	8002148 <HAL_GetTick>
 8002976:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b20      	cmp	r3, #32
 8002982:	f040 80d9 	bne.w	8002b38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2319      	movs	r3, #25
 800298c:	2201      	movs	r2, #1
 800298e:	496d      	ldr	r1, [pc, #436]	@ (8002b44 <HAL_I2C_Mem_Write+0x1ec>)
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fc8b 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800299c:	2302      	movs	r3, #2
 800299e:	e0cc      	b.n	8002b3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_I2C_Mem_Write+0x56>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e0c5      	b.n	8002b3a <HAL_I2C_Mem_Write+0x1e2>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d007      	beq.n	80029d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2221      	movs	r2, #33	@ 0x21
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2240      	movs	r2, #64	@ 0x40
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a3a      	ldr	r2, [r7, #32]
 80029fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a4d      	ldr	r2, [pc, #308]	@ (8002b48 <HAL_I2C_Mem_Write+0x1f0>)
 8002a14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a16:	88f8      	ldrh	r0, [r7, #6]
 8002a18:	893a      	ldrh	r2, [r7, #8]
 8002a1a:	8979      	ldrh	r1, [r7, #10]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	4603      	mov	r3, r0
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fac2 	bl	8002fb0 <I2C_RequestMemoryWrite>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d052      	beq.n	8002ad8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e081      	b.n	8002b3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 fd50 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00d      	beq.n	8002a62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d107      	bne.n	8002a5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06b      	b.n	8002b3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d11b      	bne.n	8002ad8 <HAL_I2C_Mem_Write+0x180>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d017      	beq.n	8002ad8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	781a      	ldrb	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1aa      	bne.n	8002a36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fd43 	bl	8003570 <I2C_WaitOnBTFFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00d      	beq.n	8002b0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d107      	bne.n	8002b08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e016      	b.n	8002b3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e000      	b.n	8002b3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b38:	2302      	movs	r3, #2
  }
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	00100002 	.word	0x00100002
 8002b48:	ffff0000 	.word	0xffff0000

08002b4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08c      	sub	sp, #48	@ 0x30
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	4608      	mov	r0, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	817b      	strh	r3, [r7, #10]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	813b      	strh	r3, [r7, #8]
 8002b62:	4613      	mov	r3, r2
 8002b64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b66:	f7ff faef 	bl	8002148 <HAL_GetTick>
 8002b6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	f040 8214 	bne.w	8002fa2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	2319      	movs	r3, #25
 8002b80:	2201      	movs	r2, #1
 8002b82:	497b      	ldr	r1, [pc, #492]	@ (8002d70 <HAL_I2C_Mem_Read+0x224>)
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fb91 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
 8002b92:	e207      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2C_Mem_Read+0x56>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e200      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x458>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d007      	beq.n	8002bc8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2222      	movs	r2, #34	@ 0x22
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2240      	movs	r2, #64	@ 0x40
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4a5b      	ldr	r2, [pc, #364]	@ (8002d74 <HAL_I2C_Mem_Read+0x228>)
 8002c08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c0a:	88f8      	ldrh	r0, [r7, #6]
 8002c0c:	893a      	ldrh	r2, [r7, #8]
 8002c0e:	8979      	ldrh	r1, [r7, #10]
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	4603      	mov	r3, r0
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fa5e 	bl	80030dc <I2C_RequestMemoryRead>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1bc      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d113      	bne.n	8002c5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	623b      	str	r3, [r7, #32]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	623b      	str	r3, [r7, #32]
 8002c46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e190      	b.n	8002f7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d11b      	bne.n	8002c9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e170      	b.n	8002f7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d11b      	bne.n	8002cda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	e150      	b.n	8002f7c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002cf0:	e144      	b.n	8002f7c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	f200 80f1 	bhi.w	8002ede <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d123      	bne.n	8002d4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fc79 	bl	8003600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e145      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d4a:	e117      	b.n	8002f7c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d14e      	bne.n	8002df2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	4906      	ldr	r1, [pc, #24]	@ (8002d78 <HAL_I2C_Mem_Read+0x22c>)
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 faa4 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e11a      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x458>
 8002d6e:	bf00      	nop
 8002d70:	00100002 	.word	0x00100002
 8002d74:	ffff0000 	.word	0xffff0000
 8002d78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002df0:	e0c4      	b.n	8002f7c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df8:	2200      	movs	r2, #0
 8002dfa:	496c      	ldr	r1, [pc, #432]	@ (8002fac <HAL_I2C_Mem_Read+0x460>)
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fa55 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0cb      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e54:	2200      	movs	r2, #0
 8002e56:	4955      	ldr	r1, [pc, #340]	@ (8002fac <HAL_I2C_Mem_Read+0x460>)
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fa27 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e09d      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002edc:	e04e      	b.n	8002f7c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fb8c 	bl	8003600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e058      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d124      	bne.n	8002f7c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d107      	bne.n	8002f4a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f47f aeb6 	bne.w	8002cf2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e000      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
  }
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3728      	adds	r7, #40	@ 0x28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	00010004 	.word	0x00010004

08002fb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	817b      	strh	r3, [r7, #10]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	813b      	strh	r3, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f960 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003000:	d103      	bne.n	800300a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003008:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e05f      	b.n	80030ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800300e:	897b      	ldrh	r3, [r7, #10]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800301c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	492d      	ldr	r1, [pc, #180]	@ (80030d8 <I2C_RequestMemoryWrite+0x128>)
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f9bb 	bl	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e04c      	b.n	80030ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304c:	6a39      	ldr	r1, [r7, #32]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fa46 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	2b04      	cmp	r3, #4
 8003060:	d107      	bne.n	8003072 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003070:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e02b      	b.n	80030ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800307c:	893b      	ldrh	r3, [r7, #8]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	611a      	str	r2, [r3, #16]
 8003086:	e021      	b.n	80030cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003088:	893b      	ldrh	r3, [r7, #8]
 800308a:	0a1b      	lsrs	r3, r3, #8
 800308c:	b29b      	uxth	r3, r3
 800308e:	b2da      	uxtb	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003098:	6a39      	ldr	r1, [r7, #32]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fa20 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d107      	bne.n	80030be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e005      	b.n	80030ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030c2:	893b      	ldrh	r3, [r7, #8]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	00010002 	.word	0x00010002

080030dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	4608      	mov	r0, r1
 80030e6:	4611      	mov	r1, r2
 80030e8:	461a      	mov	r2, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	817b      	strh	r3, [r7, #10]
 80030ee:	460b      	mov	r3, r1
 80030f0:	813b      	strh	r3, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003104:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003114:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	2200      	movs	r2, #0
 800311e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f8c2 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800313c:	d103      	bne.n	8003146 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003144:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e0aa      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800314a:	897b      	ldrh	r3, [r7, #10]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003158:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	4952      	ldr	r1, [pc, #328]	@ (80032a8 <I2C_RequestMemoryRead+0x1cc>)
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f91d 	bl	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e097      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003188:	6a39      	ldr	r1, [r7, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f9a8 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	2b04      	cmp	r3, #4
 800319c:	d107      	bne.n	80031ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e076      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d105      	bne.n	80031c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031b8:	893b      	ldrh	r3, [r7, #8]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	611a      	str	r2, [r3, #16]
 80031c2:	e021      	b.n	8003208 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031c4:	893b      	ldrh	r3, [r7, #8]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d4:	6a39      	ldr	r1, [r7, #32]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f982 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d107      	bne.n	80031fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e050      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031fe:	893b      	ldrh	r3, [r7, #8]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320a:	6a39      	ldr	r1, [r7, #32]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f967 	bl	80034e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00d      	beq.n	8003234 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	2b04      	cmp	r3, #4
 800321e:	d107      	bne.n	8003230 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800322e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e035      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003242:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	2200      	movs	r2, #0
 800324c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f82b 	bl	80032ac <I2C_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800326a:	d103      	bne.n	8003274 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003272:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e013      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003278:	897b      	ldrh	r3, [r7, #10]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	4906      	ldr	r1, [pc, #24]	@ (80032a8 <I2C_RequestMemoryRead+0x1cc>)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f886 	bl	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	00010002 	.word	0x00010002

080032ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032bc:	e048      	b.n	8003350 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d044      	beq.n	8003350 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c6:	f7fe ff3f 	bl	8002148 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d302      	bcc.n	80032dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d139      	bne.n	8003350 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	0c1b      	lsrs	r3, r3, #16
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d10d      	bne.n	8003302 <I2C_WaitOnFlagUntilTimeout+0x56>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	43da      	mvns	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	e00c      	b.n	800331c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	43da      	mvns	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4013      	ands	r3, r2
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	429a      	cmp	r2, r3
 8003320:	d116      	bne.n	8003350 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e023      	b.n	8003398 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	0c1b      	lsrs	r3, r3, #16
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d10d      	bne.n	8003376 <I2C_WaitOnFlagUntilTimeout+0xca>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	43da      	mvns	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4013      	ands	r3, r2
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	e00c      	b.n	8003390 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	43da      	mvns	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4013      	ands	r3, r2
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	429a      	cmp	r2, r3
 8003394:	d093      	beq.n	80032be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033ae:	e071      	b.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033be:	d123      	bne.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f043 0204 	orr.w	r2, r3, #4
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e067      	b.n	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340e:	d041      	beq.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003410:	f7fe fe9a 	bl	8002148 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	d302      	bcc.n	8003426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d136      	bne.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d10c      	bne.n	800344a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	43da      	mvns	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4013      	ands	r3, r2
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	bf14      	ite	ne
 8003442:	2301      	movne	r3, #1
 8003444:	2300      	moveq	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e00b      	b.n	8003462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	43da      	mvns	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4013      	ands	r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d016      	beq.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	f043 0220 	orr.w	r2, r3, #32
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e021      	b.n	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	0c1b      	lsrs	r3, r3, #16
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d10c      	bne.n	80034b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	43da      	mvns	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e00b      	b.n	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4013      	ands	r3, r2
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f47f af6d 	bne.w	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ec:	e034      	b.n	8003558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f8e3 	bl	80036ba <I2C_IsAcknowledgeFailed>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e034      	b.n	8003568 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d028      	beq.n	8003558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7fe fe1f 	bl	8002148 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d11d      	bne.n	8003558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003526:	2b80      	cmp	r3, #128	@ 0x80
 8003528:	d016      	beq.n	8003558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e007      	b.n	8003568 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	2b80      	cmp	r3, #128	@ 0x80
 8003564:	d1c3      	bne.n	80034ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800357c:	e034      	b.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f89b 	bl	80036ba <I2C_IsAcknowledgeFailed>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e034      	b.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d028      	beq.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7fe fdd7 	bl	8002148 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d11d      	bne.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d016      	beq.n	80035e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e007      	b.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d1c3      	bne.n	800357e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800360c:	e049      	b.n	80036a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b10      	cmp	r3, #16
 800361a:	d119      	bne.n	8003650 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0210 	mvn.w	r2, #16
 8003624:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e030      	b.n	80036b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003650:	f7fe fd7a 	bl	8002148 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	429a      	cmp	r2, r3
 800365e:	d302      	bcc.n	8003666 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d11d      	bne.n	80036a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003670:	2b40      	cmp	r3, #64	@ 0x40
 8003672:	d016      	beq.n	80036a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e007      	b.n	80036b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b40      	cmp	r3, #64	@ 0x40
 80036ae:	d1ae      	bne.n	800360e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d0:	d11b      	bne.n	800370a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	f043 0204 	orr.w	r2, r3, #4
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af02      	add	r7, sp, #8
 800371e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e108      	b.n	800393c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fe faf9 	bl	8001d3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2203      	movs	r2, #3
 800374e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003758:	d102      	bne.n	8003760 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f002 fa85 	bl	8005c74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7c1a      	ldrb	r2, [r3, #16]
 8003772:	f88d 2000 	strb.w	r2, [sp]
 8003776:	3304      	adds	r3, #4
 8003778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800377a:	f002 fa17 	bl	8005bac <USB_CoreInit>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0d5      	b.n	800393c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f002 fa7d 	bl	8005c96 <USB_SetCurrentMode>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e0c6      	b.n	800393c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
 80037b2:	e04a      	b.n	800384a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	3315      	adds	r3, #21
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3314      	adds	r3, #20
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	b298      	uxth	r0, r3
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	332e      	adds	r3, #46	@ 0x2e
 80037f0:	4602      	mov	r2, r0
 80037f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	3318      	adds	r3, #24
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003808:	7bfa      	ldrb	r2, [r7, #15]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	331c      	adds	r3, #28
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3320      	adds	r3, #32
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	3324      	adds	r3, #36	@ 0x24
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	3301      	adds	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	791b      	ldrb	r3, [r3, #4]
 800384e:	7bfa      	ldrb	r2, [r7, #15]
 8003850:	429a      	cmp	r2, r3
 8003852:	d3af      	bcc.n	80037b4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003854:	2300      	movs	r3, #0
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e044      	b.n	80038e4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003886:	7bfa      	ldrb	r2, [r7, #15]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038b2:	7bfa      	ldrb	r2, [r7, #15]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	3301      	adds	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	791b      	ldrb	r3, [r3, #4]
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d3b5      	bcc.n	800385a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	7c1a      	ldrb	r2, [r3, #16]
 80038f6:	f88d 2000 	strb.w	r2, [sp]
 80038fa:	3304      	adds	r3, #4
 80038fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038fe:	f002 fa17 	bl	8005d30 <USB_DevInit>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e013      	b.n	800393c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	7b1b      	ldrb	r3, [r3, #12]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d102      	bne.n	8003930 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f80a 	bl	8003944 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f002 fbd2 	bl	80060de <USB_DevDisconnect>

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003976:	f043 0303 	orr.w	r3, r3, #3
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0cc      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a0:	4b68      	ldr	r3, [pc, #416]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d90c      	bls.n	80039c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b65      	ldr	r3, [pc, #404]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b63      	ldr	r3, [pc, #396]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0b8      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e0:	4b59      	ldr	r3, [pc, #356]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a58      	ldr	r2, [pc, #352]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f8:	4b53      	ldr	r3, [pc, #332]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a52      	ldr	r2, [pc, #328]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a04:	4b50      	ldr	r3, [pc, #320]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	494d      	ldr	r1, [pc, #308]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d044      	beq.n	8003aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	4b47      	ldr	r3, [pc, #284]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d119      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e06f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e067      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b37      	ldr	r3, [pc, #220]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4934      	ldr	r1, [pc, #208]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a7c:	f7fe fb64 	bl	8002148 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fe fb60 	bl	8002148 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e04f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aac:	4b25      	ldr	r3, [pc, #148]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d20c      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b22      	ldr	r3, [pc, #136]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b20      	ldr	r3, [pc, #128]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e032      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae0:	4b19      	ldr	r3, [pc, #100]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4916      	ldr	r1, [pc, #88]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afe:	4b12      	ldr	r3, [pc, #72]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	490e      	ldr	r1, [pc, #56]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b12:	f000 f821 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	490a      	ldr	r1, [pc, #40]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 8003b24:	5ccb      	ldrb	r3, [r1, r3]
 8003b26:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2a:	4a09      	ldr	r2, [pc, #36]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b2e:	4b09      	ldr	r3, [pc, #36]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe fac4 	bl	80020c0 <HAL_InitTick>

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023c00 	.word	0x40023c00
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	08008eb0 	.word	0x08008eb0
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004

08003b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b5c:	b094      	sub	sp, #80	@ 0x50
 8003b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b64:	2300      	movs	r3, #0
 8003b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b68:	2300      	movs	r3, #0
 8003b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b70:	4b79      	ldr	r3, [pc, #484]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 030c 	and.w	r3, r3, #12
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d00d      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x40>
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	f200 80e1 	bhi.w	8003d44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x34>
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b8a:	e0db      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b73      	ldr	r3, [pc, #460]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003b90:	e0db      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b92:	4b73      	ldr	r3, [pc, #460]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b96:	e0d8      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b98:	4b6f      	ldr	r3, [pc, #444]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ba0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d063      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bae:	4b6a      	ldr	r3, [pc, #424]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bca:	4622      	mov	r2, r4
 8003bcc:	462b      	mov	r3, r5
 8003bce:	f04f 0000 	mov.w	r0, #0
 8003bd2:	f04f 0100 	mov.w	r1, #0
 8003bd6:	0159      	lsls	r1, r3, #5
 8003bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bdc:	0150      	lsls	r0, r2, #5
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4621      	mov	r1, r4
 8003be4:	1a51      	subs	r1, r2, r1
 8003be6:	6139      	str	r1, [r7, #16]
 8003be8:	4629      	mov	r1, r5
 8003bea:	eb63 0301 	sbc.w	r3, r3, r1
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	018b      	lsls	r3, r1, #6
 8003c00:	4651      	mov	r1, sl
 8003c02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c06:	4651      	mov	r1, sl
 8003c08:	018a      	lsls	r2, r1, #6
 8003c0a:	4651      	mov	r1, sl
 8003c0c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c10:	4659      	mov	r1, fp
 8003c12:	eb63 0901 	sbc.w	r9, r3, r1
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c2a:	4690      	mov	r8, r2
 8003c2c:	4699      	mov	r9, r3
 8003c2e:	4623      	mov	r3, r4
 8003c30:	eb18 0303 	adds.w	r3, r8, r3
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	462b      	mov	r3, r5
 8003c38:	eb49 0303 	adc.w	r3, r9, r3
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	024b      	lsls	r3, r1, #9
 8003c4e:	4621      	mov	r1, r4
 8003c50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c54:	4621      	mov	r1, r4
 8003c56:	024a      	lsls	r2, r1, #9
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c5e:	2200      	movs	r2, #0
 8003c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c68:	f7fd f80e 	bl	8000c88 <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4613      	mov	r3, r2
 8003c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c74:	e058      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c76:	4b38      	ldr	r3, [pc, #224]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	4611      	mov	r1, r2
 8003c82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c90:	4642      	mov	r2, r8
 8003c92:	464b      	mov	r3, r9
 8003c94:	f04f 0000 	mov.w	r0, #0
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	0159      	lsls	r1, r3, #5
 8003c9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca2:	0150      	lsls	r0, r2, #5
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4641      	mov	r1, r8
 8003caa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cae:	4649      	mov	r1, r9
 8003cb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cc8:	ebb2 040a 	subs.w	r4, r2, sl
 8003ccc:	eb63 050b 	sbc.w	r5, r3, fp
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	00eb      	lsls	r3, r5, #3
 8003cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cde:	00e2      	lsls	r2, r4, #3
 8003ce0:	4614      	mov	r4, r2
 8003ce2:	461d      	mov	r5, r3
 8003ce4:	4643      	mov	r3, r8
 8003ce6:	18e3      	adds	r3, r4, r3
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	464b      	mov	r3, r9
 8003cec:	eb45 0303 	adc.w	r3, r5, r3
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cfe:	4629      	mov	r1, r5
 8003d00:	028b      	lsls	r3, r1, #10
 8003d02:	4621      	mov	r1, r4
 8003d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d08:	4621      	mov	r1, r4
 8003d0a:	028a      	lsls	r2, r1, #10
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d12:	2200      	movs	r2, #0
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	61fa      	str	r2, [r7, #28]
 8003d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d1c:	f7fc ffb4 	bl	8000c88 <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4613      	mov	r3, r2
 8003d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	3301      	adds	r3, #1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003d38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d42:	e002      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b05      	ldr	r3, [pc, #20]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3750      	adds	r7, #80	@ 0x50
 8003d50:	46bd      	mov	sp, r7
 8003d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d56:	bf00      	nop
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	00f42400 	.word	0x00f42400
 8003d60:	007a1200 	.word	0x007a1200

08003d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d68:	4b03      	ldr	r3, [pc, #12]	@ (8003d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000000 	.word	0x20000000

08003d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d80:	f7ff fff0 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0a9b      	lsrs	r3, r3, #10
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	@ (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	08008ec0 	.word	0x08008ec0

08003da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da8:	f7ff ffdc 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0b5b      	lsrs	r3, r3, #13
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	@ (8003dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08008ec0 	.word	0x08008ec0

08003dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d010      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003dec:	4b87      	ldr	r3, [pc, #540]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003df2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	4984      	ldr	r1, [pc, #528]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d010      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003e1a:	4b7c      	ldr	r3, [pc, #496]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e20:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	4978      	ldr	r1, [pc, #480]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8083 	beq.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	4a6e      	ldr	r2, [pc, #440]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e5a:	4b6c      	ldr	r3, [pc, #432]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e66:	4b6a      	ldr	r3, [pc, #424]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a69      	ldr	r2, [pc, #420]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e72:	f7fe f969 	bl	8002148 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e7a:	f7fe f965 	bl	8002148 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e162      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e8c:	4b60      	ldr	r3, [pc, #384]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e98:	4b5c      	ldr	r3, [pc, #368]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea0:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d02f      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d028      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb6:	4b55      	ldr	r3, [pc, #340]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ebe:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ec0:	4b54      	ldr	r3, [pc, #336]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec6:	4b53      	ldr	r3, [pc, #332]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ecc:	4a4f      	ldr	r2, [pc, #316]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ed2:	4b4e      	ldr	r3, [pc, #312]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d114      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fe f933 	bl	8002148 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	e00a      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fe f92f 	bl	8002148 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e12a      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	4b43      	ldr	r3, [pc, #268]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ee      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f14:	d10d      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003f16:	4b3d      	ldr	r3, [pc, #244]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f2a:	4938      	ldr	r1, [pc, #224]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	608b      	str	r3, [r1, #8]
 8003f30:	e005      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003f32:	4b36      	ldr	r3, [pc, #216]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	4a35      	ldr	r2, [pc, #212]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f38:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f3c:	6093      	str	r3, [r2, #8]
 8003f3e:	4b33      	ldr	r3, [pc, #204]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4a:	4930      	ldr	r1, [pc, #192]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8003f62:	4b2d      	ldr	r3, [pc, #180]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f64:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003f72:	4b26      	ldr	r3, [pc, #152]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	4922      	ldr	r1, [pc, #136]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d011      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f94:	4b1d      	ldr	r3, [pc, #116]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f9a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa2:	491a      	ldr	r1, [pc, #104]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003fc4:	4b11      	ldr	r3, [pc, #68]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	490e      	ldr	r1, [pc, #56]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d004      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b80      	cmp	r3, #128	@ 0x80
 8003fe6:	f040 8091 	bne.w	800410c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fea:	4b0c      	ldr	r3, [pc, #48]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ff0:	f7fe f8aa 	bl	8002148 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff6:	e013      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ff8:	f7fe f8a6 	bl	8002148 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d90c      	bls.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0a3      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	40007000 	.word	0x40007000
 8004014:	42470e40 	.word	0x42470e40
 8004018:	424711e0 	.word	0x424711e0
 800401c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004020:	4b4e      	ldr	r3, [pc, #312]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800402c:	4a4c      	ldr	r2, [pc, #304]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004032:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d023      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d019      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004064:	2b00      	cmp	r3, #0
 8004066:	d004      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004070:	d00e      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800407a:	2b00      	cmp	r3, #0
 800407c:	d019      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d115      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800408e:	d110      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	019b      	lsls	r3, r3, #6
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	061b      	lsls	r3, r3, #24
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	071b      	lsls	r3, r3, #28
 80040aa:	492c      	ldr	r1, [pc, #176]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	019b      	lsls	r3, r3, #6
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	061b      	lsls	r3, r3, #24
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	071b      	lsls	r3, r3, #28
 80040d8:	4920      	ldr	r1, [pc, #128]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040e0:	4b20      	ldr	r3, [pc, #128]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040e6:	f7fe f82f 	bl	8002148 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040ee:	f7fe f82b 	bl	8002148 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e028      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004100:	4b16      	ldr	r3, [pc, #88]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004118:	4b10      	ldr	r3, [pc, #64]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800411a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800411e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004126:	490d      	ldr	r1, [pc, #52]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800413a:	4b08      	ldr	r3, [pc, #32]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800413c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004140:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004148:	4904      	ldr	r1, [pc, #16]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800
 8004160:	424710d8 	.word	0x424710d8
 8004164:	42470068 	.word	0x42470068

08004168 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e273      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d075      	beq.n	8004272 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004186:	4b88      	ldr	r3, [pc, #544]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b04      	cmp	r3, #4
 8004190:	d00c      	beq.n	80041ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004192:	4b85      	ldr	r3, [pc, #532]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800419a:	2b08      	cmp	r3, #8
 800419c:	d112      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	4b82      	ldr	r3, [pc, #520]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041aa:	d10b      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	4b7e      	ldr	r3, [pc, #504]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d05b      	beq.n	8004270 <HAL_RCC_OscConfig+0x108>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d157      	bne.n	8004270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e24e      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041cc:	d106      	bne.n	80041dc <HAL_RCC_OscConfig+0x74>
 80041ce:	4b76      	ldr	r3, [pc, #472]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a75      	ldr	r2, [pc, #468]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e01d      	b.n	8004218 <HAL_RCC_OscConfig+0xb0>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x98>
 80041e6:	4b70      	ldr	r3, [pc, #448]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a6f      	ldr	r2, [pc, #444]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b6d      	ldr	r3, [pc, #436]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6c      	ldr	r2, [pc, #432]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e00b      	b.n	8004218 <HAL_RCC_OscConfig+0xb0>
 8004200:	4b69      	ldr	r3, [pc, #420]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a68      	ldr	r2, [pc, #416]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b66      	ldr	r3, [pc, #408]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a65      	ldr	r2, [pc, #404]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d013      	beq.n	8004248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd ff92 	bl	8002148 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004228:	f7fd ff8e 	bl	8002148 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	@ 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e213      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423a:	4b5b      	ldr	r3, [pc, #364]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0xc0>
 8004246:	e014      	b.n	8004272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fd ff7e 	bl	8002148 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004250:	f7fd ff7a 	bl	8002148 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	@ 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1ff      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004262:	4b51      	ldr	r3, [pc, #324]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0xe8>
 800426e:	e000      	b.n	8004272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d063      	beq.n	8004346 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800427e:	4b4a      	ldr	r3, [pc, #296]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428a:	4b47      	ldr	r3, [pc, #284]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004292:	2b08      	cmp	r3, #8
 8004294:	d11c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004296:	4b44      	ldr	r3, [pc, #272]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d116      	bne.n	80042d0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	4b41      	ldr	r3, [pc, #260]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_RCC_OscConfig+0x152>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e1d3      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ba:	4b3b      	ldr	r3, [pc, #236]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4937      	ldr	r1, [pc, #220]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ce:	e03a      	b.n	8004346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d8:	4b34      	ldr	r3, [pc, #208]	@ (80043ac <HAL_RCC_OscConfig+0x244>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fd ff33 	bl	8002148 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e6:	f7fd ff2f 	bl	8002148 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e1b4      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f8:	4b2b      	ldr	r3, [pc, #172]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004304:	4b28      	ldr	r3, [pc, #160]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4925      	ldr	r1, [pc, #148]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]
 8004318:	e015      	b.n	8004346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431a:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <HAL_RCC_OscConfig+0x244>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fd ff12 	bl	8002148 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004328:	f7fd ff0e 	bl	8002148 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e193      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433a:	4b1b      	ldr	r3, [pc, #108]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d036      	beq.n	80043c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435a:	4b15      	ldr	r3, [pc, #84]	@ (80043b0 <HAL_RCC_OscConfig+0x248>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fd fef2 	bl	8002148 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004368:	f7fd feee 	bl	8002148 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e173      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437a:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 800437c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x200>
 8004386:	e01b      	b.n	80043c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004388:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <HAL_RCC_OscConfig+0x248>)
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438e:	f7fd fedb 	bl	8002148 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004394:	e00e      	b.n	80043b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004396:	f7fd fed7 	bl	8002148 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d907      	bls.n	80043b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e15c      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
 80043a8:	40023800 	.word	0x40023800
 80043ac:	42470000 	.word	0x42470000
 80043b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b4:	4b8a      	ldr	r3, [pc, #552]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 80043b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1ea      	bne.n	8004396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8097 	beq.w	80044fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ce:	2300      	movs	r3, #0
 80043d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d2:	4b83      	ldr	r3, [pc, #524]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10f      	bne.n	80043fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	4b7f      	ldr	r3, [pc, #508]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	4a7e      	ldr	r2, [pc, #504]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ee:	4b7c      	ldr	r3, [pc, #496]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fe:	4b79      	ldr	r3, [pc, #484]	@ (80045e4 <HAL_RCC_OscConfig+0x47c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d118      	bne.n	800443c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440a:	4b76      	ldr	r3, [pc, #472]	@ (80045e4 <HAL_RCC_OscConfig+0x47c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a75      	ldr	r2, [pc, #468]	@ (80045e4 <HAL_RCC_OscConfig+0x47c>)
 8004410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004416:	f7fd fe97 	bl	8002148 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441e:	f7fd fe93 	bl	8002148 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e118      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004430:	4b6c      	ldr	r3, [pc, #432]	@ (80045e4 <HAL_RCC_OscConfig+0x47c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x2ea>
 8004444:	4b66      	ldr	r3, [pc, #408]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004448:	4a65      	ldr	r2, [pc, #404]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004450:	e01c      	b.n	800448c <HAL_RCC_OscConfig+0x324>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b05      	cmp	r3, #5
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x30c>
 800445a:	4b61      	ldr	r3, [pc, #388]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445e:	4a60      	ldr	r2, [pc, #384]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 8004460:	f043 0304 	orr.w	r3, r3, #4
 8004464:	6713      	str	r3, [r2, #112]	@ 0x70
 8004466:	4b5e      	ldr	r3, [pc, #376]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446a:	4a5d      	ldr	r2, [pc, #372]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6713      	str	r3, [r2, #112]	@ 0x70
 8004472:	e00b      	b.n	800448c <HAL_RCC_OscConfig+0x324>
 8004474:	4b5a      	ldr	r3, [pc, #360]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004478:	4a59      	ldr	r2, [pc, #356]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004480:	4b57      	ldr	r3, [pc, #348]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004484:	4a56      	ldr	r2, [pc, #344]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 8004486:	f023 0304 	bic.w	r3, r3, #4
 800448a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d015      	beq.n	80044c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fd fe58 	bl	8002148 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fd fe54 	bl	8002148 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e0d7      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b2:	4b4b      	ldr	r3, [pc, #300]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0ee      	beq.n	800449c <HAL_RCC_OscConfig+0x334>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c0:	f7fd fe42 	bl	8002148 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c6:	e00a      	b.n	80044de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c8:	f7fd fe3e 	bl	8002148 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e0c1      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044de:	4b40      	ldr	r3, [pc, #256]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1ee      	bne.n	80044c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d105      	bne.n	80044fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f0:	4b3b      	ldr	r3, [pc, #236]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	4a3a      	ldr	r2, [pc, #232]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 80044f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80ad 	beq.w	8004660 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004506:	4b36      	ldr	r3, [pc, #216]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b08      	cmp	r3, #8
 8004510:	d060      	beq.n	80045d4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d145      	bne.n	80045a6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451a:	4b33      	ldr	r3, [pc, #204]	@ (80045e8 <HAL_RCC_OscConfig+0x480>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fe12 	bl	8002148 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004528:	f7fd fe0e 	bl	8002148 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e093      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453a:	4b29      	ldr	r3, [pc, #164]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	019b      	lsls	r3, r3, #6
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	3b01      	subs	r3, #1
 8004560:	041b      	lsls	r3, r3, #16
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004568:	061b      	lsls	r3, r3, #24
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004570:	071b      	lsls	r3, r3, #28
 8004572:	491b      	ldr	r1, [pc, #108]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 8004574:	4313      	orrs	r3, r2
 8004576:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004578:	4b1b      	ldr	r3, [pc, #108]	@ (80045e8 <HAL_RCC_OscConfig+0x480>)
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457e:	f7fd fde3 	bl	8002148 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004586:	f7fd fddf 	bl	8002148 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e064      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004598:	4b11      	ldr	r3, [pc, #68]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x41e>
 80045a4:	e05c      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a6:	4b10      	ldr	r3, [pc, #64]	@ (80045e8 <HAL_RCC_OscConfig+0x480>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd fdcc 	bl	8002148 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fd fdc8 	bl	8002148 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e04d      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x44c>
 80045d2:	e045      	b.n	8004660 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d107      	bne.n	80045ec <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e040      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40007000 	.word	0x40007000
 80045e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045ec:	4b1f      	ldr	r3, [pc, #124]	@ (800466c <HAL_RCC_OscConfig+0x504>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d030      	beq.n	800465c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d129      	bne.n	800465c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d122      	bne.n	800465c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004622:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004624:	4293      	cmp	r3, r2
 8004626:	d119      	bne.n	800465c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	3b01      	subs	r3, #1
 8004636:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004638:	429a      	cmp	r2, r3
 800463a:	d10f      	bne.n	800465c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004646:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d107      	bne.n	800465c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004658:	429a      	cmp	r2, r3
 800465a:	d001      	beq.n	8004660 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800

08004670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e041      	b.n	8004706 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fd fa34 	bl	8001b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f000 fad8 	bl	8004c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e041      	b.n	80047a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d106      	bne.n	800473a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f839 	bl	80047ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f000 fa89 	bl	8004c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d109      	bne.n	80047e4 <HAL_TIM_PWM_Start+0x24>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e022      	b.n	800482a <HAL_TIM_PWM_Start+0x6a>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d109      	bne.n	80047fe <HAL_TIM_PWM_Start+0x3e>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	bf14      	ite	ne
 80047f6:	2301      	movne	r3, #1
 80047f8:	2300      	moveq	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	e015      	b.n	800482a <HAL_TIM_PWM_Start+0x6a>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d109      	bne.n	8004818 <HAL_TIM_PWM_Start+0x58>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	bf14      	ite	ne
 8004810:	2301      	movne	r3, #1
 8004812:	2300      	moveq	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e008      	b.n	800482a <HAL_TIM_PWM_Start+0x6a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e07c      	b.n	800492c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d104      	bne.n	8004842 <HAL_TIM_PWM_Start+0x82>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004840:	e013      	b.n	800486a <HAL_TIM_PWM_Start+0xaa>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b04      	cmp	r3, #4
 8004846:	d104      	bne.n	8004852 <HAL_TIM_PWM_Start+0x92>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004850:	e00b      	b.n	800486a <HAL_TIM_PWM_Start+0xaa>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d104      	bne.n	8004862 <HAL_TIM_PWM_Start+0xa2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004860:	e003      	b.n	800486a <HAL_TIM_PWM_Start+0xaa>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2201      	movs	r2, #1
 8004870:	6839      	ldr	r1, [r7, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fcec 	bl	8005250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2d      	ldr	r2, [pc, #180]	@ (8004934 <HAL_TIM_PWM_Start+0x174>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_TIM_PWM_Start+0xcc>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a2c      	ldr	r2, [pc, #176]	@ (8004938 <HAL_TIM_PWM_Start+0x178>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d101      	bne.n	8004890 <HAL_TIM_PWM_Start+0xd0>
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <HAL_TIM_PWM_Start+0xd2>
 8004890:	2300      	movs	r3, #0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a22      	ldr	r2, [pc, #136]	@ (8004934 <HAL_TIM_PWM_Start+0x174>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d022      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x136>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b8:	d01d      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x136>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1f      	ldr	r2, [pc, #124]	@ (800493c <HAL_TIM_PWM_Start+0x17c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d018      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x136>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004940 <HAL_TIM_PWM_Start+0x180>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x136>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004944 <HAL_TIM_PWM_Start+0x184>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00e      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x136>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a16      	ldr	r2, [pc, #88]	@ (8004938 <HAL_TIM_PWM_Start+0x178>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x136>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a18      	ldr	r2, [pc, #96]	@ (8004948 <HAL_TIM_PWM_Start+0x188>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x136>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a16      	ldr	r2, [pc, #88]	@ (800494c <HAL_TIM_PWM_Start+0x18c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d111      	bne.n	800491a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b06      	cmp	r3, #6
 8004906:	d010      	beq.n	800492a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004918:	e007      	b.n	800492a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40010000 	.word	0x40010000
 8004938:	40010400 	.word	0x40010400
 800493c:	40000400 	.word	0x40000400
 8004940:	40000800 	.word	0x40000800
 8004944:	40000c00 	.word	0x40000c00
 8004948:	40014000 	.word	0x40014000
 800494c:	40001800 	.word	0x40001800

08004950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800496a:	2302      	movs	r3, #2
 800496c:	e0ae      	b.n	8004acc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b0c      	cmp	r3, #12
 800497a:	f200 809f 	bhi.w	8004abc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800497e:	a201      	add	r2, pc, #4	@ (adr r2, 8004984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049b9 	.word	0x080049b9
 8004988:	08004abd 	.word	0x08004abd
 800498c:	08004abd 	.word	0x08004abd
 8004990:	08004abd 	.word	0x08004abd
 8004994:	080049f9 	.word	0x080049f9
 8004998:	08004abd 	.word	0x08004abd
 800499c:	08004abd 	.word	0x08004abd
 80049a0:	08004abd 	.word	0x08004abd
 80049a4:	08004a3b 	.word	0x08004a3b
 80049a8:	08004abd 	.word	0x08004abd
 80049ac:	08004abd 	.word	0x08004abd
 80049b0:	08004abd 	.word	0x08004abd
 80049b4:	08004a7b 	.word	0x08004a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 f9fc 	bl	8004dbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0208 	orr.w	r2, r2, #8
 80049d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0204 	bic.w	r2, r2, #4
 80049e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6999      	ldr	r1, [r3, #24]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	619a      	str	r2, [r3, #24]
      break;
 80049f6:	e064      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fa4c 	bl	8004e9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6999      	ldr	r1, [r3, #24]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	021a      	lsls	r2, r3, #8
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	619a      	str	r2, [r3, #24]
      break;
 8004a38:	e043      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 faa1 	bl	8004f88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0208 	orr.w	r2, r2, #8
 8004a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0204 	bic.w	r2, r2, #4
 8004a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69d9      	ldr	r1, [r3, #28]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	61da      	str	r2, [r3, #28]
      break;
 8004a78:	e023      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 faf5 	bl	8005070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69d9      	ldr	r1, [r3, #28]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	021a      	lsls	r2, r3, #8
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	61da      	str	r2, [r3, #28]
      break;
 8004aba:	e002      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_TIM_ConfigClockSource+0x1c>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e0b4      	b.n	8004c5a <HAL_TIM_ConfigClockSource+0x186>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b28:	d03e      	beq.n	8004ba8 <HAL_TIM_ConfigClockSource+0xd4>
 8004b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b2e:	f200 8087 	bhi.w	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b36:	f000 8086 	beq.w	8004c46 <HAL_TIM_ConfigClockSource+0x172>
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b3e:	d87f      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b70      	cmp	r3, #112	@ 0x70
 8004b42:	d01a      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0xa6>
 8004b44:	2b70      	cmp	r3, #112	@ 0x70
 8004b46:	d87b      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b48:	2b60      	cmp	r3, #96	@ 0x60
 8004b4a:	d050      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x11a>
 8004b4c:	2b60      	cmp	r3, #96	@ 0x60
 8004b4e:	d877      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b50      	cmp	r3, #80	@ 0x50
 8004b52:	d03c      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0xfa>
 8004b54:	2b50      	cmp	r3, #80	@ 0x50
 8004b56:	d873      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b40      	cmp	r3, #64	@ 0x40
 8004b5a:	d058      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0x13a>
 8004b5c:	2b40      	cmp	r3, #64	@ 0x40
 8004b5e:	d86f      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b30      	cmp	r3, #48	@ 0x30
 8004b62:	d064      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x15a>
 8004b64:	2b30      	cmp	r3, #48	@ 0x30
 8004b66:	d86b      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d060      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x15a>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d867      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d05c      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x15a>
 8004b74:	2b10      	cmp	r3, #16
 8004b76:	d05a      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x15a>
 8004b78:	e062      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b8a:	f000 fb41 	bl	8005210 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	609a      	str	r2, [r3, #8]
      break;
 8004ba6:	e04f      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bb8:	f000 fb2a 	bl	8005210 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bca:	609a      	str	r2, [r3, #8]
      break;
 8004bcc:	e03c      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f000 fa9e 	bl	800511c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2150      	movs	r1, #80	@ 0x50
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 faf7 	bl	80051da <TIM_ITRx_SetConfig>
      break;
 8004bec:	e02c      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f000 fabd 	bl	800517a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2160      	movs	r1, #96	@ 0x60
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fae7 	bl	80051da <TIM_ITRx_SetConfig>
      break;
 8004c0c:	e01c      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f000 fa7e 	bl	800511c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2140      	movs	r1, #64	@ 0x40
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fad7 	bl	80051da <TIM_ITRx_SetConfig>
      break;
 8004c2c:	e00c      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f000 face 	bl	80051da <TIM_ITRx_SetConfig>
      break;
 8004c3e:	e003      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
      break;
 8004c44:	e000      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a46      	ldr	r2, [pc, #280]	@ (8004d90 <TIM_Base_SetConfig+0x12c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d013      	beq.n	8004ca4 <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c82:	d00f      	beq.n	8004ca4 <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a43      	ldr	r2, [pc, #268]	@ (8004d94 <TIM_Base_SetConfig+0x130>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00b      	beq.n	8004ca4 <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a42      	ldr	r2, [pc, #264]	@ (8004d98 <TIM_Base_SetConfig+0x134>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d007      	beq.n	8004ca4 <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a41      	ldr	r2, [pc, #260]	@ (8004d9c <TIM_Base_SetConfig+0x138>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d003      	beq.n	8004ca4 <TIM_Base_SetConfig+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a40      	ldr	r2, [pc, #256]	@ (8004da0 <TIM_Base_SetConfig+0x13c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d108      	bne.n	8004cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a35      	ldr	r2, [pc, #212]	@ (8004d90 <TIM_Base_SetConfig+0x12c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d02b      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc4:	d027      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a32      	ldr	r2, [pc, #200]	@ (8004d94 <TIM_Base_SetConfig+0x130>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d023      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a31      	ldr	r2, [pc, #196]	@ (8004d98 <TIM_Base_SetConfig+0x134>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d01f      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a30      	ldr	r2, [pc, #192]	@ (8004d9c <TIM_Base_SetConfig+0x138>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01b      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8004da0 <TIM_Base_SetConfig+0x13c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d017      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8004da4 <TIM_Base_SetConfig+0x140>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8004da8 <TIM_Base_SetConfig+0x144>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00f      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8004dac <TIM_Base_SetConfig+0x148>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00b      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2b      	ldr	r2, [pc, #172]	@ (8004db0 <TIM_Base_SetConfig+0x14c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d007      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2a      	ldr	r2, [pc, #168]	@ (8004db4 <TIM_Base_SetConfig+0x150>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a29      	ldr	r2, [pc, #164]	@ (8004db8 <TIM_Base_SetConfig+0x154>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d108      	bne.n	8004d28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a10      	ldr	r2, [pc, #64]	@ (8004d90 <TIM_Base_SetConfig+0x12c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <TIM_Base_SetConfig+0xf8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a12      	ldr	r2, [pc, #72]	@ (8004da0 <TIM_Base_SetConfig+0x13c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d103      	bne.n	8004d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d105      	bne.n	8004d82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f023 0201 	bic.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	611a      	str	r2, [r3, #16]
  }
}
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	40000c00 	.word	0x40000c00
 8004da0:	40010400 	.word	0x40010400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40014400 	.word	0x40014400
 8004dac:	40014800 	.word	0x40014800
 8004db0:	40001800 	.word	0x40001800
 8004db4:	40001c00 	.word	0x40001c00
 8004db8:	40002000 	.word	0x40002000

08004dbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f023 0201 	bic.w	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0303 	bic.w	r3, r3, #3
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f023 0302 	bic.w	r3, r3, #2
 8004e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a20      	ldr	r2, [pc, #128]	@ (8004e94 <TIM_OC1_SetConfig+0xd8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_OC1_SetConfig+0x64>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8004e98 <TIM_OC1_SetConfig+0xdc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d10c      	bne.n	8004e3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f023 0308 	bic.w	r3, r3, #8
 8004e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 0304 	bic.w	r3, r3, #4
 8004e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a15      	ldr	r2, [pc, #84]	@ (8004e94 <TIM_OC1_SetConfig+0xd8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <TIM_OC1_SetConfig+0x8e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a14      	ldr	r2, [pc, #80]	@ (8004e98 <TIM_OC1_SetConfig+0xdc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d111      	bne.n	8004e6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40010000 	.word	0x40010000
 8004e98:	40010400 	.word	0x40010400

08004e9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f023 0210 	bic.w	r2, r3, #16
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	021b      	lsls	r3, r3, #8
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0320 	bic.w	r3, r3, #32
 8004ee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a22      	ldr	r2, [pc, #136]	@ (8004f80 <TIM_OC2_SetConfig+0xe4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_OC2_SetConfig+0x68>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a21      	ldr	r2, [pc, #132]	@ (8004f84 <TIM_OC2_SetConfig+0xe8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10d      	bne.n	8004f20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a17      	ldr	r2, [pc, #92]	@ (8004f80 <TIM_OC2_SetConfig+0xe4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_OC2_SetConfig+0x94>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a16      	ldr	r2, [pc, #88]	@ (8004f84 <TIM_OC2_SetConfig+0xe8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d113      	bne.n	8004f58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40010400 	.word	0x40010400

08004f88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a21      	ldr	r2, [pc, #132]	@ (8005068 <TIM_OC3_SetConfig+0xe0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <TIM_OC3_SetConfig+0x66>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a20      	ldr	r2, [pc, #128]	@ (800506c <TIM_OC3_SetConfig+0xe4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10d      	bne.n	800500a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a16      	ldr	r2, [pc, #88]	@ (8005068 <TIM_OC3_SetConfig+0xe0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_OC3_SetConfig+0x92>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a15      	ldr	r2, [pc, #84]	@ (800506c <TIM_OC3_SetConfig+0xe4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d113      	bne.n	8005042 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	621a      	str	r2, [r3, #32]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40010000 	.word	0x40010000
 800506c:	40010400 	.word	0x40010400

08005070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	031b      	lsls	r3, r3, #12
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a12      	ldr	r2, [pc, #72]	@ (8005114 <TIM_OC4_SetConfig+0xa4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_OC4_SetConfig+0x68>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a11      	ldr	r2, [pc, #68]	@ (8005118 <TIM_OC4_SetConfig+0xa8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d109      	bne.n	80050ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	019b      	lsls	r3, r3, #6
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40010000 	.word	0x40010000
 8005118:	40010400 	.word	0x40010400

0800511c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f023 0201 	bic.w	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f023 030a 	bic.w	r3, r3, #10
 8005158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	621a      	str	r2, [r3, #32]
}
 800516e:	bf00      	nop
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800517a:	b480      	push	{r7}
 800517c:	b087      	sub	sp, #28
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f023 0210 	bic.w	r2, r3, #16
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	031b      	lsls	r3, r3, #12
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051da:	b480      	push	{r7}
 80051dc:	b085      	sub	sp, #20
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f043 0307 	orr.w	r3, r3, #7
 80051fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800522a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	021a      	lsls	r2, r3, #8
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	431a      	orrs	r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4313      	orrs	r3, r2
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	609a      	str	r2, [r3, #8]
}
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f003 031f 	and.w	r3, r3, #31
 8005262:	2201      	movs	r2, #1
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	43db      	mvns	r3, r3
 8005272:	401a      	ands	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1a      	ldr	r2, [r3, #32]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	fa01 f303 	lsl.w	r3, r1, r3
 8005288:	431a      	orrs	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e05a      	b.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a21      	ldr	r2, [pc, #132]	@ (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d022      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005300:	d01d      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1d      	ldr	r2, [pc, #116]	@ (800537c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d018      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1b      	ldr	r2, [pc, #108]	@ (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1a      	ldr	r2, [pc, #104]	@ (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00e      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a18      	ldr	r2, [pc, #96]	@ (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d009      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a17      	ldr	r2, [pc, #92]	@ (800538c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d004      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a15      	ldr	r2, [pc, #84]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10c      	bne.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4313      	orrs	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	40000400 	.word	0x40000400
 8005380:	40000800 	.word	0x40000800
 8005384:	40000c00 	.word	0x40000c00
 8005388:	40010400 	.word	0x40010400
 800538c:	40014000 	.word	0x40014000
 8005390:	40001800 	.word	0x40001800

08005394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e042      	b.n	800542c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fc fc76 	bl	8001cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2224      	movs	r2, #36	@ 0x24
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f973 	bl	80056c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800540c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	@ 0x28
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	4613      	mov	r3, r2
 8005442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b20      	cmp	r3, #32
 8005452:	d175      	bne.n	8005540 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_UART_Transmit+0x2c>
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e06e      	b.n	8005542 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2221      	movs	r2, #33	@ 0x21
 800546e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005472:	f7fc fe69 	bl	8002148 <HAL_GetTick>
 8005476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	88fa      	ldrh	r2, [r7, #6]
 800547c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	88fa      	ldrh	r2, [r7, #6]
 8005482:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548c:	d108      	bne.n	80054a0 <HAL_UART_Transmit+0x6c>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e003      	b.n	80054a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054a8:	e02e      	b.n	8005508 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2200      	movs	r2, #0
 80054b2:	2180      	movs	r1, #128	@ 0x80
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f848 	bl	800554a <UART_WaitOnFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e03a      	b.n	8005542 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	3302      	adds	r3, #2
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	e007      	b.n	80054fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	3301      	adds	r3, #1
 80054f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1cb      	bne.n	80054aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2200      	movs	r2, #0
 800551a:	2140      	movs	r1, #64	@ 0x40
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f814 	bl	800554a <UART_WaitOnFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e006      	b.n	8005542 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	e000      	b.n	8005542 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005540:	2302      	movs	r3, #2
  }
}
 8005542:	4618      	mov	r0, r3
 8005544:	3720      	adds	r7, #32
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b086      	sub	sp, #24
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	603b      	str	r3, [r7, #0]
 8005556:	4613      	mov	r3, r2
 8005558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555a:	e03b      	b.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005562:	d037      	beq.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005564:	f7fc fdf0 	bl	8002148 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	6a3a      	ldr	r2, [r7, #32]
 8005570:	429a      	cmp	r2, r3
 8005572:	d302      	bcc.n	800557a <UART_WaitOnFlagUntilTimeout+0x30>
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e03a      	b.n	80055f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d023      	beq.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b80      	cmp	r3, #128	@ 0x80
 8005590:	d020      	beq.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b40      	cmp	r3, #64	@ 0x40
 8005596:	d01d      	beq.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d116      	bne.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f81d 	bl	80055fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2208      	movs	r2, #8
 80055c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e00f      	b.n	80055f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4013      	ands	r3, r2
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	bf0c      	ite	eq
 80055e4:	2301      	moveq	r3, #1
 80055e6:	2300      	movne	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d0b4      	beq.n	800555c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b095      	sub	sp, #84	@ 0x54
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	330c      	adds	r3, #12
 800560a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005616:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800561a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	330c      	adds	r3, #12
 8005622:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005624:	643a      	str	r2, [r7, #64]	@ 0x40
 8005626:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800562a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e5      	bne.n	8005604 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3314      	adds	r3, #20
 800563e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	61fb      	str	r3, [r7, #28]
   return(result);
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3314      	adds	r3, #20
 8005656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005658:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800565a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800565e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e5      	bne.n	8005638 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005670:	2b01      	cmp	r3, #1
 8005672:	d119      	bne.n	80056a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	60bb      	str	r3, [r7, #8]
   return(result);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f023 0310 	bic.w	r3, r3, #16
 800568a:	647b      	str	r3, [r7, #68]	@ 0x44
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	330c      	adds	r3, #12
 8005692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005694:	61ba      	str	r2, [r7, #24]
 8005696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	6979      	ldr	r1, [r7, #20]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	613b      	str	r3, [r7, #16]
   return(result);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e5      	bne.n	8005674 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056b6:	bf00      	nop
 80056b8:	3754      	adds	r7, #84	@ 0x54
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c8:	b0c0      	sub	sp, #256	@ 0x100
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e0:	68d9      	ldr	r1, [r3, #12]
 80056e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	ea40 0301 	orr.w	r3, r0, r1
 80056ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	431a      	orrs	r2, r3
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800571c:	f021 010c 	bic.w	r1, r1, #12
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800572a:	430b      	orrs	r3, r1
 800572c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573e:	6999      	ldr	r1, [r3, #24]
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	ea40 0301 	orr.w	r3, r0, r1
 800574a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b8f      	ldr	r3, [pc, #572]	@ (8005990 <UART_SetConfig+0x2cc>)
 8005754:	429a      	cmp	r2, r3
 8005756:	d005      	beq.n	8005764 <UART_SetConfig+0xa0>
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b8d      	ldr	r3, [pc, #564]	@ (8005994 <UART_SetConfig+0x2d0>)
 8005760:	429a      	cmp	r2, r3
 8005762:	d104      	bne.n	800576e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005764:	f7fe fb1e 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 8005768:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800576c:	e003      	b.n	8005776 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800576e:	f7fe fb05 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8005772:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005780:	f040 810c 	bne.w	800599c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005788:	2200      	movs	r2, #0
 800578a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800578e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005792:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005796:	4622      	mov	r2, r4
 8005798:	462b      	mov	r3, r5
 800579a:	1891      	adds	r1, r2, r2
 800579c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800579e:	415b      	adcs	r3, r3
 80057a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057a6:	4621      	mov	r1, r4
 80057a8:	eb12 0801 	adds.w	r8, r2, r1
 80057ac:	4629      	mov	r1, r5
 80057ae:	eb43 0901 	adc.w	r9, r3, r1
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057c6:	4690      	mov	r8, r2
 80057c8:	4699      	mov	r9, r3
 80057ca:	4623      	mov	r3, r4
 80057cc:	eb18 0303 	adds.w	r3, r8, r3
 80057d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057d4:	462b      	mov	r3, r5
 80057d6:	eb49 0303 	adc.w	r3, r9, r3
 80057da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057f2:	460b      	mov	r3, r1
 80057f4:	18db      	adds	r3, r3, r3
 80057f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80057f8:	4613      	mov	r3, r2
 80057fa:	eb42 0303 	adc.w	r3, r2, r3
 80057fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005800:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005804:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005808:	f7fb fa3e 	bl	8000c88 <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4b61      	ldr	r3, [pc, #388]	@ (8005998 <UART_SetConfig+0x2d4>)
 8005812:	fba3 2302 	umull	r2, r3, r3, r2
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	011c      	lsls	r4, r3, #4
 800581a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800581e:	2200      	movs	r2, #0
 8005820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005824:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005828:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800582c:	4642      	mov	r2, r8
 800582e:	464b      	mov	r3, r9
 8005830:	1891      	adds	r1, r2, r2
 8005832:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005834:	415b      	adcs	r3, r3
 8005836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005838:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800583c:	4641      	mov	r1, r8
 800583e:	eb12 0a01 	adds.w	sl, r2, r1
 8005842:	4649      	mov	r1, r9
 8005844:	eb43 0b01 	adc.w	fp, r3, r1
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005854:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800585c:	4692      	mov	sl, r2
 800585e:	469b      	mov	fp, r3
 8005860:	4643      	mov	r3, r8
 8005862:	eb1a 0303 	adds.w	r3, sl, r3
 8005866:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800586a:	464b      	mov	r3, r9
 800586c:	eb4b 0303 	adc.w	r3, fp, r3
 8005870:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005880:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005884:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005888:	460b      	mov	r3, r1
 800588a:	18db      	adds	r3, r3, r3
 800588c:	643b      	str	r3, [r7, #64]	@ 0x40
 800588e:	4613      	mov	r3, r2
 8005890:	eb42 0303 	adc.w	r3, r2, r3
 8005894:	647b      	str	r3, [r7, #68]	@ 0x44
 8005896:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800589a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800589e:	f7fb f9f3 	bl	8000c88 <__aeabi_uldivmod>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4611      	mov	r1, r2
 80058a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005998 <UART_SetConfig+0x2d4>)
 80058aa:	fba3 2301 	umull	r2, r3, r3, r1
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	2264      	movs	r2, #100	@ 0x64
 80058b2:	fb02 f303 	mul.w	r3, r2, r3
 80058b6:	1acb      	subs	r3, r1, r3
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80058be:	4b36      	ldr	r3, [pc, #216]	@ (8005998 <UART_SetConfig+0x2d4>)
 80058c0:	fba3 2302 	umull	r2, r3, r3, r2
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058cc:	441c      	add	r4, r3
 80058ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058e0:	4642      	mov	r2, r8
 80058e2:	464b      	mov	r3, r9
 80058e4:	1891      	adds	r1, r2, r2
 80058e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058e8:	415b      	adcs	r3, r3
 80058ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058f0:	4641      	mov	r1, r8
 80058f2:	1851      	adds	r1, r2, r1
 80058f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80058f6:	4649      	mov	r1, r9
 80058f8:	414b      	adcs	r3, r1
 80058fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005908:	4659      	mov	r1, fp
 800590a:	00cb      	lsls	r3, r1, #3
 800590c:	4651      	mov	r1, sl
 800590e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005912:	4651      	mov	r1, sl
 8005914:	00ca      	lsls	r2, r1, #3
 8005916:	4610      	mov	r0, r2
 8005918:	4619      	mov	r1, r3
 800591a:	4603      	mov	r3, r0
 800591c:	4642      	mov	r2, r8
 800591e:	189b      	adds	r3, r3, r2
 8005920:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005924:	464b      	mov	r3, r9
 8005926:	460a      	mov	r2, r1
 8005928:	eb42 0303 	adc.w	r3, r2, r3
 800592c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800593c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005940:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005944:	460b      	mov	r3, r1
 8005946:	18db      	adds	r3, r3, r3
 8005948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800594a:	4613      	mov	r3, r2
 800594c:	eb42 0303 	adc.w	r3, r2, r3
 8005950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005952:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005956:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800595a:	f7fb f995 	bl	8000c88 <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4b0d      	ldr	r3, [pc, #52]	@ (8005998 <UART_SetConfig+0x2d4>)
 8005964:	fba3 1302 	umull	r1, r3, r3, r2
 8005968:	095b      	lsrs	r3, r3, #5
 800596a:	2164      	movs	r1, #100	@ 0x64
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	3332      	adds	r3, #50	@ 0x32
 8005976:	4a08      	ldr	r2, [pc, #32]	@ (8005998 <UART_SetConfig+0x2d4>)
 8005978:	fba2 2303 	umull	r2, r3, r2, r3
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	f003 0207 	and.w	r2, r3, #7
 8005982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4422      	add	r2, r4
 800598a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800598c:	e106      	b.n	8005b9c <UART_SetConfig+0x4d8>
 800598e:	bf00      	nop
 8005990:	40011000 	.word	0x40011000
 8005994:	40011400 	.word	0x40011400
 8005998:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800599c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059ae:	4642      	mov	r2, r8
 80059b0:	464b      	mov	r3, r9
 80059b2:	1891      	adds	r1, r2, r2
 80059b4:	6239      	str	r1, [r7, #32]
 80059b6:	415b      	adcs	r3, r3
 80059b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059be:	4641      	mov	r1, r8
 80059c0:	1854      	adds	r4, r2, r1
 80059c2:	4649      	mov	r1, r9
 80059c4:	eb43 0501 	adc.w	r5, r3, r1
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	00eb      	lsls	r3, r5, #3
 80059d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059d6:	00e2      	lsls	r2, r4, #3
 80059d8:	4614      	mov	r4, r2
 80059da:	461d      	mov	r5, r3
 80059dc:	4643      	mov	r3, r8
 80059de:	18e3      	adds	r3, r4, r3
 80059e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059e4:	464b      	mov	r3, r9
 80059e6:	eb45 0303 	adc.w	r3, r5, r3
 80059ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	008b      	lsls	r3, r1, #2
 8005a0e:	4621      	mov	r1, r4
 8005a10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a14:	4621      	mov	r1, r4
 8005a16:	008a      	lsls	r2, r1, #2
 8005a18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a1c:	f7fb f934 	bl	8000c88 <__aeabi_uldivmod>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4b60      	ldr	r3, [pc, #384]	@ (8005ba8 <UART_SetConfig+0x4e4>)
 8005a26:	fba3 2302 	umull	r2, r3, r3, r2
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	011c      	lsls	r4, r3, #4
 8005a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a40:	4642      	mov	r2, r8
 8005a42:	464b      	mov	r3, r9
 8005a44:	1891      	adds	r1, r2, r2
 8005a46:	61b9      	str	r1, [r7, #24]
 8005a48:	415b      	adcs	r3, r3
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a50:	4641      	mov	r1, r8
 8005a52:	1851      	adds	r1, r2, r1
 8005a54:	6139      	str	r1, [r7, #16]
 8005a56:	4649      	mov	r1, r9
 8005a58:	414b      	adcs	r3, r1
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a68:	4659      	mov	r1, fp
 8005a6a:	00cb      	lsls	r3, r1, #3
 8005a6c:	4651      	mov	r1, sl
 8005a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a72:	4651      	mov	r1, sl
 8005a74:	00ca      	lsls	r2, r1, #3
 8005a76:	4610      	mov	r0, r2
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	189b      	adds	r3, r3, r2
 8005a80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a84:	464b      	mov	r3, r9
 8005a86:	460a      	mov	r2, r1
 8005a88:	eb42 0303 	adc.w	r3, r2, r3
 8005a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	008b      	lsls	r3, r1, #2
 8005aac:	4641      	mov	r1, r8
 8005aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ab2:	4641      	mov	r1, r8
 8005ab4:	008a      	lsls	r2, r1, #2
 8005ab6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005aba:	f7fb f8e5 	bl	8000c88 <__aeabi_uldivmod>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4b38      	ldr	r3, [pc, #224]	@ (8005ba8 <UART_SetConfig+0x4e4>)
 8005ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	2264      	movs	r2, #100	@ 0x64
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	1acb      	subs	r3, r1, r3
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	3332      	adds	r3, #50	@ 0x32
 8005ad8:	4a33      	ldr	r2, [pc, #204]	@ (8005ba8 <UART_SetConfig+0x4e4>)
 8005ada:	fba2 2303 	umull	r2, r3, r2, r3
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ae4:	441c      	add	r4, r3
 8005ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aea:	2200      	movs	r2, #0
 8005aec:	673b      	str	r3, [r7, #112]	@ 0x70
 8005aee:	677a      	str	r2, [r7, #116]	@ 0x74
 8005af0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005af4:	4642      	mov	r2, r8
 8005af6:	464b      	mov	r3, r9
 8005af8:	1891      	adds	r1, r2, r2
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	415b      	adcs	r3, r3
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b04:	4641      	mov	r1, r8
 8005b06:	1851      	adds	r1, r2, r1
 8005b08:	6039      	str	r1, [r7, #0]
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	414b      	adcs	r3, r1
 8005b0e:	607b      	str	r3, [r7, #4]
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	00cb      	lsls	r3, r1, #3
 8005b20:	4651      	mov	r1, sl
 8005b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b26:	4651      	mov	r1, sl
 8005b28:	00ca      	lsls	r2, r1, #3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4603      	mov	r3, r0
 8005b30:	4642      	mov	r2, r8
 8005b32:	189b      	adds	r3, r3, r2
 8005b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b36:	464b      	mov	r3, r9
 8005b38:	460a      	mov	r2, r1
 8005b3a:	eb42 0303 	adc.w	r3, r2, r3
 8005b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b58:	4649      	mov	r1, r9
 8005b5a:	008b      	lsls	r3, r1, #2
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b62:	4641      	mov	r1, r8
 8005b64:	008a      	lsls	r2, r1, #2
 8005b66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b6a:	f7fb f88d 	bl	8000c88 <__aeabi_uldivmod>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba8 <UART_SetConfig+0x4e4>)
 8005b74:	fba3 1302 	umull	r1, r3, r3, r2
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	2164      	movs	r1, #100	@ 0x64
 8005b7c:	fb01 f303 	mul.w	r3, r1, r3
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	3332      	adds	r3, #50	@ 0x32
 8005b86:	4a08      	ldr	r2, [pc, #32]	@ (8005ba8 <UART_SetConfig+0x4e4>)
 8005b88:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	f003 020f 	and.w	r2, r3, #15
 8005b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4422      	add	r2, r4
 8005b9a:	609a      	str	r2, [r3, #8]
}
 8005b9c:	bf00      	nop
 8005b9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ba8:	51eb851f 	.word	0x51eb851f

08005bac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bac:	b084      	sub	sp, #16
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	f107 001c 	add.w	r0, r7, #28
 8005bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bbe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d123      	bne.n	8005c0e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005bda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d105      	bne.n	8005c02 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa9a 	bl	800613c <USB_CoreReset>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73fb      	strb	r3, [r7, #15]
 8005c0c:	e01b      	b.n	8005c46 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fa8e 	bl	800613c <USB_CoreReset>
 8005c20:	4603      	mov	r3, r0
 8005c22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c24:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c38:	e005      	b.n	8005c46 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c46:	7fbb      	ldrb	r3, [r7, #30]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d10b      	bne.n	8005c64 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f043 0206 	orr.w	r2, r3, #6
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f043 0220 	orr.w	r2, r3, #32
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c70:	b004      	add	sp, #16
 8005c72:	4770      	bx	lr

08005c74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f023 0201 	bic.w	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d115      	bne.n	8005ce4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cc4:	200a      	movs	r0, #10
 8005cc6:	f7fc fa4b 	bl	8002160 <HAL_Delay>
      ms += 10U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	330a      	adds	r3, #10
 8005cce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fa25 	bl	8006120 <USB_GetMode>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d01e      	beq.n	8005d1a <USB_SetCurrentMode+0x84>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ce0:	d9f0      	bls.n	8005cc4 <USB_SetCurrentMode+0x2e>
 8005ce2:	e01a      	b.n	8005d1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d115      	bne.n	8005d16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cf6:	200a      	movs	r0, #10
 8005cf8:	f7fc fa32 	bl	8002160 <HAL_Delay>
      ms += 10U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	330a      	adds	r3, #10
 8005d00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa0c 	bl	8006120 <USB_GetMode>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <USB_SetCurrentMode+0x84>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d12:	d9f0      	bls.n	8005cf6 <USB_SetCurrentMode+0x60>
 8005d14:	e001      	b.n	8005d1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e005      	b.n	8005d26 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d1e:	d101      	bne.n	8005d24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d30:	b084      	sub	sp, #16
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b086      	sub	sp, #24
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	e009      	b.n	8005d64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	3340      	adds	r3, #64	@ 0x40
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	3301      	adds	r3, #1
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2b0e      	cmp	r3, #14
 8005d68:	d9f2      	bls.n	8005d50 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11c      	bne.n	8005dac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d80:	f043 0302 	orr.w	r3, r3, #2
 8005d84:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	e005      	b.n	8005db8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dc4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d10d      	bne.n	8005de8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f968 	bl	80060ac <USB_SetDevSpeed>
 8005ddc:	e008      	b.n	8005df0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005dde:	2101      	movs	r1, #1
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f963 	bl	80060ac <USB_SetDevSpeed>
 8005de6:	e003      	b.n	8005df0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005de8:	2103      	movs	r1, #3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f95e 	bl	80060ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005df0:	2110      	movs	r1, #16
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f8fa 	bl	8005fec <USB_FlushTxFifo>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f924 	bl	8006050 <USB_FlushRxFifo>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e18:	461a      	mov	r2, r3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e24:	461a      	mov	r2, r3
 8005e26:	2300      	movs	r3, #0
 8005e28:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e30:	461a      	mov	r2, r3
 8005e32:	2300      	movs	r3, #0
 8005e34:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e36:	2300      	movs	r3, #0
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	e043      	b.n	8005ec4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e52:	d118      	bne.n	8005e86 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e66:	461a      	mov	r2, r3
 8005e68:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e013      	b.n	8005e98 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	e008      	b.n	8005e98 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e92:	461a      	mov	r2, r3
 8005e94:	2300      	movs	r3, #0
 8005e96:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ebc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ec8:	461a      	mov	r2, r3
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d3b5      	bcc.n	8005e3c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	e043      	b.n	8005f5e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005eec:	d118      	bne.n	8005f20 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f00:	461a      	mov	r2, r3
 8005f02:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	e013      	b.n	8005f32 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f16:	461a      	mov	r2, r3
 8005f18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	e008      	b.n	8005f32 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2300      	movs	r3, #0
 8005f42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f50:	461a      	mov	r2, r3
 8005f52:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f62:	461a      	mov	r2, r3
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d3b5      	bcc.n	8005ed6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f7c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005f8a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d105      	bne.n	8005fa0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f043 0210 	orr.w	r2, r3, #16
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699a      	ldr	r2, [r3, #24]
 8005fa4:	4b10      	ldr	r3, [pc, #64]	@ (8005fe8 <USB_DevInit+0x2b8>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f043 0208 	orr.w	r2, r3, #8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fc0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d107      	bne.n	8005fd8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fd0:	f043 0304 	orr.w	r3, r3, #4
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fe4:	b004      	add	sp, #16
 8005fe6:	4770      	bx	lr
 8005fe8:	803c3800 	.word	0x803c3800

08005fec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006006:	d901      	bls.n	800600c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e01b      	b.n	8006044 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	daf2      	bge.n	8005ffa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	019b      	lsls	r3, r3, #6
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3301      	adds	r3, #1
 8006028:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006030:	d901      	bls.n	8006036 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e006      	b.n	8006044 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b20      	cmp	r3, #32
 8006040:	d0f0      	beq.n	8006024 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006068:	d901      	bls.n	800606e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e018      	b.n	80060a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	daf2      	bge.n	800605c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2210      	movs	r2, #16
 800607e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800608c:	d901      	bls.n	8006092 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e006      	b.n	80060a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b10      	cmp	r3, #16
 800609c:	d0f0      	beq.n	8006080 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	68f9      	ldr	r1, [r7, #12]
 80060c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060cc:	4313      	orrs	r3, r2
 80060ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060f8:	f023 0303 	bic.w	r3, r3, #3
 80060fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800610c:	f043 0302 	orr.w	r3, r3, #2
 8006110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	f003 0301 	and.w	r3, r3, #1
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006154:	d901      	bls.n	800615a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e01b      	b.n	8006192 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	daf2      	bge.n	8006148 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f043 0201 	orr.w	r2, r3, #1
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3301      	adds	r3, #1
 8006176:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800617e:	d901      	bls.n	8006184 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e006      	b.n	8006192 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b01      	cmp	r3, #1
 800618e:	d0f0      	beq.n	8006172 <USB_CoreReset+0x36>

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <__cvt>:
 800619e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061a2:	ec57 6b10 	vmov	r6, r7, d0
 80061a6:	2f00      	cmp	r7, #0
 80061a8:	460c      	mov	r4, r1
 80061aa:	4619      	mov	r1, r3
 80061ac:	463b      	mov	r3, r7
 80061ae:	bfbb      	ittet	lt
 80061b0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80061b4:	461f      	movlt	r7, r3
 80061b6:	2300      	movge	r3, #0
 80061b8:	232d      	movlt	r3, #45	@ 0x2d
 80061ba:	700b      	strb	r3, [r1, #0]
 80061bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061be:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80061c2:	4691      	mov	r9, r2
 80061c4:	f023 0820 	bic.w	r8, r3, #32
 80061c8:	bfbc      	itt	lt
 80061ca:	4632      	movlt	r2, r6
 80061cc:	4616      	movlt	r6, r2
 80061ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061d2:	d005      	beq.n	80061e0 <__cvt+0x42>
 80061d4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80061d8:	d100      	bne.n	80061dc <__cvt+0x3e>
 80061da:	3401      	adds	r4, #1
 80061dc:	2102      	movs	r1, #2
 80061de:	e000      	b.n	80061e2 <__cvt+0x44>
 80061e0:	2103      	movs	r1, #3
 80061e2:	ab03      	add	r3, sp, #12
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	ab02      	add	r3, sp, #8
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	ec47 6b10 	vmov	d0, r6, r7
 80061ee:	4653      	mov	r3, sl
 80061f0:	4622      	mov	r2, r4
 80061f2:	f000 fe6d 	bl	8006ed0 <_dtoa_r>
 80061f6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80061fa:	4605      	mov	r5, r0
 80061fc:	d119      	bne.n	8006232 <__cvt+0x94>
 80061fe:	f019 0f01 	tst.w	r9, #1
 8006202:	d00e      	beq.n	8006222 <__cvt+0x84>
 8006204:	eb00 0904 	add.w	r9, r0, r4
 8006208:	2200      	movs	r2, #0
 800620a:	2300      	movs	r3, #0
 800620c:	4630      	mov	r0, r6
 800620e:	4639      	mov	r1, r7
 8006210:	f7fa fc7a 	bl	8000b08 <__aeabi_dcmpeq>
 8006214:	b108      	cbz	r0, 800621a <__cvt+0x7c>
 8006216:	f8cd 900c 	str.w	r9, [sp, #12]
 800621a:	2230      	movs	r2, #48	@ 0x30
 800621c:	9b03      	ldr	r3, [sp, #12]
 800621e:	454b      	cmp	r3, r9
 8006220:	d31e      	bcc.n	8006260 <__cvt+0xc2>
 8006222:	9b03      	ldr	r3, [sp, #12]
 8006224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006226:	1b5b      	subs	r3, r3, r5
 8006228:	4628      	mov	r0, r5
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	b004      	add	sp, #16
 800622e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006232:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006236:	eb00 0904 	add.w	r9, r0, r4
 800623a:	d1e5      	bne.n	8006208 <__cvt+0x6a>
 800623c:	7803      	ldrb	r3, [r0, #0]
 800623e:	2b30      	cmp	r3, #48	@ 0x30
 8006240:	d10a      	bne.n	8006258 <__cvt+0xba>
 8006242:	2200      	movs	r2, #0
 8006244:	2300      	movs	r3, #0
 8006246:	4630      	mov	r0, r6
 8006248:	4639      	mov	r1, r7
 800624a:	f7fa fc5d 	bl	8000b08 <__aeabi_dcmpeq>
 800624e:	b918      	cbnz	r0, 8006258 <__cvt+0xba>
 8006250:	f1c4 0401 	rsb	r4, r4, #1
 8006254:	f8ca 4000 	str.w	r4, [sl]
 8006258:	f8da 3000 	ldr.w	r3, [sl]
 800625c:	4499      	add	r9, r3
 800625e:	e7d3      	b.n	8006208 <__cvt+0x6a>
 8006260:	1c59      	adds	r1, r3, #1
 8006262:	9103      	str	r1, [sp, #12]
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	e7d9      	b.n	800621c <__cvt+0x7e>

08006268 <__exponent>:
 8006268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800626a:	2900      	cmp	r1, #0
 800626c:	bfba      	itte	lt
 800626e:	4249      	neglt	r1, r1
 8006270:	232d      	movlt	r3, #45	@ 0x2d
 8006272:	232b      	movge	r3, #43	@ 0x2b
 8006274:	2909      	cmp	r1, #9
 8006276:	7002      	strb	r2, [r0, #0]
 8006278:	7043      	strb	r3, [r0, #1]
 800627a:	dd29      	ble.n	80062d0 <__exponent+0x68>
 800627c:	f10d 0307 	add.w	r3, sp, #7
 8006280:	461d      	mov	r5, r3
 8006282:	270a      	movs	r7, #10
 8006284:	461a      	mov	r2, r3
 8006286:	fbb1 f6f7 	udiv	r6, r1, r7
 800628a:	fb07 1416 	mls	r4, r7, r6, r1
 800628e:	3430      	adds	r4, #48	@ 0x30
 8006290:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006294:	460c      	mov	r4, r1
 8006296:	2c63      	cmp	r4, #99	@ 0x63
 8006298:	f103 33ff 	add.w	r3, r3, #4294967295
 800629c:	4631      	mov	r1, r6
 800629e:	dcf1      	bgt.n	8006284 <__exponent+0x1c>
 80062a0:	3130      	adds	r1, #48	@ 0x30
 80062a2:	1e94      	subs	r4, r2, #2
 80062a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062a8:	1c41      	adds	r1, r0, #1
 80062aa:	4623      	mov	r3, r4
 80062ac:	42ab      	cmp	r3, r5
 80062ae:	d30a      	bcc.n	80062c6 <__exponent+0x5e>
 80062b0:	f10d 0309 	add.w	r3, sp, #9
 80062b4:	1a9b      	subs	r3, r3, r2
 80062b6:	42ac      	cmp	r4, r5
 80062b8:	bf88      	it	hi
 80062ba:	2300      	movhi	r3, #0
 80062bc:	3302      	adds	r3, #2
 80062be:	4403      	add	r3, r0
 80062c0:	1a18      	subs	r0, r3, r0
 80062c2:	b003      	add	sp, #12
 80062c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062ce:	e7ed      	b.n	80062ac <__exponent+0x44>
 80062d0:	2330      	movs	r3, #48	@ 0x30
 80062d2:	3130      	adds	r1, #48	@ 0x30
 80062d4:	7083      	strb	r3, [r0, #2]
 80062d6:	70c1      	strb	r1, [r0, #3]
 80062d8:	1d03      	adds	r3, r0, #4
 80062da:	e7f1      	b.n	80062c0 <__exponent+0x58>

080062dc <_printf_float>:
 80062dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	b08d      	sub	sp, #52	@ 0x34
 80062e2:	460c      	mov	r4, r1
 80062e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80062e8:	4616      	mov	r6, r2
 80062ea:	461f      	mov	r7, r3
 80062ec:	4605      	mov	r5, r0
 80062ee:	f000 fcef 	bl	8006cd0 <_localeconv_r>
 80062f2:	6803      	ldr	r3, [r0, #0]
 80062f4:	9304      	str	r3, [sp, #16]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7f9 ffda 	bl	80002b0 <strlen>
 80062fc:	2300      	movs	r3, #0
 80062fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006300:	f8d8 3000 	ldr.w	r3, [r8]
 8006304:	9005      	str	r0, [sp, #20]
 8006306:	3307      	adds	r3, #7
 8006308:	f023 0307 	bic.w	r3, r3, #7
 800630c:	f103 0208 	add.w	r2, r3, #8
 8006310:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006314:	f8d4 b000 	ldr.w	fp, [r4]
 8006318:	f8c8 2000 	str.w	r2, [r8]
 800631c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006320:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006324:	9307      	str	r3, [sp, #28]
 8006326:	f8cd 8018 	str.w	r8, [sp, #24]
 800632a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800632e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006332:	4b9c      	ldr	r3, [pc, #624]	@ (80065a4 <_printf_float+0x2c8>)
 8006334:	f04f 32ff 	mov.w	r2, #4294967295
 8006338:	f7fa fc18 	bl	8000b6c <__aeabi_dcmpun>
 800633c:	bb70      	cbnz	r0, 800639c <_printf_float+0xc0>
 800633e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006342:	4b98      	ldr	r3, [pc, #608]	@ (80065a4 <_printf_float+0x2c8>)
 8006344:	f04f 32ff 	mov.w	r2, #4294967295
 8006348:	f7fa fbf2 	bl	8000b30 <__aeabi_dcmple>
 800634c:	bb30      	cbnz	r0, 800639c <_printf_float+0xc0>
 800634e:	2200      	movs	r2, #0
 8006350:	2300      	movs	r3, #0
 8006352:	4640      	mov	r0, r8
 8006354:	4649      	mov	r1, r9
 8006356:	f7fa fbe1 	bl	8000b1c <__aeabi_dcmplt>
 800635a:	b110      	cbz	r0, 8006362 <_printf_float+0x86>
 800635c:	232d      	movs	r3, #45	@ 0x2d
 800635e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006362:	4a91      	ldr	r2, [pc, #580]	@ (80065a8 <_printf_float+0x2cc>)
 8006364:	4b91      	ldr	r3, [pc, #580]	@ (80065ac <_printf_float+0x2d0>)
 8006366:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800636a:	bf94      	ite	ls
 800636c:	4690      	movls	r8, r2
 800636e:	4698      	movhi	r8, r3
 8006370:	2303      	movs	r3, #3
 8006372:	6123      	str	r3, [r4, #16]
 8006374:	f02b 0304 	bic.w	r3, fp, #4
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	f04f 0900 	mov.w	r9, #0
 800637e:	9700      	str	r7, [sp, #0]
 8006380:	4633      	mov	r3, r6
 8006382:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006384:	4621      	mov	r1, r4
 8006386:	4628      	mov	r0, r5
 8006388:	f000 f9d2 	bl	8006730 <_printf_common>
 800638c:	3001      	adds	r0, #1
 800638e:	f040 808d 	bne.w	80064ac <_printf_float+0x1d0>
 8006392:	f04f 30ff 	mov.w	r0, #4294967295
 8006396:	b00d      	add	sp, #52	@ 0x34
 8006398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639c:	4642      	mov	r2, r8
 800639e:	464b      	mov	r3, r9
 80063a0:	4640      	mov	r0, r8
 80063a2:	4649      	mov	r1, r9
 80063a4:	f7fa fbe2 	bl	8000b6c <__aeabi_dcmpun>
 80063a8:	b140      	cbz	r0, 80063bc <_printf_float+0xe0>
 80063aa:	464b      	mov	r3, r9
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bfbc      	itt	lt
 80063b0:	232d      	movlt	r3, #45	@ 0x2d
 80063b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80063b6:	4a7e      	ldr	r2, [pc, #504]	@ (80065b0 <_printf_float+0x2d4>)
 80063b8:	4b7e      	ldr	r3, [pc, #504]	@ (80065b4 <_printf_float+0x2d8>)
 80063ba:	e7d4      	b.n	8006366 <_printf_float+0x8a>
 80063bc:	6863      	ldr	r3, [r4, #4]
 80063be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80063c2:	9206      	str	r2, [sp, #24]
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	d13b      	bne.n	8006440 <_printf_float+0x164>
 80063c8:	2306      	movs	r3, #6
 80063ca:	6063      	str	r3, [r4, #4]
 80063cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80063d0:	2300      	movs	r3, #0
 80063d2:	6022      	str	r2, [r4, #0]
 80063d4:	9303      	str	r3, [sp, #12]
 80063d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80063d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80063dc:	ab09      	add	r3, sp, #36	@ 0x24
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	6861      	ldr	r1, [r4, #4]
 80063e2:	ec49 8b10 	vmov	d0, r8, r9
 80063e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80063ea:	4628      	mov	r0, r5
 80063ec:	f7ff fed7 	bl	800619e <__cvt>
 80063f0:	9b06      	ldr	r3, [sp, #24]
 80063f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063f4:	2b47      	cmp	r3, #71	@ 0x47
 80063f6:	4680      	mov	r8, r0
 80063f8:	d129      	bne.n	800644e <_printf_float+0x172>
 80063fa:	1cc8      	adds	r0, r1, #3
 80063fc:	db02      	blt.n	8006404 <_printf_float+0x128>
 80063fe:	6863      	ldr	r3, [r4, #4]
 8006400:	4299      	cmp	r1, r3
 8006402:	dd41      	ble.n	8006488 <_printf_float+0x1ac>
 8006404:	f1aa 0a02 	sub.w	sl, sl, #2
 8006408:	fa5f fa8a 	uxtb.w	sl, sl
 800640c:	3901      	subs	r1, #1
 800640e:	4652      	mov	r2, sl
 8006410:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006414:	9109      	str	r1, [sp, #36]	@ 0x24
 8006416:	f7ff ff27 	bl	8006268 <__exponent>
 800641a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800641c:	1813      	adds	r3, r2, r0
 800641e:	2a01      	cmp	r2, #1
 8006420:	4681      	mov	r9, r0
 8006422:	6123      	str	r3, [r4, #16]
 8006424:	dc02      	bgt.n	800642c <_printf_float+0x150>
 8006426:	6822      	ldr	r2, [r4, #0]
 8006428:	07d2      	lsls	r2, r2, #31
 800642a:	d501      	bpl.n	8006430 <_printf_float+0x154>
 800642c:	3301      	adds	r3, #1
 800642e:	6123      	str	r3, [r4, #16]
 8006430:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0a2      	beq.n	800637e <_printf_float+0xa2>
 8006438:	232d      	movs	r3, #45	@ 0x2d
 800643a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800643e:	e79e      	b.n	800637e <_printf_float+0xa2>
 8006440:	9a06      	ldr	r2, [sp, #24]
 8006442:	2a47      	cmp	r2, #71	@ 0x47
 8006444:	d1c2      	bne.n	80063cc <_printf_float+0xf0>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1c0      	bne.n	80063cc <_printf_float+0xf0>
 800644a:	2301      	movs	r3, #1
 800644c:	e7bd      	b.n	80063ca <_printf_float+0xee>
 800644e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006452:	d9db      	bls.n	800640c <_printf_float+0x130>
 8006454:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006458:	d118      	bne.n	800648c <_printf_float+0x1b0>
 800645a:	2900      	cmp	r1, #0
 800645c:	6863      	ldr	r3, [r4, #4]
 800645e:	dd0b      	ble.n	8006478 <_printf_float+0x19c>
 8006460:	6121      	str	r1, [r4, #16]
 8006462:	b913      	cbnz	r3, 800646a <_printf_float+0x18e>
 8006464:	6822      	ldr	r2, [r4, #0]
 8006466:	07d0      	lsls	r0, r2, #31
 8006468:	d502      	bpl.n	8006470 <_printf_float+0x194>
 800646a:	3301      	adds	r3, #1
 800646c:	440b      	add	r3, r1
 800646e:	6123      	str	r3, [r4, #16]
 8006470:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006472:	f04f 0900 	mov.w	r9, #0
 8006476:	e7db      	b.n	8006430 <_printf_float+0x154>
 8006478:	b913      	cbnz	r3, 8006480 <_printf_float+0x1a4>
 800647a:	6822      	ldr	r2, [r4, #0]
 800647c:	07d2      	lsls	r2, r2, #31
 800647e:	d501      	bpl.n	8006484 <_printf_float+0x1a8>
 8006480:	3302      	adds	r3, #2
 8006482:	e7f4      	b.n	800646e <_printf_float+0x192>
 8006484:	2301      	movs	r3, #1
 8006486:	e7f2      	b.n	800646e <_printf_float+0x192>
 8006488:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800648c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800648e:	4299      	cmp	r1, r3
 8006490:	db05      	blt.n	800649e <_printf_float+0x1c2>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	6121      	str	r1, [r4, #16]
 8006496:	07d8      	lsls	r0, r3, #31
 8006498:	d5ea      	bpl.n	8006470 <_printf_float+0x194>
 800649a:	1c4b      	adds	r3, r1, #1
 800649c:	e7e7      	b.n	800646e <_printf_float+0x192>
 800649e:	2900      	cmp	r1, #0
 80064a0:	bfd4      	ite	le
 80064a2:	f1c1 0202 	rsble	r2, r1, #2
 80064a6:	2201      	movgt	r2, #1
 80064a8:	4413      	add	r3, r2
 80064aa:	e7e0      	b.n	800646e <_printf_float+0x192>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	055a      	lsls	r2, r3, #21
 80064b0:	d407      	bmi.n	80064c2 <_printf_float+0x1e6>
 80064b2:	6923      	ldr	r3, [r4, #16]
 80064b4:	4642      	mov	r2, r8
 80064b6:	4631      	mov	r1, r6
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b8      	blx	r7
 80064bc:	3001      	adds	r0, #1
 80064be:	d12b      	bne.n	8006518 <_printf_float+0x23c>
 80064c0:	e767      	b.n	8006392 <_printf_float+0xb6>
 80064c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064c6:	f240 80dd 	bls.w	8006684 <_printf_float+0x3a8>
 80064ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064ce:	2200      	movs	r2, #0
 80064d0:	2300      	movs	r3, #0
 80064d2:	f7fa fb19 	bl	8000b08 <__aeabi_dcmpeq>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d033      	beq.n	8006542 <_printf_float+0x266>
 80064da:	4a37      	ldr	r2, [pc, #220]	@ (80065b8 <_printf_float+0x2dc>)
 80064dc:	2301      	movs	r3, #1
 80064de:	4631      	mov	r1, r6
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b8      	blx	r7
 80064e4:	3001      	adds	r0, #1
 80064e6:	f43f af54 	beq.w	8006392 <_printf_float+0xb6>
 80064ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80064ee:	4543      	cmp	r3, r8
 80064f0:	db02      	blt.n	80064f8 <_printf_float+0x21c>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	07d8      	lsls	r0, r3, #31
 80064f6:	d50f      	bpl.n	8006518 <_printf_float+0x23c>
 80064f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f af45 	beq.w	8006392 <_printf_float+0xb6>
 8006508:	f04f 0900 	mov.w	r9, #0
 800650c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006510:	f104 0a1a 	add.w	sl, r4, #26
 8006514:	45c8      	cmp	r8, r9
 8006516:	dc09      	bgt.n	800652c <_printf_float+0x250>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	079b      	lsls	r3, r3, #30
 800651c:	f100 8103 	bmi.w	8006726 <_printf_float+0x44a>
 8006520:	68e0      	ldr	r0, [r4, #12]
 8006522:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006524:	4298      	cmp	r0, r3
 8006526:	bfb8      	it	lt
 8006528:	4618      	movlt	r0, r3
 800652a:	e734      	b.n	8006396 <_printf_float+0xba>
 800652c:	2301      	movs	r3, #1
 800652e:	4652      	mov	r2, sl
 8006530:	4631      	mov	r1, r6
 8006532:	4628      	mov	r0, r5
 8006534:	47b8      	blx	r7
 8006536:	3001      	adds	r0, #1
 8006538:	f43f af2b 	beq.w	8006392 <_printf_float+0xb6>
 800653c:	f109 0901 	add.w	r9, r9, #1
 8006540:	e7e8      	b.n	8006514 <_printf_float+0x238>
 8006542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	dc39      	bgt.n	80065bc <_printf_float+0x2e0>
 8006548:	4a1b      	ldr	r2, [pc, #108]	@ (80065b8 <_printf_float+0x2dc>)
 800654a:	2301      	movs	r3, #1
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f af1d 	beq.w	8006392 <_printf_float+0xb6>
 8006558:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800655c:	ea59 0303 	orrs.w	r3, r9, r3
 8006560:	d102      	bne.n	8006568 <_printf_float+0x28c>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	07d9      	lsls	r1, r3, #31
 8006566:	d5d7      	bpl.n	8006518 <_printf_float+0x23c>
 8006568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800656c:	4631      	mov	r1, r6
 800656e:	4628      	mov	r0, r5
 8006570:	47b8      	blx	r7
 8006572:	3001      	adds	r0, #1
 8006574:	f43f af0d 	beq.w	8006392 <_printf_float+0xb6>
 8006578:	f04f 0a00 	mov.w	sl, #0
 800657c:	f104 0b1a 	add.w	fp, r4, #26
 8006580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006582:	425b      	negs	r3, r3
 8006584:	4553      	cmp	r3, sl
 8006586:	dc01      	bgt.n	800658c <_printf_float+0x2b0>
 8006588:	464b      	mov	r3, r9
 800658a:	e793      	b.n	80064b4 <_printf_float+0x1d8>
 800658c:	2301      	movs	r3, #1
 800658e:	465a      	mov	r2, fp
 8006590:	4631      	mov	r1, r6
 8006592:	4628      	mov	r0, r5
 8006594:	47b8      	blx	r7
 8006596:	3001      	adds	r0, #1
 8006598:	f43f aefb 	beq.w	8006392 <_printf_float+0xb6>
 800659c:	f10a 0a01 	add.w	sl, sl, #1
 80065a0:	e7ee      	b.n	8006580 <_printf_float+0x2a4>
 80065a2:	bf00      	nop
 80065a4:	7fefffff 	.word	0x7fefffff
 80065a8:	08008ec8 	.word	0x08008ec8
 80065ac:	08008ecc 	.word	0x08008ecc
 80065b0:	08008ed0 	.word	0x08008ed0
 80065b4:	08008ed4 	.word	0x08008ed4
 80065b8:	08008ed8 	.word	0x08008ed8
 80065bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065c2:	4553      	cmp	r3, sl
 80065c4:	bfa8      	it	ge
 80065c6:	4653      	movge	r3, sl
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	4699      	mov	r9, r3
 80065cc:	dc36      	bgt.n	800663c <_printf_float+0x360>
 80065ce:	f04f 0b00 	mov.w	fp, #0
 80065d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065d6:	f104 021a 	add.w	r2, r4, #26
 80065da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065dc:	9306      	str	r3, [sp, #24]
 80065de:	eba3 0309 	sub.w	r3, r3, r9
 80065e2:	455b      	cmp	r3, fp
 80065e4:	dc31      	bgt.n	800664a <_printf_float+0x36e>
 80065e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e8:	459a      	cmp	sl, r3
 80065ea:	dc3a      	bgt.n	8006662 <_printf_float+0x386>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	07da      	lsls	r2, r3, #31
 80065f0:	d437      	bmi.n	8006662 <_printf_float+0x386>
 80065f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f4:	ebaa 0903 	sub.w	r9, sl, r3
 80065f8:	9b06      	ldr	r3, [sp, #24]
 80065fa:	ebaa 0303 	sub.w	r3, sl, r3
 80065fe:	4599      	cmp	r9, r3
 8006600:	bfa8      	it	ge
 8006602:	4699      	movge	r9, r3
 8006604:	f1b9 0f00 	cmp.w	r9, #0
 8006608:	dc33      	bgt.n	8006672 <_printf_float+0x396>
 800660a:	f04f 0800 	mov.w	r8, #0
 800660e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006612:	f104 0b1a 	add.w	fp, r4, #26
 8006616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006618:	ebaa 0303 	sub.w	r3, sl, r3
 800661c:	eba3 0309 	sub.w	r3, r3, r9
 8006620:	4543      	cmp	r3, r8
 8006622:	f77f af79 	ble.w	8006518 <_printf_float+0x23c>
 8006626:	2301      	movs	r3, #1
 8006628:	465a      	mov	r2, fp
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	f43f aeae 	beq.w	8006392 <_printf_float+0xb6>
 8006636:	f108 0801 	add.w	r8, r8, #1
 800663a:	e7ec      	b.n	8006616 <_printf_float+0x33a>
 800663c:	4642      	mov	r2, r8
 800663e:	4631      	mov	r1, r6
 8006640:	4628      	mov	r0, r5
 8006642:	47b8      	blx	r7
 8006644:	3001      	adds	r0, #1
 8006646:	d1c2      	bne.n	80065ce <_printf_float+0x2f2>
 8006648:	e6a3      	b.n	8006392 <_printf_float+0xb6>
 800664a:	2301      	movs	r3, #1
 800664c:	4631      	mov	r1, r6
 800664e:	4628      	mov	r0, r5
 8006650:	9206      	str	r2, [sp, #24]
 8006652:	47b8      	blx	r7
 8006654:	3001      	adds	r0, #1
 8006656:	f43f ae9c 	beq.w	8006392 <_printf_float+0xb6>
 800665a:	9a06      	ldr	r2, [sp, #24]
 800665c:	f10b 0b01 	add.w	fp, fp, #1
 8006660:	e7bb      	b.n	80065da <_printf_float+0x2fe>
 8006662:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006666:	4631      	mov	r1, r6
 8006668:	4628      	mov	r0, r5
 800666a:	47b8      	blx	r7
 800666c:	3001      	adds	r0, #1
 800666e:	d1c0      	bne.n	80065f2 <_printf_float+0x316>
 8006670:	e68f      	b.n	8006392 <_printf_float+0xb6>
 8006672:	9a06      	ldr	r2, [sp, #24]
 8006674:	464b      	mov	r3, r9
 8006676:	4442      	add	r2, r8
 8006678:	4631      	mov	r1, r6
 800667a:	4628      	mov	r0, r5
 800667c:	47b8      	blx	r7
 800667e:	3001      	adds	r0, #1
 8006680:	d1c3      	bne.n	800660a <_printf_float+0x32e>
 8006682:	e686      	b.n	8006392 <_printf_float+0xb6>
 8006684:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006688:	f1ba 0f01 	cmp.w	sl, #1
 800668c:	dc01      	bgt.n	8006692 <_printf_float+0x3b6>
 800668e:	07db      	lsls	r3, r3, #31
 8006690:	d536      	bpl.n	8006700 <_printf_float+0x424>
 8006692:	2301      	movs	r3, #1
 8006694:	4642      	mov	r2, r8
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	f43f ae78 	beq.w	8006392 <_printf_float+0xb6>
 80066a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066a6:	4631      	mov	r1, r6
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b8      	blx	r7
 80066ac:	3001      	adds	r0, #1
 80066ae:	f43f ae70 	beq.w	8006392 <_printf_float+0xb6>
 80066b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066b6:	2200      	movs	r2, #0
 80066b8:	2300      	movs	r3, #0
 80066ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066be:	f7fa fa23 	bl	8000b08 <__aeabi_dcmpeq>
 80066c2:	b9c0      	cbnz	r0, 80066f6 <_printf_float+0x41a>
 80066c4:	4653      	mov	r3, sl
 80066c6:	f108 0201 	add.w	r2, r8, #1
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	d10c      	bne.n	80066ee <_printf_float+0x412>
 80066d4:	e65d      	b.n	8006392 <_printf_float+0xb6>
 80066d6:	2301      	movs	r3, #1
 80066d8:	465a      	mov	r2, fp
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f ae56 	beq.w	8006392 <_printf_float+0xb6>
 80066e6:	f108 0801 	add.w	r8, r8, #1
 80066ea:	45d0      	cmp	r8, sl
 80066ec:	dbf3      	blt.n	80066d6 <_printf_float+0x3fa>
 80066ee:	464b      	mov	r3, r9
 80066f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80066f4:	e6df      	b.n	80064b6 <_printf_float+0x1da>
 80066f6:	f04f 0800 	mov.w	r8, #0
 80066fa:	f104 0b1a 	add.w	fp, r4, #26
 80066fe:	e7f4      	b.n	80066ea <_printf_float+0x40e>
 8006700:	2301      	movs	r3, #1
 8006702:	4642      	mov	r2, r8
 8006704:	e7e1      	b.n	80066ca <_printf_float+0x3ee>
 8006706:	2301      	movs	r3, #1
 8006708:	464a      	mov	r2, r9
 800670a:	4631      	mov	r1, r6
 800670c:	4628      	mov	r0, r5
 800670e:	47b8      	blx	r7
 8006710:	3001      	adds	r0, #1
 8006712:	f43f ae3e 	beq.w	8006392 <_printf_float+0xb6>
 8006716:	f108 0801 	add.w	r8, r8, #1
 800671a:	68e3      	ldr	r3, [r4, #12]
 800671c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800671e:	1a5b      	subs	r3, r3, r1
 8006720:	4543      	cmp	r3, r8
 8006722:	dcf0      	bgt.n	8006706 <_printf_float+0x42a>
 8006724:	e6fc      	b.n	8006520 <_printf_float+0x244>
 8006726:	f04f 0800 	mov.w	r8, #0
 800672a:	f104 0919 	add.w	r9, r4, #25
 800672e:	e7f4      	b.n	800671a <_printf_float+0x43e>

08006730 <_printf_common>:
 8006730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006734:	4616      	mov	r6, r2
 8006736:	4698      	mov	r8, r3
 8006738:	688a      	ldr	r2, [r1, #8]
 800673a:	690b      	ldr	r3, [r1, #16]
 800673c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006740:	4293      	cmp	r3, r2
 8006742:	bfb8      	it	lt
 8006744:	4613      	movlt	r3, r2
 8006746:	6033      	str	r3, [r6, #0]
 8006748:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800674c:	4607      	mov	r7, r0
 800674e:	460c      	mov	r4, r1
 8006750:	b10a      	cbz	r2, 8006756 <_printf_common+0x26>
 8006752:	3301      	adds	r3, #1
 8006754:	6033      	str	r3, [r6, #0]
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	0699      	lsls	r1, r3, #26
 800675a:	bf42      	ittt	mi
 800675c:	6833      	ldrmi	r3, [r6, #0]
 800675e:	3302      	addmi	r3, #2
 8006760:	6033      	strmi	r3, [r6, #0]
 8006762:	6825      	ldr	r5, [r4, #0]
 8006764:	f015 0506 	ands.w	r5, r5, #6
 8006768:	d106      	bne.n	8006778 <_printf_common+0x48>
 800676a:	f104 0a19 	add.w	sl, r4, #25
 800676e:	68e3      	ldr	r3, [r4, #12]
 8006770:	6832      	ldr	r2, [r6, #0]
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	42ab      	cmp	r3, r5
 8006776:	dc26      	bgt.n	80067c6 <_printf_common+0x96>
 8006778:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800677c:	6822      	ldr	r2, [r4, #0]
 800677e:	3b00      	subs	r3, #0
 8006780:	bf18      	it	ne
 8006782:	2301      	movne	r3, #1
 8006784:	0692      	lsls	r2, r2, #26
 8006786:	d42b      	bmi.n	80067e0 <_printf_common+0xb0>
 8006788:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800678c:	4641      	mov	r1, r8
 800678e:	4638      	mov	r0, r7
 8006790:	47c8      	blx	r9
 8006792:	3001      	adds	r0, #1
 8006794:	d01e      	beq.n	80067d4 <_printf_common+0xa4>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	6922      	ldr	r2, [r4, #16]
 800679a:	f003 0306 	and.w	r3, r3, #6
 800679e:	2b04      	cmp	r3, #4
 80067a0:	bf02      	ittt	eq
 80067a2:	68e5      	ldreq	r5, [r4, #12]
 80067a4:	6833      	ldreq	r3, [r6, #0]
 80067a6:	1aed      	subeq	r5, r5, r3
 80067a8:	68a3      	ldr	r3, [r4, #8]
 80067aa:	bf0c      	ite	eq
 80067ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067b0:	2500      	movne	r5, #0
 80067b2:	4293      	cmp	r3, r2
 80067b4:	bfc4      	itt	gt
 80067b6:	1a9b      	subgt	r3, r3, r2
 80067b8:	18ed      	addgt	r5, r5, r3
 80067ba:	2600      	movs	r6, #0
 80067bc:	341a      	adds	r4, #26
 80067be:	42b5      	cmp	r5, r6
 80067c0:	d11a      	bne.n	80067f8 <_printf_common+0xc8>
 80067c2:	2000      	movs	r0, #0
 80067c4:	e008      	b.n	80067d8 <_printf_common+0xa8>
 80067c6:	2301      	movs	r3, #1
 80067c8:	4652      	mov	r2, sl
 80067ca:	4641      	mov	r1, r8
 80067cc:	4638      	mov	r0, r7
 80067ce:	47c8      	blx	r9
 80067d0:	3001      	adds	r0, #1
 80067d2:	d103      	bne.n	80067dc <_printf_common+0xac>
 80067d4:	f04f 30ff 	mov.w	r0, #4294967295
 80067d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067dc:	3501      	adds	r5, #1
 80067de:	e7c6      	b.n	800676e <_printf_common+0x3e>
 80067e0:	18e1      	adds	r1, r4, r3
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	2030      	movs	r0, #48	@ 0x30
 80067e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067ea:	4422      	add	r2, r4
 80067ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067f4:	3302      	adds	r3, #2
 80067f6:	e7c7      	b.n	8006788 <_printf_common+0x58>
 80067f8:	2301      	movs	r3, #1
 80067fa:	4622      	mov	r2, r4
 80067fc:	4641      	mov	r1, r8
 80067fe:	4638      	mov	r0, r7
 8006800:	47c8      	blx	r9
 8006802:	3001      	adds	r0, #1
 8006804:	d0e6      	beq.n	80067d4 <_printf_common+0xa4>
 8006806:	3601      	adds	r6, #1
 8006808:	e7d9      	b.n	80067be <_printf_common+0x8e>
	...

0800680c <_printf_i>:
 800680c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006810:	7e0f      	ldrb	r7, [r1, #24]
 8006812:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006814:	2f78      	cmp	r7, #120	@ 0x78
 8006816:	4691      	mov	r9, r2
 8006818:	4680      	mov	r8, r0
 800681a:	460c      	mov	r4, r1
 800681c:	469a      	mov	sl, r3
 800681e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006822:	d807      	bhi.n	8006834 <_printf_i+0x28>
 8006824:	2f62      	cmp	r7, #98	@ 0x62
 8006826:	d80a      	bhi.n	800683e <_printf_i+0x32>
 8006828:	2f00      	cmp	r7, #0
 800682a:	f000 80d2 	beq.w	80069d2 <_printf_i+0x1c6>
 800682e:	2f58      	cmp	r7, #88	@ 0x58
 8006830:	f000 80b9 	beq.w	80069a6 <_printf_i+0x19a>
 8006834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006838:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800683c:	e03a      	b.n	80068b4 <_printf_i+0xa8>
 800683e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006842:	2b15      	cmp	r3, #21
 8006844:	d8f6      	bhi.n	8006834 <_printf_i+0x28>
 8006846:	a101      	add	r1, pc, #4	@ (adr r1, 800684c <_printf_i+0x40>)
 8006848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800684c:	080068a5 	.word	0x080068a5
 8006850:	080068b9 	.word	0x080068b9
 8006854:	08006835 	.word	0x08006835
 8006858:	08006835 	.word	0x08006835
 800685c:	08006835 	.word	0x08006835
 8006860:	08006835 	.word	0x08006835
 8006864:	080068b9 	.word	0x080068b9
 8006868:	08006835 	.word	0x08006835
 800686c:	08006835 	.word	0x08006835
 8006870:	08006835 	.word	0x08006835
 8006874:	08006835 	.word	0x08006835
 8006878:	080069b9 	.word	0x080069b9
 800687c:	080068e3 	.word	0x080068e3
 8006880:	08006973 	.word	0x08006973
 8006884:	08006835 	.word	0x08006835
 8006888:	08006835 	.word	0x08006835
 800688c:	080069db 	.word	0x080069db
 8006890:	08006835 	.word	0x08006835
 8006894:	080068e3 	.word	0x080068e3
 8006898:	08006835 	.word	0x08006835
 800689c:	08006835 	.word	0x08006835
 80068a0:	0800697b 	.word	0x0800697b
 80068a4:	6833      	ldr	r3, [r6, #0]
 80068a6:	1d1a      	adds	r2, r3, #4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6032      	str	r2, [r6, #0]
 80068ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068b4:	2301      	movs	r3, #1
 80068b6:	e09d      	b.n	80069f4 <_printf_i+0x1e8>
 80068b8:	6833      	ldr	r3, [r6, #0]
 80068ba:	6820      	ldr	r0, [r4, #0]
 80068bc:	1d19      	adds	r1, r3, #4
 80068be:	6031      	str	r1, [r6, #0]
 80068c0:	0606      	lsls	r6, r0, #24
 80068c2:	d501      	bpl.n	80068c8 <_printf_i+0xbc>
 80068c4:	681d      	ldr	r5, [r3, #0]
 80068c6:	e003      	b.n	80068d0 <_printf_i+0xc4>
 80068c8:	0645      	lsls	r5, r0, #25
 80068ca:	d5fb      	bpl.n	80068c4 <_printf_i+0xb8>
 80068cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068d0:	2d00      	cmp	r5, #0
 80068d2:	da03      	bge.n	80068dc <_printf_i+0xd0>
 80068d4:	232d      	movs	r3, #45	@ 0x2d
 80068d6:	426d      	negs	r5, r5
 80068d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068dc:	4859      	ldr	r0, [pc, #356]	@ (8006a44 <_printf_i+0x238>)
 80068de:	230a      	movs	r3, #10
 80068e0:	e011      	b.n	8006906 <_printf_i+0xfa>
 80068e2:	6821      	ldr	r1, [r4, #0]
 80068e4:	6833      	ldr	r3, [r6, #0]
 80068e6:	0608      	lsls	r0, r1, #24
 80068e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80068ec:	d402      	bmi.n	80068f4 <_printf_i+0xe8>
 80068ee:	0649      	lsls	r1, r1, #25
 80068f0:	bf48      	it	mi
 80068f2:	b2ad      	uxthmi	r5, r5
 80068f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80068f6:	4853      	ldr	r0, [pc, #332]	@ (8006a44 <_printf_i+0x238>)
 80068f8:	6033      	str	r3, [r6, #0]
 80068fa:	bf14      	ite	ne
 80068fc:	230a      	movne	r3, #10
 80068fe:	2308      	moveq	r3, #8
 8006900:	2100      	movs	r1, #0
 8006902:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006906:	6866      	ldr	r6, [r4, #4]
 8006908:	60a6      	str	r6, [r4, #8]
 800690a:	2e00      	cmp	r6, #0
 800690c:	bfa2      	ittt	ge
 800690e:	6821      	ldrge	r1, [r4, #0]
 8006910:	f021 0104 	bicge.w	r1, r1, #4
 8006914:	6021      	strge	r1, [r4, #0]
 8006916:	b90d      	cbnz	r5, 800691c <_printf_i+0x110>
 8006918:	2e00      	cmp	r6, #0
 800691a:	d04b      	beq.n	80069b4 <_printf_i+0x1a8>
 800691c:	4616      	mov	r6, r2
 800691e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006922:	fb03 5711 	mls	r7, r3, r1, r5
 8006926:	5dc7      	ldrb	r7, [r0, r7]
 8006928:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800692c:	462f      	mov	r7, r5
 800692e:	42bb      	cmp	r3, r7
 8006930:	460d      	mov	r5, r1
 8006932:	d9f4      	bls.n	800691e <_printf_i+0x112>
 8006934:	2b08      	cmp	r3, #8
 8006936:	d10b      	bne.n	8006950 <_printf_i+0x144>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	07df      	lsls	r7, r3, #31
 800693c:	d508      	bpl.n	8006950 <_printf_i+0x144>
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	6861      	ldr	r1, [r4, #4]
 8006942:	4299      	cmp	r1, r3
 8006944:	bfde      	ittt	le
 8006946:	2330      	movle	r3, #48	@ 0x30
 8006948:	f806 3c01 	strble.w	r3, [r6, #-1]
 800694c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006950:	1b92      	subs	r2, r2, r6
 8006952:	6122      	str	r2, [r4, #16]
 8006954:	f8cd a000 	str.w	sl, [sp]
 8006958:	464b      	mov	r3, r9
 800695a:	aa03      	add	r2, sp, #12
 800695c:	4621      	mov	r1, r4
 800695e:	4640      	mov	r0, r8
 8006960:	f7ff fee6 	bl	8006730 <_printf_common>
 8006964:	3001      	adds	r0, #1
 8006966:	d14a      	bne.n	80069fe <_printf_i+0x1f2>
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	b004      	add	sp, #16
 800696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	f043 0320 	orr.w	r3, r3, #32
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	4833      	ldr	r0, [pc, #204]	@ (8006a48 <_printf_i+0x23c>)
 800697c:	2778      	movs	r7, #120	@ 0x78
 800697e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	6831      	ldr	r1, [r6, #0]
 8006986:	061f      	lsls	r7, r3, #24
 8006988:	f851 5b04 	ldr.w	r5, [r1], #4
 800698c:	d402      	bmi.n	8006994 <_printf_i+0x188>
 800698e:	065f      	lsls	r7, r3, #25
 8006990:	bf48      	it	mi
 8006992:	b2ad      	uxthmi	r5, r5
 8006994:	6031      	str	r1, [r6, #0]
 8006996:	07d9      	lsls	r1, r3, #31
 8006998:	bf44      	itt	mi
 800699a:	f043 0320 	orrmi.w	r3, r3, #32
 800699e:	6023      	strmi	r3, [r4, #0]
 80069a0:	b11d      	cbz	r5, 80069aa <_printf_i+0x19e>
 80069a2:	2310      	movs	r3, #16
 80069a4:	e7ac      	b.n	8006900 <_printf_i+0xf4>
 80069a6:	4827      	ldr	r0, [pc, #156]	@ (8006a44 <_printf_i+0x238>)
 80069a8:	e7e9      	b.n	800697e <_printf_i+0x172>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	f023 0320 	bic.w	r3, r3, #32
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	e7f6      	b.n	80069a2 <_printf_i+0x196>
 80069b4:	4616      	mov	r6, r2
 80069b6:	e7bd      	b.n	8006934 <_printf_i+0x128>
 80069b8:	6833      	ldr	r3, [r6, #0]
 80069ba:	6825      	ldr	r5, [r4, #0]
 80069bc:	6961      	ldr	r1, [r4, #20]
 80069be:	1d18      	adds	r0, r3, #4
 80069c0:	6030      	str	r0, [r6, #0]
 80069c2:	062e      	lsls	r6, r5, #24
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	d501      	bpl.n	80069cc <_printf_i+0x1c0>
 80069c8:	6019      	str	r1, [r3, #0]
 80069ca:	e002      	b.n	80069d2 <_printf_i+0x1c6>
 80069cc:	0668      	lsls	r0, r5, #25
 80069ce:	d5fb      	bpl.n	80069c8 <_printf_i+0x1bc>
 80069d0:	8019      	strh	r1, [r3, #0]
 80069d2:	2300      	movs	r3, #0
 80069d4:	6123      	str	r3, [r4, #16]
 80069d6:	4616      	mov	r6, r2
 80069d8:	e7bc      	b.n	8006954 <_printf_i+0x148>
 80069da:	6833      	ldr	r3, [r6, #0]
 80069dc:	1d1a      	adds	r2, r3, #4
 80069de:	6032      	str	r2, [r6, #0]
 80069e0:	681e      	ldr	r6, [r3, #0]
 80069e2:	6862      	ldr	r2, [r4, #4]
 80069e4:	2100      	movs	r1, #0
 80069e6:	4630      	mov	r0, r6
 80069e8:	f7f9 fc12 	bl	8000210 <memchr>
 80069ec:	b108      	cbz	r0, 80069f2 <_printf_i+0x1e6>
 80069ee:	1b80      	subs	r0, r0, r6
 80069f0:	6060      	str	r0, [r4, #4]
 80069f2:	6863      	ldr	r3, [r4, #4]
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	2300      	movs	r3, #0
 80069f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069fc:	e7aa      	b.n	8006954 <_printf_i+0x148>
 80069fe:	6923      	ldr	r3, [r4, #16]
 8006a00:	4632      	mov	r2, r6
 8006a02:	4649      	mov	r1, r9
 8006a04:	4640      	mov	r0, r8
 8006a06:	47d0      	blx	sl
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d0ad      	beq.n	8006968 <_printf_i+0x15c>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	079b      	lsls	r3, r3, #30
 8006a10:	d413      	bmi.n	8006a3a <_printf_i+0x22e>
 8006a12:	68e0      	ldr	r0, [r4, #12]
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	4298      	cmp	r0, r3
 8006a18:	bfb8      	it	lt
 8006a1a:	4618      	movlt	r0, r3
 8006a1c:	e7a6      	b.n	800696c <_printf_i+0x160>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	4632      	mov	r2, r6
 8006a22:	4649      	mov	r1, r9
 8006a24:	4640      	mov	r0, r8
 8006a26:	47d0      	blx	sl
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d09d      	beq.n	8006968 <_printf_i+0x15c>
 8006a2c:	3501      	adds	r5, #1
 8006a2e:	68e3      	ldr	r3, [r4, #12]
 8006a30:	9903      	ldr	r1, [sp, #12]
 8006a32:	1a5b      	subs	r3, r3, r1
 8006a34:	42ab      	cmp	r3, r5
 8006a36:	dcf2      	bgt.n	8006a1e <_printf_i+0x212>
 8006a38:	e7eb      	b.n	8006a12 <_printf_i+0x206>
 8006a3a:	2500      	movs	r5, #0
 8006a3c:	f104 0619 	add.w	r6, r4, #25
 8006a40:	e7f5      	b.n	8006a2e <_printf_i+0x222>
 8006a42:	bf00      	nop
 8006a44:	08008eda 	.word	0x08008eda
 8006a48:	08008eeb 	.word	0x08008eeb

08006a4c <std>:
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	b510      	push	{r4, lr}
 8006a50:	4604      	mov	r4, r0
 8006a52:	e9c0 3300 	strd	r3, r3, [r0]
 8006a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a5a:	6083      	str	r3, [r0, #8]
 8006a5c:	8181      	strh	r1, [r0, #12]
 8006a5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a60:	81c2      	strh	r2, [r0, #14]
 8006a62:	6183      	str	r3, [r0, #24]
 8006a64:	4619      	mov	r1, r3
 8006a66:	2208      	movs	r2, #8
 8006a68:	305c      	adds	r0, #92	@ 0x5c
 8006a6a:	f000 f928 	bl	8006cbe <memset>
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa4 <std+0x58>)
 8006a70:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a72:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa8 <std+0x5c>)
 8006a74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a76:	4b0d      	ldr	r3, [pc, #52]	@ (8006aac <std+0x60>)
 8006a78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab0 <std+0x64>)
 8006a7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab4 <std+0x68>)
 8006a80:	6224      	str	r4, [r4, #32]
 8006a82:	429c      	cmp	r4, r3
 8006a84:	d006      	beq.n	8006a94 <std+0x48>
 8006a86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a8a:	4294      	cmp	r4, r2
 8006a8c:	d002      	beq.n	8006a94 <std+0x48>
 8006a8e:	33d0      	adds	r3, #208	@ 0xd0
 8006a90:	429c      	cmp	r4, r3
 8006a92:	d105      	bne.n	8006aa0 <std+0x54>
 8006a94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a9c:	f000 b98c 	b.w	8006db8 <__retarget_lock_init_recursive>
 8006aa0:	bd10      	pop	{r4, pc}
 8006aa2:	bf00      	nop
 8006aa4:	08006c39 	.word	0x08006c39
 8006aa8:	08006c5b 	.word	0x08006c5b
 8006aac:	08006c93 	.word	0x08006c93
 8006ab0:	08006cb7 	.word	0x08006cb7
 8006ab4:	20000850 	.word	0x20000850

08006ab8 <stdio_exit_handler>:
 8006ab8:	4a02      	ldr	r2, [pc, #8]	@ (8006ac4 <stdio_exit_handler+0xc>)
 8006aba:	4903      	ldr	r1, [pc, #12]	@ (8006ac8 <stdio_exit_handler+0x10>)
 8006abc:	4803      	ldr	r0, [pc, #12]	@ (8006acc <stdio_exit_handler+0x14>)
 8006abe:	f000 b869 	b.w	8006b94 <_fwalk_sglue>
 8006ac2:	bf00      	nop
 8006ac4:	2000000c 	.word	0x2000000c
 8006ac8:	08008715 	.word	0x08008715
 8006acc:	2000001c 	.word	0x2000001c

08006ad0 <cleanup_stdio>:
 8006ad0:	6841      	ldr	r1, [r0, #4]
 8006ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8006b04 <cleanup_stdio+0x34>)
 8006ad4:	4299      	cmp	r1, r3
 8006ad6:	b510      	push	{r4, lr}
 8006ad8:	4604      	mov	r4, r0
 8006ada:	d001      	beq.n	8006ae0 <cleanup_stdio+0x10>
 8006adc:	f001 fe1a 	bl	8008714 <_fflush_r>
 8006ae0:	68a1      	ldr	r1, [r4, #8]
 8006ae2:	4b09      	ldr	r3, [pc, #36]	@ (8006b08 <cleanup_stdio+0x38>)
 8006ae4:	4299      	cmp	r1, r3
 8006ae6:	d002      	beq.n	8006aee <cleanup_stdio+0x1e>
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f001 fe13 	bl	8008714 <_fflush_r>
 8006aee:	68e1      	ldr	r1, [r4, #12]
 8006af0:	4b06      	ldr	r3, [pc, #24]	@ (8006b0c <cleanup_stdio+0x3c>)
 8006af2:	4299      	cmp	r1, r3
 8006af4:	d004      	beq.n	8006b00 <cleanup_stdio+0x30>
 8006af6:	4620      	mov	r0, r4
 8006af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006afc:	f001 be0a 	b.w	8008714 <_fflush_r>
 8006b00:	bd10      	pop	{r4, pc}
 8006b02:	bf00      	nop
 8006b04:	20000850 	.word	0x20000850
 8006b08:	200008b8 	.word	0x200008b8
 8006b0c:	20000920 	.word	0x20000920

08006b10 <global_stdio_init.part.0>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	4b0b      	ldr	r3, [pc, #44]	@ (8006b40 <global_stdio_init.part.0+0x30>)
 8006b14:	4c0b      	ldr	r4, [pc, #44]	@ (8006b44 <global_stdio_init.part.0+0x34>)
 8006b16:	4a0c      	ldr	r2, [pc, #48]	@ (8006b48 <global_stdio_init.part.0+0x38>)
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2104      	movs	r1, #4
 8006b20:	f7ff ff94 	bl	8006a4c <std>
 8006b24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b28:	2201      	movs	r2, #1
 8006b2a:	2109      	movs	r1, #9
 8006b2c:	f7ff ff8e 	bl	8006a4c <std>
 8006b30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b34:	2202      	movs	r2, #2
 8006b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b3a:	2112      	movs	r1, #18
 8006b3c:	f7ff bf86 	b.w	8006a4c <std>
 8006b40:	20000988 	.word	0x20000988
 8006b44:	20000850 	.word	0x20000850
 8006b48:	08006ab9 	.word	0x08006ab9

08006b4c <__sfp_lock_acquire>:
 8006b4c:	4801      	ldr	r0, [pc, #4]	@ (8006b54 <__sfp_lock_acquire+0x8>)
 8006b4e:	f000 b934 	b.w	8006dba <__retarget_lock_acquire_recursive>
 8006b52:	bf00      	nop
 8006b54:	20000991 	.word	0x20000991

08006b58 <__sfp_lock_release>:
 8006b58:	4801      	ldr	r0, [pc, #4]	@ (8006b60 <__sfp_lock_release+0x8>)
 8006b5a:	f000 b92f 	b.w	8006dbc <__retarget_lock_release_recursive>
 8006b5e:	bf00      	nop
 8006b60:	20000991 	.word	0x20000991

08006b64 <__sinit>:
 8006b64:	b510      	push	{r4, lr}
 8006b66:	4604      	mov	r4, r0
 8006b68:	f7ff fff0 	bl	8006b4c <__sfp_lock_acquire>
 8006b6c:	6a23      	ldr	r3, [r4, #32]
 8006b6e:	b11b      	cbz	r3, 8006b78 <__sinit+0x14>
 8006b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b74:	f7ff bff0 	b.w	8006b58 <__sfp_lock_release>
 8006b78:	4b04      	ldr	r3, [pc, #16]	@ (8006b8c <__sinit+0x28>)
 8006b7a:	6223      	str	r3, [r4, #32]
 8006b7c:	4b04      	ldr	r3, [pc, #16]	@ (8006b90 <__sinit+0x2c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1f5      	bne.n	8006b70 <__sinit+0xc>
 8006b84:	f7ff ffc4 	bl	8006b10 <global_stdio_init.part.0>
 8006b88:	e7f2      	b.n	8006b70 <__sinit+0xc>
 8006b8a:	bf00      	nop
 8006b8c:	08006ad1 	.word	0x08006ad1
 8006b90:	20000988 	.word	0x20000988

08006b94 <_fwalk_sglue>:
 8006b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b98:	4607      	mov	r7, r0
 8006b9a:	4688      	mov	r8, r1
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ba4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ba8:	d505      	bpl.n	8006bb6 <_fwalk_sglue+0x22>
 8006baa:	6824      	ldr	r4, [r4, #0]
 8006bac:	2c00      	cmp	r4, #0
 8006bae:	d1f7      	bne.n	8006ba0 <_fwalk_sglue+0xc>
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bb6:	89ab      	ldrh	r3, [r5, #12]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d907      	bls.n	8006bcc <_fwalk_sglue+0x38>
 8006bbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	d003      	beq.n	8006bcc <_fwalk_sglue+0x38>
 8006bc4:	4629      	mov	r1, r5
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	47c0      	blx	r8
 8006bca:	4306      	orrs	r6, r0
 8006bcc:	3568      	adds	r5, #104	@ 0x68
 8006bce:	e7e9      	b.n	8006ba4 <_fwalk_sglue+0x10>

08006bd0 <sniprintf>:
 8006bd0:	b40c      	push	{r2, r3}
 8006bd2:	b530      	push	{r4, r5, lr}
 8006bd4:	4b17      	ldr	r3, [pc, #92]	@ (8006c34 <sniprintf+0x64>)
 8006bd6:	1e0c      	subs	r4, r1, #0
 8006bd8:	681d      	ldr	r5, [r3, #0]
 8006bda:	b09d      	sub	sp, #116	@ 0x74
 8006bdc:	da08      	bge.n	8006bf0 <sniprintf+0x20>
 8006bde:	238b      	movs	r3, #139	@ 0x8b
 8006be0:	602b      	str	r3, [r5, #0]
 8006be2:	f04f 30ff 	mov.w	r0, #4294967295
 8006be6:	b01d      	add	sp, #116	@ 0x74
 8006be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bec:	b002      	add	sp, #8
 8006bee:	4770      	bx	lr
 8006bf0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006bf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006bf8:	bf14      	ite	ne
 8006bfa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006bfe:	4623      	moveq	r3, r4
 8006c00:	9304      	str	r3, [sp, #16]
 8006c02:	9307      	str	r3, [sp, #28]
 8006c04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c08:	9002      	str	r0, [sp, #8]
 8006c0a:	9006      	str	r0, [sp, #24]
 8006c0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c12:	ab21      	add	r3, sp, #132	@ 0x84
 8006c14:	a902      	add	r1, sp, #8
 8006c16:	4628      	mov	r0, r5
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	f001 fbfb 	bl	8008414 <_svfiprintf_r>
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	bfbc      	itt	lt
 8006c22:	238b      	movlt	r3, #139	@ 0x8b
 8006c24:	602b      	strlt	r3, [r5, #0]
 8006c26:	2c00      	cmp	r4, #0
 8006c28:	d0dd      	beq.n	8006be6 <sniprintf+0x16>
 8006c2a:	9b02      	ldr	r3, [sp, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	e7d9      	b.n	8006be6 <sniprintf+0x16>
 8006c32:	bf00      	nop
 8006c34:	20000018 	.word	0x20000018

08006c38 <__sread>:
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c40:	f000 f86c 	bl	8006d1c <_read_r>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	bfab      	itete	ge
 8006c48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8006c4c:	181b      	addge	r3, r3, r0
 8006c4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c52:	bfac      	ite	ge
 8006c54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c56:	81a3      	strhlt	r3, [r4, #12]
 8006c58:	bd10      	pop	{r4, pc}

08006c5a <__swrite>:
 8006c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5e:	461f      	mov	r7, r3
 8006c60:	898b      	ldrh	r3, [r1, #12]
 8006c62:	05db      	lsls	r3, r3, #23
 8006c64:	4605      	mov	r5, r0
 8006c66:	460c      	mov	r4, r1
 8006c68:	4616      	mov	r6, r2
 8006c6a:	d505      	bpl.n	8006c78 <__swrite+0x1e>
 8006c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c70:	2302      	movs	r3, #2
 8006c72:	2200      	movs	r2, #0
 8006c74:	f000 f840 	bl	8006cf8 <_lseek_r>
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c82:	81a3      	strh	r3, [r4, #12]
 8006c84:	4632      	mov	r2, r6
 8006c86:	463b      	mov	r3, r7
 8006c88:	4628      	mov	r0, r5
 8006c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c8e:	f000 b857 	b.w	8006d40 <_write_r>

08006c92 <__sseek>:
 8006c92:	b510      	push	{r4, lr}
 8006c94:	460c      	mov	r4, r1
 8006c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c9a:	f000 f82d 	bl	8006cf8 <_lseek_r>
 8006c9e:	1c43      	adds	r3, r0, #1
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	bf15      	itete	ne
 8006ca4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ca6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006caa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cae:	81a3      	strheq	r3, [r4, #12]
 8006cb0:	bf18      	it	ne
 8006cb2:	81a3      	strhne	r3, [r4, #12]
 8006cb4:	bd10      	pop	{r4, pc}

08006cb6 <__sclose>:
 8006cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cba:	f000 b80d 	b.w	8006cd8 <_close_r>

08006cbe <memset>:
 8006cbe:	4402      	add	r2, r0
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d100      	bne.n	8006cc8 <memset+0xa>
 8006cc6:	4770      	bx	lr
 8006cc8:	f803 1b01 	strb.w	r1, [r3], #1
 8006ccc:	e7f9      	b.n	8006cc2 <memset+0x4>
	...

08006cd0 <_localeconv_r>:
 8006cd0:	4800      	ldr	r0, [pc, #0]	@ (8006cd4 <_localeconv_r+0x4>)
 8006cd2:	4770      	bx	lr
 8006cd4:	20000158 	.word	0x20000158

08006cd8 <_close_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4d06      	ldr	r5, [pc, #24]	@ (8006cf4 <_close_r+0x1c>)
 8006cdc:	2300      	movs	r3, #0
 8006cde:	4604      	mov	r4, r0
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	f7fb f923 	bl	8001f2e <_close>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d102      	bne.n	8006cf2 <_close_r+0x1a>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	b103      	cbz	r3, 8006cf2 <_close_r+0x1a>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	2000098c 	.word	0x2000098c

08006cf8 <_lseek_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4d07      	ldr	r5, [pc, #28]	@ (8006d18 <_lseek_r+0x20>)
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	4608      	mov	r0, r1
 8006d00:	4611      	mov	r1, r2
 8006d02:	2200      	movs	r2, #0
 8006d04:	602a      	str	r2, [r5, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	f7fb f938 	bl	8001f7c <_lseek>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d102      	bne.n	8006d16 <_lseek_r+0x1e>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	b103      	cbz	r3, 8006d16 <_lseek_r+0x1e>
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	2000098c 	.word	0x2000098c

08006d1c <_read_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4d07      	ldr	r5, [pc, #28]	@ (8006d3c <_read_r+0x20>)
 8006d20:	4604      	mov	r4, r0
 8006d22:	4608      	mov	r0, r1
 8006d24:	4611      	mov	r1, r2
 8006d26:	2200      	movs	r2, #0
 8006d28:	602a      	str	r2, [r5, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f7fb f8c6 	bl	8001ebc <_read>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d102      	bne.n	8006d3a <_read_r+0x1e>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	b103      	cbz	r3, 8006d3a <_read_r+0x1e>
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	2000098c 	.word	0x2000098c

08006d40 <_write_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4d07      	ldr	r5, [pc, #28]	@ (8006d60 <_write_r+0x20>)
 8006d44:	4604      	mov	r4, r0
 8006d46:	4608      	mov	r0, r1
 8006d48:	4611      	mov	r1, r2
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	602a      	str	r2, [r5, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f7fb f8d1 	bl	8001ef6 <_write>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d102      	bne.n	8006d5e <_write_r+0x1e>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	b103      	cbz	r3, 8006d5e <_write_r+0x1e>
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	2000098c 	.word	0x2000098c

08006d64 <__errno>:
 8006d64:	4b01      	ldr	r3, [pc, #4]	@ (8006d6c <__errno+0x8>)
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000018 	.word	0x20000018

08006d70 <__libc_init_array>:
 8006d70:	b570      	push	{r4, r5, r6, lr}
 8006d72:	4d0d      	ldr	r5, [pc, #52]	@ (8006da8 <__libc_init_array+0x38>)
 8006d74:	4c0d      	ldr	r4, [pc, #52]	@ (8006dac <__libc_init_array+0x3c>)
 8006d76:	1b64      	subs	r4, r4, r5
 8006d78:	10a4      	asrs	r4, r4, #2
 8006d7a:	2600      	movs	r6, #0
 8006d7c:	42a6      	cmp	r6, r4
 8006d7e:	d109      	bne.n	8006d94 <__libc_init_array+0x24>
 8006d80:	4d0b      	ldr	r5, [pc, #44]	@ (8006db0 <__libc_init_array+0x40>)
 8006d82:	4c0c      	ldr	r4, [pc, #48]	@ (8006db4 <__libc_init_array+0x44>)
 8006d84:	f002 f864 	bl	8008e50 <_init>
 8006d88:	1b64      	subs	r4, r4, r5
 8006d8a:	10a4      	asrs	r4, r4, #2
 8006d8c:	2600      	movs	r6, #0
 8006d8e:	42a6      	cmp	r6, r4
 8006d90:	d105      	bne.n	8006d9e <__libc_init_array+0x2e>
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d98:	4798      	blx	r3
 8006d9a:	3601      	adds	r6, #1
 8006d9c:	e7ee      	b.n	8006d7c <__libc_init_array+0xc>
 8006d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da2:	4798      	blx	r3
 8006da4:	3601      	adds	r6, #1
 8006da6:	e7f2      	b.n	8006d8e <__libc_init_array+0x1e>
 8006da8:	08009240 	.word	0x08009240
 8006dac:	08009240 	.word	0x08009240
 8006db0:	08009240 	.word	0x08009240
 8006db4:	08009244 	.word	0x08009244

08006db8 <__retarget_lock_init_recursive>:
 8006db8:	4770      	bx	lr

08006dba <__retarget_lock_acquire_recursive>:
 8006dba:	4770      	bx	lr

08006dbc <__retarget_lock_release_recursive>:
 8006dbc:	4770      	bx	lr

08006dbe <quorem>:
 8006dbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc2:	6903      	ldr	r3, [r0, #16]
 8006dc4:	690c      	ldr	r4, [r1, #16]
 8006dc6:	42a3      	cmp	r3, r4
 8006dc8:	4607      	mov	r7, r0
 8006dca:	db7e      	blt.n	8006eca <quorem+0x10c>
 8006dcc:	3c01      	subs	r4, #1
 8006dce:	f101 0814 	add.w	r8, r1, #20
 8006dd2:	00a3      	lsls	r3, r4, #2
 8006dd4:	f100 0514 	add.w	r5, r0, #20
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006de4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006de8:	3301      	adds	r3, #1
 8006dea:	429a      	cmp	r2, r3
 8006dec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006df0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006df4:	d32e      	bcc.n	8006e54 <quorem+0x96>
 8006df6:	f04f 0a00 	mov.w	sl, #0
 8006dfa:	46c4      	mov	ip, r8
 8006dfc:	46ae      	mov	lr, r5
 8006dfe:	46d3      	mov	fp, sl
 8006e00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e04:	b298      	uxth	r0, r3
 8006e06:	fb06 a000 	mla	r0, r6, r0, sl
 8006e0a:	0c02      	lsrs	r2, r0, #16
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	fb06 2303 	mla	r3, r6, r3, r2
 8006e12:	f8de 2000 	ldr.w	r2, [lr]
 8006e16:	b280      	uxth	r0, r0
 8006e18:	b292      	uxth	r2, r2
 8006e1a:	1a12      	subs	r2, r2, r0
 8006e1c:	445a      	add	r2, fp
 8006e1e:	f8de 0000 	ldr.w	r0, [lr]
 8006e22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e2c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e30:	b292      	uxth	r2, r2
 8006e32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e36:	45e1      	cmp	r9, ip
 8006e38:	f84e 2b04 	str.w	r2, [lr], #4
 8006e3c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e40:	d2de      	bcs.n	8006e00 <quorem+0x42>
 8006e42:	9b00      	ldr	r3, [sp, #0]
 8006e44:	58eb      	ldr	r3, [r5, r3]
 8006e46:	b92b      	cbnz	r3, 8006e54 <quorem+0x96>
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	3b04      	subs	r3, #4
 8006e4c:	429d      	cmp	r5, r3
 8006e4e:	461a      	mov	r2, r3
 8006e50:	d32f      	bcc.n	8006eb2 <quorem+0xf4>
 8006e52:	613c      	str	r4, [r7, #16]
 8006e54:	4638      	mov	r0, r7
 8006e56:	f001 f979 	bl	800814c <__mcmp>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	db25      	blt.n	8006eaa <quorem+0xec>
 8006e5e:	4629      	mov	r1, r5
 8006e60:	2000      	movs	r0, #0
 8006e62:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e66:	f8d1 c000 	ldr.w	ip, [r1]
 8006e6a:	fa1f fe82 	uxth.w	lr, r2
 8006e6e:	fa1f f38c 	uxth.w	r3, ip
 8006e72:	eba3 030e 	sub.w	r3, r3, lr
 8006e76:	4403      	add	r3, r0
 8006e78:	0c12      	lsrs	r2, r2, #16
 8006e7a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e7e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e88:	45c1      	cmp	r9, r8
 8006e8a:	f841 3b04 	str.w	r3, [r1], #4
 8006e8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e92:	d2e6      	bcs.n	8006e62 <quorem+0xa4>
 8006e94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e9c:	b922      	cbnz	r2, 8006ea8 <quorem+0xea>
 8006e9e:	3b04      	subs	r3, #4
 8006ea0:	429d      	cmp	r5, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	d30b      	bcc.n	8006ebe <quorem+0x100>
 8006ea6:	613c      	str	r4, [r7, #16]
 8006ea8:	3601      	adds	r6, #1
 8006eaa:	4630      	mov	r0, r6
 8006eac:	b003      	add	sp, #12
 8006eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	3b04      	subs	r3, #4
 8006eb6:	2a00      	cmp	r2, #0
 8006eb8:	d1cb      	bne.n	8006e52 <quorem+0x94>
 8006eba:	3c01      	subs	r4, #1
 8006ebc:	e7c6      	b.n	8006e4c <quorem+0x8e>
 8006ebe:	6812      	ldr	r2, [r2, #0]
 8006ec0:	3b04      	subs	r3, #4
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	d1ef      	bne.n	8006ea6 <quorem+0xe8>
 8006ec6:	3c01      	subs	r4, #1
 8006ec8:	e7ea      	b.n	8006ea0 <quorem+0xe2>
 8006eca:	2000      	movs	r0, #0
 8006ecc:	e7ee      	b.n	8006eac <quorem+0xee>
	...

08006ed0 <_dtoa_r>:
 8006ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	69c7      	ldr	r7, [r0, #28]
 8006ed6:	b099      	sub	sp, #100	@ 0x64
 8006ed8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006edc:	ec55 4b10 	vmov	r4, r5, d0
 8006ee0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006ee2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ee4:	4683      	mov	fp, r0
 8006ee6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ee8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006eea:	b97f      	cbnz	r7, 8006f0c <_dtoa_r+0x3c>
 8006eec:	2010      	movs	r0, #16
 8006eee:	f000 fdfd 	bl	8007aec <malloc>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ef8:	b920      	cbnz	r0, 8006f04 <_dtoa_r+0x34>
 8006efa:	4ba7      	ldr	r3, [pc, #668]	@ (8007198 <_dtoa_r+0x2c8>)
 8006efc:	21ef      	movs	r1, #239	@ 0xef
 8006efe:	48a7      	ldr	r0, [pc, #668]	@ (800719c <_dtoa_r+0x2cc>)
 8006f00:	f001 fc68 	bl	80087d4 <__assert_func>
 8006f04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f08:	6007      	str	r7, [r0, #0]
 8006f0a:	60c7      	str	r7, [r0, #12]
 8006f0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f10:	6819      	ldr	r1, [r3, #0]
 8006f12:	b159      	cbz	r1, 8006f2c <_dtoa_r+0x5c>
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	604a      	str	r2, [r1, #4]
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4093      	lsls	r3, r2
 8006f1c:	608b      	str	r3, [r1, #8]
 8006f1e:	4658      	mov	r0, fp
 8006f20:	f000 feda 	bl	8007cd8 <_Bfree>
 8006f24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	1e2b      	subs	r3, r5, #0
 8006f2e:	bfb9      	ittee	lt
 8006f30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f34:	9303      	strlt	r3, [sp, #12]
 8006f36:	2300      	movge	r3, #0
 8006f38:	6033      	strge	r3, [r6, #0]
 8006f3a:	9f03      	ldr	r7, [sp, #12]
 8006f3c:	4b98      	ldr	r3, [pc, #608]	@ (80071a0 <_dtoa_r+0x2d0>)
 8006f3e:	bfbc      	itt	lt
 8006f40:	2201      	movlt	r2, #1
 8006f42:	6032      	strlt	r2, [r6, #0]
 8006f44:	43bb      	bics	r3, r7
 8006f46:	d112      	bne.n	8006f6e <_dtoa_r+0x9e>
 8006f48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f54:	4323      	orrs	r3, r4
 8006f56:	f000 854d 	beq.w	80079f4 <_dtoa_r+0xb24>
 8006f5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80071b4 <_dtoa_r+0x2e4>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 854f 	beq.w	8007a04 <_dtoa_r+0xb34>
 8006f66:	f10a 0303 	add.w	r3, sl, #3
 8006f6a:	f000 bd49 	b.w	8007a00 <_dtoa_r+0xb30>
 8006f6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f72:	2200      	movs	r2, #0
 8006f74:	ec51 0b17 	vmov	r0, r1, d7
 8006f78:	2300      	movs	r3, #0
 8006f7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006f7e:	f7f9 fdc3 	bl	8000b08 <__aeabi_dcmpeq>
 8006f82:	4680      	mov	r8, r0
 8006f84:	b158      	cbz	r0, 8006f9e <_dtoa_r+0xce>
 8006f86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f88:	2301      	movs	r3, #1
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f8e:	b113      	cbz	r3, 8006f96 <_dtoa_r+0xc6>
 8006f90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f92:	4b84      	ldr	r3, [pc, #528]	@ (80071a4 <_dtoa_r+0x2d4>)
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80071b8 <_dtoa_r+0x2e8>
 8006f9a:	f000 bd33 	b.w	8007a04 <_dtoa_r+0xb34>
 8006f9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006fa2:	aa16      	add	r2, sp, #88	@ 0x58
 8006fa4:	a917      	add	r1, sp, #92	@ 0x5c
 8006fa6:	4658      	mov	r0, fp
 8006fa8:	f001 f980 	bl	80082ac <__d2b>
 8006fac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006fb0:	4681      	mov	r9, r0
 8006fb2:	2e00      	cmp	r6, #0
 8006fb4:	d077      	beq.n	80070a6 <_dtoa_r+0x1d6>
 8006fb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006fc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006fcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	4b74      	ldr	r3, [pc, #464]	@ (80071a8 <_dtoa_r+0x2d8>)
 8006fd6:	f7f9 f977 	bl	80002c8 <__aeabi_dsub>
 8006fda:	a369      	add	r3, pc, #420	@ (adr r3, 8007180 <_dtoa_r+0x2b0>)
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f7f9 fb2a 	bl	8000638 <__aeabi_dmul>
 8006fe4:	a368      	add	r3, pc, #416	@ (adr r3, 8007188 <_dtoa_r+0x2b8>)
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	f7f9 f96f 	bl	80002cc <__adddf3>
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	f7f9 fab6 	bl	8000564 <__aeabi_i2d>
 8006ff8:	a365      	add	r3, pc, #404	@ (adr r3, 8007190 <_dtoa_r+0x2c0>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f7f9 fb1b 	bl	8000638 <__aeabi_dmul>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4620      	mov	r0, r4
 8007008:	4629      	mov	r1, r5
 800700a:	f7f9 f95f 	bl	80002cc <__adddf3>
 800700e:	4604      	mov	r4, r0
 8007010:	460d      	mov	r5, r1
 8007012:	f7f9 fdc1 	bl	8000b98 <__aeabi_d2iz>
 8007016:	2200      	movs	r2, #0
 8007018:	4607      	mov	r7, r0
 800701a:	2300      	movs	r3, #0
 800701c:	4620      	mov	r0, r4
 800701e:	4629      	mov	r1, r5
 8007020:	f7f9 fd7c 	bl	8000b1c <__aeabi_dcmplt>
 8007024:	b140      	cbz	r0, 8007038 <_dtoa_r+0x168>
 8007026:	4638      	mov	r0, r7
 8007028:	f7f9 fa9c 	bl	8000564 <__aeabi_i2d>
 800702c:	4622      	mov	r2, r4
 800702e:	462b      	mov	r3, r5
 8007030:	f7f9 fd6a 	bl	8000b08 <__aeabi_dcmpeq>
 8007034:	b900      	cbnz	r0, 8007038 <_dtoa_r+0x168>
 8007036:	3f01      	subs	r7, #1
 8007038:	2f16      	cmp	r7, #22
 800703a:	d851      	bhi.n	80070e0 <_dtoa_r+0x210>
 800703c:	4b5b      	ldr	r3, [pc, #364]	@ (80071ac <_dtoa_r+0x2dc>)
 800703e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800704a:	f7f9 fd67 	bl	8000b1c <__aeabi_dcmplt>
 800704e:	2800      	cmp	r0, #0
 8007050:	d048      	beq.n	80070e4 <_dtoa_r+0x214>
 8007052:	3f01      	subs	r7, #1
 8007054:	2300      	movs	r3, #0
 8007056:	9312      	str	r3, [sp, #72]	@ 0x48
 8007058:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800705a:	1b9b      	subs	r3, r3, r6
 800705c:	1e5a      	subs	r2, r3, #1
 800705e:	bf44      	itt	mi
 8007060:	f1c3 0801 	rsbmi	r8, r3, #1
 8007064:	2300      	movmi	r3, #0
 8007066:	9208      	str	r2, [sp, #32]
 8007068:	bf54      	ite	pl
 800706a:	f04f 0800 	movpl.w	r8, #0
 800706e:	9308      	strmi	r3, [sp, #32]
 8007070:	2f00      	cmp	r7, #0
 8007072:	db39      	blt.n	80070e8 <_dtoa_r+0x218>
 8007074:	9b08      	ldr	r3, [sp, #32]
 8007076:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007078:	443b      	add	r3, r7
 800707a:	9308      	str	r3, [sp, #32]
 800707c:	2300      	movs	r3, #0
 800707e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007082:	2b09      	cmp	r3, #9
 8007084:	d864      	bhi.n	8007150 <_dtoa_r+0x280>
 8007086:	2b05      	cmp	r3, #5
 8007088:	bfc4      	itt	gt
 800708a:	3b04      	subgt	r3, #4
 800708c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800708e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007090:	f1a3 0302 	sub.w	r3, r3, #2
 8007094:	bfcc      	ite	gt
 8007096:	2400      	movgt	r4, #0
 8007098:	2401      	movle	r4, #1
 800709a:	2b03      	cmp	r3, #3
 800709c:	d863      	bhi.n	8007166 <_dtoa_r+0x296>
 800709e:	e8df f003 	tbb	[pc, r3]
 80070a2:	372a      	.short	0x372a
 80070a4:	5535      	.short	0x5535
 80070a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80070aa:	441e      	add	r6, r3
 80070ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	bfc1      	itttt	gt
 80070b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80070b8:	409f      	lslgt	r7, r3
 80070ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80070be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80070c2:	bfd6      	itet	le
 80070c4:	f1c3 0320 	rsble	r3, r3, #32
 80070c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80070cc:	fa04 f003 	lslle.w	r0, r4, r3
 80070d0:	f7f9 fa38 	bl	8000544 <__aeabi_ui2d>
 80070d4:	2201      	movs	r2, #1
 80070d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80070da:	3e01      	subs	r6, #1
 80070dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80070de:	e777      	b.n	8006fd0 <_dtoa_r+0x100>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e7b8      	b.n	8007056 <_dtoa_r+0x186>
 80070e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80070e6:	e7b7      	b.n	8007058 <_dtoa_r+0x188>
 80070e8:	427b      	negs	r3, r7
 80070ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ec:	2300      	movs	r3, #0
 80070ee:	eba8 0807 	sub.w	r8, r8, r7
 80070f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070f4:	e7c4      	b.n	8007080 <_dtoa_r+0x1b0>
 80070f6:	2300      	movs	r3, #0
 80070f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	dc35      	bgt.n	800716c <_dtoa_r+0x29c>
 8007100:	2301      	movs	r3, #1
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	9307      	str	r3, [sp, #28]
 8007106:	461a      	mov	r2, r3
 8007108:	920e      	str	r2, [sp, #56]	@ 0x38
 800710a:	e00b      	b.n	8007124 <_dtoa_r+0x254>
 800710c:	2301      	movs	r3, #1
 800710e:	e7f3      	b.n	80070f8 <_dtoa_r+0x228>
 8007110:	2300      	movs	r3, #0
 8007112:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007116:	18fb      	adds	r3, r7, r3
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	3301      	adds	r3, #1
 800711c:	2b01      	cmp	r3, #1
 800711e:	9307      	str	r3, [sp, #28]
 8007120:	bfb8      	it	lt
 8007122:	2301      	movlt	r3, #1
 8007124:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007128:	2100      	movs	r1, #0
 800712a:	2204      	movs	r2, #4
 800712c:	f102 0514 	add.w	r5, r2, #20
 8007130:	429d      	cmp	r5, r3
 8007132:	d91f      	bls.n	8007174 <_dtoa_r+0x2a4>
 8007134:	6041      	str	r1, [r0, #4]
 8007136:	4658      	mov	r0, fp
 8007138:	f000 fd8e 	bl	8007c58 <_Balloc>
 800713c:	4682      	mov	sl, r0
 800713e:	2800      	cmp	r0, #0
 8007140:	d13c      	bne.n	80071bc <_dtoa_r+0x2ec>
 8007142:	4b1b      	ldr	r3, [pc, #108]	@ (80071b0 <_dtoa_r+0x2e0>)
 8007144:	4602      	mov	r2, r0
 8007146:	f240 11af 	movw	r1, #431	@ 0x1af
 800714a:	e6d8      	b.n	8006efe <_dtoa_r+0x2e>
 800714c:	2301      	movs	r3, #1
 800714e:	e7e0      	b.n	8007112 <_dtoa_r+0x242>
 8007150:	2401      	movs	r4, #1
 8007152:	2300      	movs	r3, #0
 8007154:	9309      	str	r3, [sp, #36]	@ 0x24
 8007156:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007158:	f04f 33ff 	mov.w	r3, #4294967295
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	9307      	str	r3, [sp, #28]
 8007160:	2200      	movs	r2, #0
 8007162:	2312      	movs	r3, #18
 8007164:	e7d0      	b.n	8007108 <_dtoa_r+0x238>
 8007166:	2301      	movs	r3, #1
 8007168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800716a:	e7f5      	b.n	8007158 <_dtoa_r+0x288>
 800716c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	9307      	str	r3, [sp, #28]
 8007172:	e7d7      	b.n	8007124 <_dtoa_r+0x254>
 8007174:	3101      	adds	r1, #1
 8007176:	0052      	lsls	r2, r2, #1
 8007178:	e7d8      	b.n	800712c <_dtoa_r+0x25c>
 800717a:	bf00      	nop
 800717c:	f3af 8000 	nop.w
 8007180:	636f4361 	.word	0x636f4361
 8007184:	3fd287a7 	.word	0x3fd287a7
 8007188:	8b60c8b3 	.word	0x8b60c8b3
 800718c:	3fc68a28 	.word	0x3fc68a28
 8007190:	509f79fb 	.word	0x509f79fb
 8007194:	3fd34413 	.word	0x3fd34413
 8007198:	08008f09 	.word	0x08008f09
 800719c:	08008f20 	.word	0x08008f20
 80071a0:	7ff00000 	.word	0x7ff00000
 80071a4:	08008ed9 	.word	0x08008ed9
 80071a8:	3ff80000 	.word	0x3ff80000
 80071ac:	08009018 	.word	0x08009018
 80071b0:	08008f78 	.word	0x08008f78
 80071b4:	08008f05 	.word	0x08008f05
 80071b8:	08008ed8 	.word	0x08008ed8
 80071bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071c0:	6018      	str	r0, [r3, #0]
 80071c2:	9b07      	ldr	r3, [sp, #28]
 80071c4:	2b0e      	cmp	r3, #14
 80071c6:	f200 80a4 	bhi.w	8007312 <_dtoa_r+0x442>
 80071ca:	2c00      	cmp	r4, #0
 80071cc:	f000 80a1 	beq.w	8007312 <_dtoa_r+0x442>
 80071d0:	2f00      	cmp	r7, #0
 80071d2:	dd33      	ble.n	800723c <_dtoa_r+0x36c>
 80071d4:	4bad      	ldr	r3, [pc, #692]	@ (800748c <_dtoa_r+0x5bc>)
 80071d6:	f007 020f 	and.w	r2, r7, #15
 80071da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071de:	ed93 7b00 	vldr	d7, [r3]
 80071e2:	05f8      	lsls	r0, r7, #23
 80071e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80071e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80071ec:	d516      	bpl.n	800721c <_dtoa_r+0x34c>
 80071ee:	4ba8      	ldr	r3, [pc, #672]	@ (8007490 <_dtoa_r+0x5c0>)
 80071f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071f8:	f7f9 fb48 	bl	800088c <__aeabi_ddiv>
 80071fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007200:	f004 040f 	and.w	r4, r4, #15
 8007204:	2603      	movs	r6, #3
 8007206:	4da2      	ldr	r5, [pc, #648]	@ (8007490 <_dtoa_r+0x5c0>)
 8007208:	b954      	cbnz	r4, 8007220 <_dtoa_r+0x350>
 800720a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800720e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007212:	f7f9 fb3b 	bl	800088c <__aeabi_ddiv>
 8007216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800721a:	e028      	b.n	800726e <_dtoa_r+0x39e>
 800721c:	2602      	movs	r6, #2
 800721e:	e7f2      	b.n	8007206 <_dtoa_r+0x336>
 8007220:	07e1      	lsls	r1, r4, #31
 8007222:	d508      	bpl.n	8007236 <_dtoa_r+0x366>
 8007224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007228:	e9d5 2300 	ldrd	r2, r3, [r5]
 800722c:	f7f9 fa04 	bl	8000638 <__aeabi_dmul>
 8007230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007234:	3601      	adds	r6, #1
 8007236:	1064      	asrs	r4, r4, #1
 8007238:	3508      	adds	r5, #8
 800723a:	e7e5      	b.n	8007208 <_dtoa_r+0x338>
 800723c:	f000 80d2 	beq.w	80073e4 <_dtoa_r+0x514>
 8007240:	427c      	negs	r4, r7
 8007242:	4b92      	ldr	r3, [pc, #584]	@ (800748c <_dtoa_r+0x5bc>)
 8007244:	4d92      	ldr	r5, [pc, #584]	@ (8007490 <_dtoa_r+0x5c0>)
 8007246:	f004 020f 	and.w	r2, r4, #15
 800724a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007256:	f7f9 f9ef 	bl	8000638 <__aeabi_dmul>
 800725a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800725e:	1124      	asrs	r4, r4, #4
 8007260:	2300      	movs	r3, #0
 8007262:	2602      	movs	r6, #2
 8007264:	2c00      	cmp	r4, #0
 8007266:	f040 80b2 	bne.w	80073ce <_dtoa_r+0x4fe>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1d3      	bne.n	8007216 <_dtoa_r+0x346>
 800726e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007270:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 80b7 	beq.w	80073e8 <_dtoa_r+0x518>
 800727a:	4b86      	ldr	r3, [pc, #536]	@ (8007494 <_dtoa_r+0x5c4>)
 800727c:	2200      	movs	r2, #0
 800727e:	4620      	mov	r0, r4
 8007280:	4629      	mov	r1, r5
 8007282:	f7f9 fc4b 	bl	8000b1c <__aeabi_dcmplt>
 8007286:	2800      	cmp	r0, #0
 8007288:	f000 80ae 	beq.w	80073e8 <_dtoa_r+0x518>
 800728c:	9b07      	ldr	r3, [sp, #28]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 80aa 	beq.w	80073e8 <_dtoa_r+0x518>
 8007294:	9b00      	ldr	r3, [sp, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	dd37      	ble.n	800730a <_dtoa_r+0x43a>
 800729a:	1e7b      	subs	r3, r7, #1
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	4620      	mov	r0, r4
 80072a0:	4b7d      	ldr	r3, [pc, #500]	@ (8007498 <_dtoa_r+0x5c8>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	4629      	mov	r1, r5
 80072a6:	f7f9 f9c7 	bl	8000638 <__aeabi_dmul>
 80072aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072ae:	9c00      	ldr	r4, [sp, #0]
 80072b0:	3601      	adds	r6, #1
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7f9 f956 	bl	8000564 <__aeabi_i2d>
 80072b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072bc:	f7f9 f9bc 	bl	8000638 <__aeabi_dmul>
 80072c0:	4b76      	ldr	r3, [pc, #472]	@ (800749c <_dtoa_r+0x5cc>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	f7f9 f802 	bl	80002cc <__adddf3>
 80072c8:	4605      	mov	r5, r0
 80072ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80072ce:	2c00      	cmp	r4, #0
 80072d0:	f040 808d 	bne.w	80073ee <_dtoa_r+0x51e>
 80072d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d8:	4b71      	ldr	r3, [pc, #452]	@ (80074a0 <_dtoa_r+0x5d0>)
 80072da:	2200      	movs	r2, #0
 80072dc:	f7f8 fff4 	bl	80002c8 <__aeabi_dsub>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072e8:	462a      	mov	r2, r5
 80072ea:	4633      	mov	r3, r6
 80072ec:	f7f9 fc34 	bl	8000b58 <__aeabi_dcmpgt>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	f040 828b 	bne.w	800780c <_dtoa_r+0x93c>
 80072f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072fa:	462a      	mov	r2, r5
 80072fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007300:	f7f9 fc0c 	bl	8000b1c <__aeabi_dcmplt>
 8007304:	2800      	cmp	r0, #0
 8007306:	f040 8128 	bne.w	800755a <_dtoa_r+0x68a>
 800730a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800730e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007312:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007314:	2b00      	cmp	r3, #0
 8007316:	f2c0 815a 	blt.w	80075ce <_dtoa_r+0x6fe>
 800731a:	2f0e      	cmp	r7, #14
 800731c:	f300 8157 	bgt.w	80075ce <_dtoa_r+0x6fe>
 8007320:	4b5a      	ldr	r3, [pc, #360]	@ (800748c <_dtoa_r+0x5bc>)
 8007322:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007326:	ed93 7b00 	vldr	d7, [r3]
 800732a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800732c:	2b00      	cmp	r3, #0
 800732e:	ed8d 7b00 	vstr	d7, [sp]
 8007332:	da03      	bge.n	800733c <_dtoa_r+0x46c>
 8007334:	9b07      	ldr	r3, [sp, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f340 8101 	ble.w	800753e <_dtoa_r+0x66e>
 800733c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007340:	4656      	mov	r6, sl
 8007342:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f7f9 fa9f 	bl	800088c <__aeabi_ddiv>
 800734e:	f7f9 fc23 	bl	8000b98 <__aeabi_d2iz>
 8007352:	4680      	mov	r8, r0
 8007354:	f7f9 f906 	bl	8000564 <__aeabi_i2d>
 8007358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800735c:	f7f9 f96c 	bl	8000638 <__aeabi_dmul>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	4620      	mov	r0, r4
 8007366:	4629      	mov	r1, r5
 8007368:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800736c:	f7f8 ffac 	bl	80002c8 <__aeabi_dsub>
 8007370:	f806 4b01 	strb.w	r4, [r6], #1
 8007374:	9d07      	ldr	r5, [sp, #28]
 8007376:	eba6 040a 	sub.w	r4, r6, sl
 800737a:	42a5      	cmp	r5, r4
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	f040 8117 	bne.w	80075b2 <_dtoa_r+0x6e2>
 8007384:	f7f8 ffa2 	bl	80002cc <__adddf3>
 8007388:	e9dd 2300 	ldrd	r2, r3, [sp]
 800738c:	4604      	mov	r4, r0
 800738e:	460d      	mov	r5, r1
 8007390:	f7f9 fbe2 	bl	8000b58 <__aeabi_dcmpgt>
 8007394:	2800      	cmp	r0, #0
 8007396:	f040 80f9 	bne.w	800758c <_dtoa_r+0x6bc>
 800739a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800739e:	4620      	mov	r0, r4
 80073a0:	4629      	mov	r1, r5
 80073a2:	f7f9 fbb1 	bl	8000b08 <__aeabi_dcmpeq>
 80073a6:	b118      	cbz	r0, 80073b0 <_dtoa_r+0x4e0>
 80073a8:	f018 0f01 	tst.w	r8, #1
 80073ac:	f040 80ee 	bne.w	800758c <_dtoa_r+0x6bc>
 80073b0:	4649      	mov	r1, r9
 80073b2:	4658      	mov	r0, fp
 80073b4:	f000 fc90 	bl	8007cd8 <_Bfree>
 80073b8:	2300      	movs	r3, #0
 80073ba:	7033      	strb	r3, [r6, #0]
 80073bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80073be:	3701      	adds	r7, #1
 80073c0:	601f      	str	r7, [r3, #0]
 80073c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 831d 	beq.w	8007a04 <_dtoa_r+0xb34>
 80073ca:	601e      	str	r6, [r3, #0]
 80073cc:	e31a      	b.n	8007a04 <_dtoa_r+0xb34>
 80073ce:	07e2      	lsls	r2, r4, #31
 80073d0:	d505      	bpl.n	80073de <_dtoa_r+0x50e>
 80073d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073d6:	f7f9 f92f 	bl	8000638 <__aeabi_dmul>
 80073da:	3601      	adds	r6, #1
 80073dc:	2301      	movs	r3, #1
 80073de:	1064      	asrs	r4, r4, #1
 80073e0:	3508      	adds	r5, #8
 80073e2:	e73f      	b.n	8007264 <_dtoa_r+0x394>
 80073e4:	2602      	movs	r6, #2
 80073e6:	e742      	b.n	800726e <_dtoa_r+0x39e>
 80073e8:	9c07      	ldr	r4, [sp, #28]
 80073ea:	9704      	str	r7, [sp, #16]
 80073ec:	e761      	b.n	80072b2 <_dtoa_r+0x3e2>
 80073ee:	4b27      	ldr	r3, [pc, #156]	@ (800748c <_dtoa_r+0x5bc>)
 80073f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073fa:	4454      	add	r4, sl
 80073fc:	2900      	cmp	r1, #0
 80073fe:	d053      	beq.n	80074a8 <_dtoa_r+0x5d8>
 8007400:	4928      	ldr	r1, [pc, #160]	@ (80074a4 <_dtoa_r+0x5d4>)
 8007402:	2000      	movs	r0, #0
 8007404:	f7f9 fa42 	bl	800088c <__aeabi_ddiv>
 8007408:	4633      	mov	r3, r6
 800740a:	462a      	mov	r2, r5
 800740c:	f7f8 ff5c 	bl	80002c8 <__aeabi_dsub>
 8007410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007414:	4656      	mov	r6, sl
 8007416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800741a:	f7f9 fbbd 	bl	8000b98 <__aeabi_d2iz>
 800741e:	4605      	mov	r5, r0
 8007420:	f7f9 f8a0 	bl	8000564 <__aeabi_i2d>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800742c:	f7f8 ff4c 	bl	80002c8 <__aeabi_dsub>
 8007430:	3530      	adds	r5, #48	@ 0x30
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800743a:	f806 5b01 	strb.w	r5, [r6], #1
 800743e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007442:	f7f9 fb6b 	bl	8000b1c <__aeabi_dcmplt>
 8007446:	2800      	cmp	r0, #0
 8007448:	d171      	bne.n	800752e <_dtoa_r+0x65e>
 800744a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800744e:	4911      	ldr	r1, [pc, #68]	@ (8007494 <_dtoa_r+0x5c4>)
 8007450:	2000      	movs	r0, #0
 8007452:	f7f8 ff39 	bl	80002c8 <__aeabi_dsub>
 8007456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800745a:	f7f9 fb5f 	bl	8000b1c <__aeabi_dcmplt>
 800745e:	2800      	cmp	r0, #0
 8007460:	f040 8095 	bne.w	800758e <_dtoa_r+0x6be>
 8007464:	42a6      	cmp	r6, r4
 8007466:	f43f af50 	beq.w	800730a <_dtoa_r+0x43a>
 800746a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800746e:	4b0a      	ldr	r3, [pc, #40]	@ (8007498 <_dtoa_r+0x5c8>)
 8007470:	2200      	movs	r2, #0
 8007472:	f7f9 f8e1 	bl	8000638 <__aeabi_dmul>
 8007476:	4b08      	ldr	r3, [pc, #32]	@ (8007498 <_dtoa_r+0x5c8>)
 8007478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800747c:	2200      	movs	r2, #0
 800747e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007482:	f7f9 f8d9 	bl	8000638 <__aeabi_dmul>
 8007486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800748a:	e7c4      	b.n	8007416 <_dtoa_r+0x546>
 800748c:	08009018 	.word	0x08009018
 8007490:	08008ff0 	.word	0x08008ff0
 8007494:	3ff00000 	.word	0x3ff00000
 8007498:	40240000 	.word	0x40240000
 800749c:	401c0000 	.word	0x401c0000
 80074a0:	40140000 	.word	0x40140000
 80074a4:	3fe00000 	.word	0x3fe00000
 80074a8:	4631      	mov	r1, r6
 80074aa:	4628      	mov	r0, r5
 80074ac:	f7f9 f8c4 	bl	8000638 <__aeabi_dmul>
 80074b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80074b6:	4656      	mov	r6, sl
 80074b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074bc:	f7f9 fb6c 	bl	8000b98 <__aeabi_d2iz>
 80074c0:	4605      	mov	r5, r0
 80074c2:	f7f9 f84f 	bl	8000564 <__aeabi_i2d>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ce:	f7f8 fefb 	bl	80002c8 <__aeabi_dsub>
 80074d2:	3530      	adds	r5, #48	@ 0x30
 80074d4:	f806 5b01 	strb.w	r5, [r6], #1
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	42a6      	cmp	r6, r4
 80074de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074e2:	f04f 0200 	mov.w	r2, #0
 80074e6:	d124      	bne.n	8007532 <_dtoa_r+0x662>
 80074e8:	4bac      	ldr	r3, [pc, #688]	@ (800779c <_dtoa_r+0x8cc>)
 80074ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074ee:	f7f8 feed 	bl	80002cc <__adddf3>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074fa:	f7f9 fb2d 	bl	8000b58 <__aeabi_dcmpgt>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d145      	bne.n	800758e <_dtoa_r+0x6be>
 8007502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007506:	49a5      	ldr	r1, [pc, #660]	@ (800779c <_dtoa_r+0x8cc>)
 8007508:	2000      	movs	r0, #0
 800750a:	f7f8 fedd 	bl	80002c8 <__aeabi_dsub>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007516:	f7f9 fb01 	bl	8000b1c <__aeabi_dcmplt>
 800751a:	2800      	cmp	r0, #0
 800751c:	f43f aef5 	beq.w	800730a <_dtoa_r+0x43a>
 8007520:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007522:	1e73      	subs	r3, r6, #1
 8007524:	9315      	str	r3, [sp, #84]	@ 0x54
 8007526:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800752a:	2b30      	cmp	r3, #48	@ 0x30
 800752c:	d0f8      	beq.n	8007520 <_dtoa_r+0x650>
 800752e:	9f04      	ldr	r7, [sp, #16]
 8007530:	e73e      	b.n	80073b0 <_dtoa_r+0x4e0>
 8007532:	4b9b      	ldr	r3, [pc, #620]	@ (80077a0 <_dtoa_r+0x8d0>)
 8007534:	f7f9 f880 	bl	8000638 <__aeabi_dmul>
 8007538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800753c:	e7bc      	b.n	80074b8 <_dtoa_r+0x5e8>
 800753e:	d10c      	bne.n	800755a <_dtoa_r+0x68a>
 8007540:	4b98      	ldr	r3, [pc, #608]	@ (80077a4 <_dtoa_r+0x8d4>)
 8007542:	2200      	movs	r2, #0
 8007544:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007548:	f7f9 f876 	bl	8000638 <__aeabi_dmul>
 800754c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007550:	f7f9 faf8 	bl	8000b44 <__aeabi_dcmpge>
 8007554:	2800      	cmp	r0, #0
 8007556:	f000 8157 	beq.w	8007808 <_dtoa_r+0x938>
 800755a:	2400      	movs	r4, #0
 800755c:	4625      	mov	r5, r4
 800755e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007560:	43db      	mvns	r3, r3
 8007562:	9304      	str	r3, [sp, #16]
 8007564:	4656      	mov	r6, sl
 8007566:	2700      	movs	r7, #0
 8007568:	4621      	mov	r1, r4
 800756a:	4658      	mov	r0, fp
 800756c:	f000 fbb4 	bl	8007cd8 <_Bfree>
 8007570:	2d00      	cmp	r5, #0
 8007572:	d0dc      	beq.n	800752e <_dtoa_r+0x65e>
 8007574:	b12f      	cbz	r7, 8007582 <_dtoa_r+0x6b2>
 8007576:	42af      	cmp	r7, r5
 8007578:	d003      	beq.n	8007582 <_dtoa_r+0x6b2>
 800757a:	4639      	mov	r1, r7
 800757c:	4658      	mov	r0, fp
 800757e:	f000 fbab 	bl	8007cd8 <_Bfree>
 8007582:	4629      	mov	r1, r5
 8007584:	4658      	mov	r0, fp
 8007586:	f000 fba7 	bl	8007cd8 <_Bfree>
 800758a:	e7d0      	b.n	800752e <_dtoa_r+0x65e>
 800758c:	9704      	str	r7, [sp, #16]
 800758e:	4633      	mov	r3, r6
 8007590:	461e      	mov	r6, r3
 8007592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007596:	2a39      	cmp	r2, #57	@ 0x39
 8007598:	d107      	bne.n	80075aa <_dtoa_r+0x6da>
 800759a:	459a      	cmp	sl, r3
 800759c:	d1f8      	bne.n	8007590 <_dtoa_r+0x6c0>
 800759e:	9a04      	ldr	r2, [sp, #16]
 80075a0:	3201      	adds	r2, #1
 80075a2:	9204      	str	r2, [sp, #16]
 80075a4:	2230      	movs	r2, #48	@ 0x30
 80075a6:	f88a 2000 	strb.w	r2, [sl]
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	3201      	adds	r2, #1
 80075ae:	701a      	strb	r2, [r3, #0]
 80075b0:	e7bd      	b.n	800752e <_dtoa_r+0x65e>
 80075b2:	4b7b      	ldr	r3, [pc, #492]	@ (80077a0 <_dtoa_r+0x8d0>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	f7f9 f83f 	bl	8000638 <__aeabi_dmul>
 80075ba:	2200      	movs	r2, #0
 80075bc:	2300      	movs	r3, #0
 80075be:	4604      	mov	r4, r0
 80075c0:	460d      	mov	r5, r1
 80075c2:	f7f9 faa1 	bl	8000b08 <__aeabi_dcmpeq>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f43f aebb 	beq.w	8007342 <_dtoa_r+0x472>
 80075cc:	e6f0      	b.n	80073b0 <_dtoa_r+0x4e0>
 80075ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80075d0:	2a00      	cmp	r2, #0
 80075d2:	f000 80db 	beq.w	800778c <_dtoa_r+0x8bc>
 80075d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075d8:	2a01      	cmp	r2, #1
 80075da:	f300 80bf 	bgt.w	800775c <_dtoa_r+0x88c>
 80075de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	f000 80b7 	beq.w	8007754 <_dtoa_r+0x884>
 80075e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80075ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075ec:	4646      	mov	r6, r8
 80075ee:	9a08      	ldr	r2, [sp, #32]
 80075f0:	2101      	movs	r1, #1
 80075f2:	441a      	add	r2, r3
 80075f4:	4658      	mov	r0, fp
 80075f6:	4498      	add	r8, r3
 80075f8:	9208      	str	r2, [sp, #32]
 80075fa:	f000 fc21 	bl	8007e40 <__i2b>
 80075fe:	4605      	mov	r5, r0
 8007600:	b15e      	cbz	r6, 800761a <_dtoa_r+0x74a>
 8007602:	9b08      	ldr	r3, [sp, #32]
 8007604:	2b00      	cmp	r3, #0
 8007606:	dd08      	ble.n	800761a <_dtoa_r+0x74a>
 8007608:	42b3      	cmp	r3, r6
 800760a:	9a08      	ldr	r2, [sp, #32]
 800760c:	bfa8      	it	ge
 800760e:	4633      	movge	r3, r6
 8007610:	eba8 0803 	sub.w	r8, r8, r3
 8007614:	1af6      	subs	r6, r6, r3
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	9308      	str	r3, [sp, #32]
 800761a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800761c:	b1f3      	cbz	r3, 800765c <_dtoa_r+0x78c>
 800761e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 80b7 	beq.w	8007794 <_dtoa_r+0x8c4>
 8007626:	b18c      	cbz	r4, 800764c <_dtoa_r+0x77c>
 8007628:	4629      	mov	r1, r5
 800762a:	4622      	mov	r2, r4
 800762c:	4658      	mov	r0, fp
 800762e:	f000 fcc7 	bl	8007fc0 <__pow5mult>
 8007632:	464a      	mov	r2, r9
 8007634:	4601      	mov	r1, r0
 8007636:	4605      	mov	r5, r0
 8007638:	4658      	mov	r0, fp
 800763a:	f000 fc17 	bl	8007e6c <__multiply>
 800763e:	4649      	mov	r1, r9
 8007640:	9004      	str	r0, [sp, #16]
 8007642:	4658      	mov	r0, fp
 8007644:	f000 fb48 	bl	8007cd8 <_Bfree>
 8007648:	9b04      	ldr	r3, [sp, #16]
 800764a:	4699      	mov	r9, r3
 800764c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800764e:	1b1a      	subs	r2, r3, r4
 8007650:	d004      	beq.n	800765c <_dtoa_r+0x78c>
 8007652:	4649      	mov	r1, r9
 8007654:	4658      	mov	r0, fp
 8007656:	f000 fcb3 	bl	8007fc0 <__pow5mult>
 800765a:	4681      	mov	r9, r0
 800765c:	2101      	movs	r1, #1
 800765e:	4658      	mov	r0, fp
 8007660:	f000 fbee 	bl	8007e40 <__i2b>
 8007664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007666:	4604      	mov	r4, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 81cf 	beq.w	8007a0c <_dtoa_r+0xb3c>
 800766e:	461a      	mov	r2, r3
 8007670:	4601      	mov	r1, r0
 8007672:	4658      	mov	r0, fp
 8007674:	f000 fca4 	bl	8007fc0 <__pow5mult>
 8007678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800767a:	2b01      	cmp	r3, #1
 800767c:	4604      	mov	r4, r0
 800767e:	f300 8095 	bgt.w	80077ac <_dtoa_r+0x8dc>
 8007682:	9b02      	ldr	r3, [sp, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f040 8087 	bne.w	8007798 <_dtoa_r+0x8c8>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007690:	2b00      	cmp	r3, #0
 8007692:	f040 8089 	bne.w	80077a8 <_dtoa_r+0x8d8>
 8007696:	9b03      	ldr	r3, [sp, #12]
 8007698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800769c:	0d1b      	lsrs	r3, r3, #20
 800769e:	051b      	lsls	r3, r3, #20
 80076a0:	b12b      	cbz	r3, 80076ae <_dtoa_r+0x7de>
 80076a2:	9b08      	ldr	r3, [sp, #32]
 80076a4:	3301      	adds	r3, #1
 80076a6:	9308      	str	r3, [sp, #32]
 80076a8:	f108 0801 	add.w	r8, r8, #1
 80076ac:	2301      	movs	r3, #1
 80076ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80076b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 81b0 	beq.w	8007a18 <_dtoa_r+0xb48>
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076be:	6918      	ldr	r0, [r3, #16]
 80076c0:	f000 fb72 	bl	8007da8 <__hi0bits>
 80076c4:	f1c0 0020 	rsb	r0, r0, #32
 80076c8:	9b08      	ldr	r3, [sp, #32]
 80076ca:	4418      	add	r0, r3
 80076cc:	f010 001f 	ands.w	r0, r0, #31
 80076d0:	d077      	beq.n	80077c2 <_dtoa_r+0x8f2>
 80076d2:	f1c0 0320 	rsb	r3, r0, #32
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	dd6b      	ble.n	80077b2 <_dtoa_r+0x8e2>
 80076da:	9b08      	ldr	r3, [sp, #32]
 80076dc:	f1c0 001c 	rsb	r0, r0, #28
 80076e0:	4403      	add	r3, r0
 80076e2:	4480      	add	r8, r0
 80076e4:	4406      	add	r6, r0
 80076e6:	9308      	str	r3, [sp, #32]
 80076e8:	f1b8 0f00 	cmp.w	r8, #0
 80076ec:	dd05      	ble.n	80076fa <_dtoa_r+0x82a>
 80076ee:	4649      	mov	r1, r9
 80076f0:	4642      	mov	r2, r8
 80076f2:	4658      	mov	r0, fp
 80076f4:	f000 fcbe 	bl	8008074 <__lshift>
 80076f8:	4681      	mov	r9, r0
 80076fa:	9b08      	ldr	r3, [sp, #32]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dd05      	ble.n	800770c <_dtoa_r+0x83c>
 8007700:	4621      	mov	r1, r4
 8007702:	461a      	mov	r2, r3
 8007704:	4658      	mov	r0, fp
 8007706:	f000 fcb5 	bl	8008074 <__lshift>
 800770a:	4604      	mov	r4, r0
 800770c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800770e:	2b00      	cmp	r3, #0
 8007710:	d059      	beq.n	80077c6 <_dtoa_r+0x8f6>
 8007712:	4621      	mov	r1, r4
 8007714:	4648      	mov	r0, r9
 8007716:	f000 fd19 	bl	800814c <__mcmp>
 800771a:	2800      	cmp	r0, #0
 800771c:	da53      	bge.n	80077c6 <_dtoa_r+0x8f6>
 800771e:	1e7b      	subs	r3, r7, #1
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	4649      	mov	r1, r9
 8007724:	2300      	movs	r3, #0
 8007726:	220a      	movs	r2, #10
 8007728:	4658      	mov	r0, fp
 800772a:	f000 faf7 	bl	8007d1c <__multadd>
 800772e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007730:	4681      	mov	r9, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 8172 	beq.w	8007a1c <_dtoa_r+0xb4c>
 8007738:	2300      	movs	r3, #0
 800773a:	4629      	mov	r1, r5
 800773c:	220a      	movs	r2, #10
 800773e:	4658      	mov	r0, fp
 8007740:	f000 faec 	bl	8007d1c <__multadd>
 8007744:	9b00      	ldr	r3, [sp, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	4605      	mov	r5, r0
 800774a:	dc67      	bgt.n	800781c <_dtoa_r+0x94c>
 800774c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800774e:	2b02      	cmp	r3, #2
 8007750:	dc41      	bgt.n	80077d6 <_dtoa_r+0x906>
 8007752:	e063      	b.n	800781c <_dtoa_r+0x94c>
 8007754:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007756:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800775a:	e746      	b.n	80075ea <_dtoa_r+0x71a>
 800775c:	9b07      	ldr	r3, [sp, #28]
 800775e:	1e5c      	subs	r4, r3, #1
 8007760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007762:	42a3      	cmp	r3, r4
 8007764:	bfbf      	itttt	lt
 8007766:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007768:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800776a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800776c:	1ae3      	sublt	r3, r4, r3
 800776e:	bfb4      	ite	lt
 8007770:	18d2      	addlt	r2, r2, r3
 8007772:	1b1c      	subge	r4, r3, r4
 8007774:	9b07      	ldr	r3, [sp, #28]
 8007776:	bfbc      	itt	lt
 8007778:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800777a:	2400      	movlt	r4, #0
 800777c:	2b00      	cmp	r3, #0
 800777e:	bfb5      	itete	lt
 8007780:	eba8 0603 	sublt.w	r6, r8, r3
 8007784:	9b07      	ldrge	r3, [sp, #28]
 8007786:	2300      	movlt	r3, #0
 8007788:	4646      	movge	r6, r8
 800778a:	e730      	b.n	80075ee <_dtoa_r+0x71e>
 800778c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800778e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007790:	4646      	mov	r6, r8
 8007792:	e735      	b.n	8007600 <_dtoa_r+0x730>
 8007794:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007796:	e75c      	b.n	8007652 <_dtoa_r+0x782>
 8007798:	2300      	movs	r3, #0
 800779a:	e788      	b.n	80076ae <_dtoa_r+0x7de>
 800779c:	3fe00000 	.word	0x3fe00000
 80077a0:	40240000 	.word	0x40240000
 80077a4:	40140000 	.word	0x40140000
 80077a8:	9b02      	ldr	r3, [sp, #8]
 80077aa:	e780      	b.n	80076ae <_dtoa_r+0x7de>
 80077ac:	2300      	movs	r3, #0
 80077ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80077b0:	e782      	b.n	80076b8 <_dtoa_r+0x7e8>
 80077b2:	d099      	beq.n	80076e8 <_dtoa_r+0x818>
 80077b4:	9a08      	ldr	r2, [sp, #32]
 80077b6:	331c      	adds	r3, #28
 80077b8:	441a      	add	r2, r3
 80077ba:	4498      	add	r8, r3
 80077bc:	441e      	add	r6, r3
 80077be:	9208      	str	r2, [sp, #32]
 80077c0:	e792      	b.n	80076e8 <_dtoa_r+0x818>
 80077c2:	4603      	mov	r3, r0
 80077c4:	e7f6      	b.n	80077b4 <_dtoa_r+0x8e4>
 80077c6:	9b07      	ldr	r3, [sp, #28]
 80077c8:	9704      	str	r7, [sp, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	dc20      	bgt.n	8007810 <_dtoa_r+0x940>
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	dd1e      	ble.n	8007814 <_dtoa_r+0x944>
 80077d6:	9b00      	ldr	r3, [sp, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f47f aec0 	bne.w	800755e <_dtoa_r+0x68e>
 80077de:	4621      	mov	r1, r4
 80077e0:	2205      	movs	r2, #5
 80077e2:	4658      	mov	r0, fp
 80077e4:	f000 fa9a 	bl	8007d1c <__multadd>
 80077e8:	4601      	mov	r1, r0
 80077ea:	4604      	mov	r4, r0
 80077ec:	4648      	mov	r0, r9
 80077ee:	f000 fcad 	bl	800814c <__mcmp>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f77f aeb3 	ble.w	800755e <_dtoa_r+0x68e>
 80077f8:	4656      	mov	r6, sl
 80077fa:	2331      	movs	r3, #49	@ 0x31
 80077fc:	f806 3b01 	strb.w	r3, [r6], #1
 8007800:	9b04      	ldr	r3, [sp, #16]
 8007802:	3301      	adds	r3, #1
 8007804:	9304      	str	r3, [sp, #16]
 8007806:	e6ae      	b.n	8007566 <_dtoa_r+0x696>
 8007808:	9c07      	ldr	r4, [sp, #28]
 800780a:	9704      	str	r7, [sp, #16]
 800780c:	4625      	mov	r5, r4
 800780e:	e7f3      	b.n	80077f8 <_dtoa_r+0x928>
 8007810:	9b07      	ldr	r3, [sp, #28]
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8104 	beq.w	8007a24 <_dtoa_r+0xb54>
 800781c:	2e00      	cmp	r6, #0
 800781e:	dd05      	ble.n	800782c <_dtoa_r+0x95c>
 8007820:	4629      	mov	r1, r5
 8007822:	4632      	mov	r2, r6
 8007824:	4658      	mov	r0, fp
 8007826:	f000 fc25 	bl	8008074 <__lshift>
 800782a:	4605      	mov	r5, r0
 800782c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800782e:	2b00      	cmp	r3, #0
 8007830:	d05a      	beq.n	80078e8 <_dtoa_r+0xa18>
 8007832:	6869      	ldr	r1, [r5, #4]
 8007834:	4658      	mov	r0, fp
 8007836:	f000 fa0f 	bl	8007c58 <_Balloc>
 800783a:	4606      	mov	r6, r0
 800783c:	b928      	cbnz	r0, 800784a <_dtoa_r+0x97a>
 800783e:	4b84      	ldr	r3, [pc, #528]	@ (8007a50 <_dtoa_r+0xb80>)
 8007840:	4602      	mov	r2, r0
 8007842:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007846:	f7ff bb5a 	b.w	8006efe <_dtoa_r+0x2e>
 800784a:	692a      	ldr	r2, [r5, #16]
 800784c:	3202      	adds	r2, #2
 800784e:	0092      	lsls	r2, r2, #2
 8007850:	f105 010c 	add.w	r1, r5, #12
 8007854:	300c      	adds	r0, #12
 8007856:	f000 ffaf 	bl	80087b8 <memcpy>
 800785a:	2201      	movs	r2, #1
 800785c:	4631      	mov	r1, r6
 800785e:	4658      	mov	r0, fp
 8007860:	f000 fc08 	bl	8008074 <__lshift>
 8007864:	f10a 0301 	add.w	r3, sl, #1
 8007868:	9307      	str	r3, [sp, #28]
 800786a:	9b00      	ldr	r3, [sp, #0]
 800786c:	4453      	add	r3, sl
 800786e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007870:	9b02      	ldr	r3, [sp, #8]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	462f      	mov	r7, r5
 8007878:	930a      	str	r3, [sp, #40]	@ 0x28
 800787a:	4605      	mov	r5, r0
 800787c:	9b07      	ldr	r3, [sp, #28]
 800787e:	4621      	mov	r1, r4
 8007880:	3b01      	subs	r3, #1
 8007882:	4648      	mov	r0, r9
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	f7ff fa9a 	bl	8006dbe <quorem>
 800788a:	4639      	mov	r1, r7
 800788c:	9002      	str	r0, [sp, #8]
 800788e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007892:	4648      	mov	r0, r9
 8007894:	f000 fc5a 	bl	800814c <__mcmp>
 8007898:	462a      	mov	r2, r5
 800789a:	9008      	str	r0, [sp, #32]
 800789c:	4621      	mov	r1, r4
 800789e:	4658      	mov	r0, fp
 80078a0:	f000 fc70 	bl	8008184 <__mdiff>
 80078a4:	68c2      	ldr	r2, [r0, #12]
 80078a6:	4606      	mov	r6, r0
 80078a8:	bb02      	cbnz	r2, 80078ec <_dtoa_r+0xa1c>
 80078aa:	4601      	mov	r1, r0
 80078ac:	4648      	mov	r0, r9
 80078ae:	f000 fc4d 	bl	800814c <__mcmp>
 80078b2:	4602      	mov	r2, r0
 80078b4:	4631      	mov	r1, r6
 80078b6:	4658      	mov	r0, fp
 80078b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80078ba:	f000 fa0d 	bl	8007cd8 <_Bfree>
 80078be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078c2:	9e07      	ldr	r6, [sp, #28]
 80078c4:	ea43 0102 	orr.w	r1, r3, r2
 80078c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ca:	4319      	orrs	r1, r3
 80078cc:	d110      	bne.n	80078f0 <_dtoa_r+0xa20>
 80078ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078d2:	d029      	beq.n	8007928 <_dtoa_r+0xa58>
 80078d4:	9b08      	ldr	r3, [sp, #32]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	dd02      	ble.n	80078e0 <_dtoa_r+0xa10>
 80078da:	9b02      	ldr	r3, [sp, #8]
 80078dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80078e0:	9b00      	ldr	r3, [sp, #0]
 80078e2:	f883 8000 	strb.w	r8, [r3]
 80078e6:	e63f      	b.n	8007568 <_dtoa_r+0x698>
 80078e8:	4628      	mov	r0, r5
 80078ea:	e7bb      	b.n	8007864 <_dtoa_r+0x994>
 80078ec:	2201      	movs	r2, #1
 80078ee:	e7e1      	b.n	80078b4 <_dtoa_r+0x9e4>
 80078f0:	9b08      	ldr	r3, [sp, #32]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	db04      	blt.n	8007900 <_dtoa_r+0xa30>
 80078f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078f8:	430b      	orrs	r3, r1
 80078fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078fc:	430b      	orrs	r3, r1
 80078fe:	d120      	bne.n	8007942 <_dtoa_r+0xa72>
 8007900:	2a00      	cmp	r2, #0
 8007902:	dded      	ble.n	80078e0 <_dtoa_r+0xa10>
 8007904:	4649      	mov	r1, r9
 8007906:	2201      	movs	r2, #1
 8007908:	4658      	mov	r0, fp
 800790a:	f000 fbb3 	bl	8008074 <__lshift>
 800790e:	4621      	mov	r1, r4
 8007910:	4681      	mov	r9, r0
 8007912:	f000 fc1b 	bl	800814c <__mcmp>
 8007916:	2800      	cmp	r0, #0
 8007918:	dc03      	bgt.n	8007922 <_dtoa_r+0xa52>
 800791a:	d1e1      	bne.n	80078e0 <_dtoa_r+0xa10>
 800791c:	f018 0f01 	tst.w	r8, #1
 8007920:	d0de      	beq.n	80078e0 <_dtoa_r+0xa10>
 8007922:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007926:	d1d8      	bne.n	80078da <_dtoa_r+0xa0a>
 8007928:	9a00      	ldr	r2, [sp, #0]
 800792a:	2339      	movs	r3, #57	@ 0x39
 800792c:	7013      	strb	r3, [r2, #0]
 800792e:	4633      	mov	r3, r6
 8007930:	461e      	mov	r6, r3
 8007932:	3b01      	subs	r3, #1
 8007934:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007938:	2a39      	cmp	r2, #57	@ 0x39
 800793a:	d052      	beq.n	80079e2 <_dtoa_r+0xb12>
 800793c:	3201      	adds	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	e612      	b.n	8007568 <_dtoa_r+0x698>
 8007942:	2a00      	cmp	r2, #0
 8007944:	dd07      	ble.n	8007956 <_dtoa_r+0xa86>
 8007946:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800794a:	d0ed      	beq.n	8007928 <_dtoa_r+0xa58>
 800794c:	9a00      	ldr	r2, [sp, #0]
 800794e:	f108 0301 	add.w	r3, r8, #1
 8007952:	7013      	strb	r3, [r2, #0]
 8007954:	e608      	b.n	8007568 <_dtoa_r+0x698>
 8007956:	9b07      	ldr	r3, [sp, #28]
 8007958:	9a07      	ldr	r2, [sp, #28]
 800795a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800795e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007960:	4293      	cmp	r3, r2
 8007962:	d028      	beq.n	80079b6 <_dtoa_r+0xae6>
 8007964:	4649      	mov	r1, r9
 8007966:	2300      	movs	r3, #0
 8007968:	220a      	movs	r2, #10
 800796a:	4658      	mov	r0, fp
 800796c:	f000 f9d6 	bl	8007d1c <__multadd>
 8007970:	42af      	cmp	r7, r5
 8007972:	4681      	mov	r9, r0
 8007974:	f04f 0300 	mov.w	r3, #0
 8007978:	f04f 020a 	mov.w	r2, #10
 800797c:	4639      	mov	r1, r7
 800797e:	4658      	mov	r0, fp
 8007980:	d107      	bne.n	8007992 <_dtoa_r+0xac2>
 8007982:	f000 f9cb 	bl	8007d1c <__multadd>
 8007986:	4607      	mov	r7, r0
 8007988:	4605      	mov	r5, r0
 800798a:	9b07      	ldr	r3, [sp, #28]
 800798c:	3301      	adds	r3, #1
 800798e:	9307      	str	r3, [sp, #28]
 8007990:	e774      	b.n	800787c <_dtoa_r+0x9ac>
 8007992:	f000 f9c3 	bl	8007d1c <__multadd>
 8007996:	4629      	mov	r1, r5
 8007998:	4607      	mov	r7, r0
 800799a:	2300      	movs	r3, #0
 800799c:	220a      	movs	r2, #10
 800799e:	4658      	mov	r0, fp
 80079a0:	f000 f9bc 	bl	8007d1c <__multadd>
 80079a4:	4605      	mov	r5, r0
 80079a6:	e7f0      	b.n	800798a <_dtoa_r+0xaba>
 80079a8:	9b00      	ldr	r3, [sp, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bfcc      	ite	gt
 80079ae:	461e      	movgt	r6, r3
 80079b0:	2601      	movle	r6, #1
 80079b2:	4456      	add	r6, sl
 80079b4:	2700      	movs	r7, #0
 80079b6:	4649      	mov	r1, r9
 80079b8:	2201      	movs	r2, #1
 80079ba:	4658      	mov	r0, fp
 80079bc:	f000 fb5a 	bl	8008074 <__lshift>
 80079c0:	4621      	mov	r1, r4
 80079c2:	4681      	mov	r9, r0
 80079c4:	f000 fbc2 	bl	800814c <__mcmp>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	dcb0      	bgt.n	800792e <_dtoa_r+0xa5e>
 80079cc:	d102      	bne.n	80079d4 <_dtoa_r+0xb04>
 80079ce:	f018 0f01 	tst.w	r8, #1
 80079d2:	d1ac      	bne.n	800792e <_dtoa_r+0xa5e>
 80079d4:	4633      	mov	r3, r6
 80079d6:	461e      	mov	r6, r3
 80079d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079dc:	2a30      	cmp	r2, #48	@ 0x30
 80079de:	d0fa      	beq.n	80079d6 <_dtoa_r+0xb06>
 80079e0:	e5c2      	b.n	8007568 <_dtoa_r+0x698>
 80079e2:	459a      	cmp	sl, r3
 80079e4:	d1a4      	bne.n	8007930 <_dtoa_r+0xa60>
 80079e6:	9b04      	ldr	r3, [sp, #16]
 80079e8:	3301      	adds	r3, #1
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	2331      	movs	r3, #49	@ 0x31
 80079ee:	f88a 3000 	strb.w	r3, [sl]
 80079f2:	e5b9      	b.n	8007568 <_dtoa_r+0x698>
 80079f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007a54 <_dtoa_r+0xb84>
 80079fa:	b11b      	cbz	r3, 8007a04 <_dtoa_r+0xb34>
 80079fc:	f10a 0308 	add.w	r3, sl, #8
 8007a00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	4650      	mov	r0, sl
 8007a06:	b019      	add	sp, #100	@ 0x64
 8007a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	f77f ae37 	ble.w	8007682 <_dtoa_r+0x7b2>
 8007a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a18:	2001      	movs	r0, #1
 8007a1a:	e655      	b.n	80076c8 <_dtoa_r+0x7f8>
 8007a1c:	9b00      	ldr	r3, [sp, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f77f aed6 	ble.w	80077d0 <_dtoa_r+0x900>
 8007a24:	4656      	mov	r6, sl
 8007a26:	4621      	mov	r1, r4
 8007a28:	4648      	mov	r0, r9
 8007a2a:	f7ff f9c8 	bl	8006dbe <quorem>
 8007a2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a32:	f806 8b01 	strb.w	r8, [r6], #1
 8007a36:	9b00      	ldr	r3, [sp, #0]
 8007a38:	eba6 020a 	sub.w	r2, r6, sl
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	ddb3      	ble.n	80079a8 <_dtoa_r+0xad8>
 8007a40:	4649      	mov	r1, r9
 8007a42:	2300      	movs	r3, #0
 8007a44:	220a      	movs	r2, #10
 8007a46:	4658      	mov	r0, fp
 8007a48:	f000 f968 	bl	8007d1c <__multadd>
 8007a4c:	4681      	mov	r9, r0
 8007a4e:	e7ea      	b.n	8007a26 <_dtoa_r+0xb56>
 8007a50:	08008f78 	.word	0x08008f78
 8007a54:	08008efc 	.word	0x08008efc

08007a58 <_free_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	d041      	beq.n	8007ae4 <_free_r+0x8c>
 8007a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a64:	1f0c      	subs	r4, r1, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bfb8      	it	lt
 8007a6a:	18e4      	addlt	r4, r4, r3
 8007a6c:	f000 f8e8 	bl	8007c40 <__malloc_lock>
 8007a70:	4a1d      	ldr	r2, [pc, #116]	@ (8007ae8 <_free_r+0x90>)
 8007a72:	6813      	ldr	r3, [r2, #0]
 8007a74:	b933      	cbnz	r3, 8007a84 <_free_r+0x2c>
 8007a76:	6063      	str	r3, [r4, #4]
 8007a78:	6014      	str	r4, [r2, #0]
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a80:	f000 b8e4 	b.w	8007c4c <__malloc_unlock>
 8007a84:	42a3      	cmp	r3, r4
 8007a86:	d908      	bls.n	8007a9a <_free_r+0x42>
 8007a88:	6820      	ldr	r0, [r4, #0]
 8007a8a:	1821      	adds	r1, r4, r0
 8007a8c:	428b      	cmp	r3, r1
 8007a8e:	bf01      	itttt	eq
 8007a90:	6819      	ldreq	r1, [r3, #0]
 8007a92:	685b      	ldreq	r3, [r3, #4]
 8007a94:	1809      	addeq	r1, r1, r0
 8007a96:	6021      	streq	r1, [r4, #0]
 8007a98:	e7ed      	b.n	8007a76 <_free_r+0x1e>
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	b10b      	cbz	r3, 8007aa4 <_free_r+0x4c>
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	d9fa      	bls.n	8007a9a <_free_r+0x42>
 8007aa4:	6811      	ldr	r1, [r2, #0]
 8007aa6:	1850      	adds	r0, r2, r1
 8007aa8:	42a0      	cmp	r0, r4
 8007aaa:	d10b      	bne.n	8007ac4 <_free_r+0x6c>
 8007aac:	6820      	ldr	r0, [r4, #0]
 8007aae:	4401      	add	r1, r0
 8007ab0:	1850      	adds	r0, r2, r1
 8007ab2:	4283      	cmp	r3, r0
 8007ab4:	6011      	str	r1, [r2, #0]
 8007ab6:	d1e0      	bne.n	8007a7a <_free_r+0x22>
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	6053      	str	r3, [r2, #4]
 8007abe:	4408      	add	r0, r1
 8007ac0:	6010      	str	r0, [r2, #0]
 8007ac2:	e7da      	b.n	8007a7a <_free_r+0x22>
 8007ac4:	d902      	bls.n	8007acc <_free_r+0x74>
 8007ac6:	230c      	movs	r3, #12
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	e7d6      	b.n	8007a7a <_free_r+0x22>
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	1821      	adds	r1, r4, r0
 8007ad0:	428b      	cmp	r3, r1
 8007ad2:	bf04      	itt	eq
 8007ad4:	6819      	ldreq	r1, [r3, #0]
 8007ad6:	685b      	ldreq	r3, [r3, #4]
 8007ad8:	6063      	str	r3, [r4, #4]
 8007ada:	bf04      	itt	eq
 8007adc:	1809      	addeq	r1, r1, r0
 8007ade:	6021      	streq	r1, [r4, #0]
 8007ae0:	6054      	str	r4, [r2, #4]
 8007ae2:	e7ca      	b.n	8007a7a <_free_r+0x22>
 8007ae4:	bd38      	pop	{r3, r4, r5, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000998 	.word	0x20000998

08007aec <malloc>:
 8007aec:	4b02      	ldr	r3, [pc, #8]	@ (8007af8 <malloc+0xc>)
 8007aee:	4601      	mov	r1, r0
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	f000 b825 	b.w	8007b40 <_malloc_r>
 8007af6:	bf00      	nop
 8007af8:	20000018 	.word	0x20000018

08007afc <sbrk_aligned>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4e0f      	ldr	r6, [pc, #60]	@ (8007b3c <sbrk_aligned+0x40>)
 8007b00:	460c      	mov	r4, r1
 8007b02:	6831      	ldr	r1, [r6, #0]
 8007b04:	4605      	mov	r5, r0
 8007b06:	b911      	cbnz	r1, 8007b0e <sbrk_aligned+0x12>
 8007b08:	f000 fe46 	bl	8008798 <_sbrk_r>
 8007b0c:	6030      	str	r0, [r6, #0]
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 fe41 	bl	8008798 <_sbrk_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	d103      	bne.n	8007b22 <sbrk_aligned+0x26>
 8007b1a:	f04f 34ff 	mov.w	r4, #4294967295
 8007b1e:	4620      	mov	r0, r4
 8007b20:	bd70      	pop	{r4, r5, r6, pc}
 8007b22:	1cc4      	adds	r4, r0, #3
 8007b24:	f024 0403 	bic.w	r4, r4, #3
 8007b28:	42a0      	cmp	r0, r4
 8007b2a:	d0f8      	beq.n	8007b1e <sbrk_aligned+0x22>
 8007b2c:	1a21      	subs	r1, r4, r0
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 fe32 	bl	8008798 <_sbrk_r>
 8007b34:	3001      	adds	r0, #1
 8007b36:	d1f2      	bne.n	8007b1e <sbrk_aligned+0x22>
 8007b38:	e7ef      	b.n	8007b1a <sbrk_aligned+0x1e>
 8007b3a:	bf00      	nop
 8007b3c:	20000994 	.word	0x20000994

08007b40 <_malloc_r>:
 8007b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b44:	1ccd      	adds	r5, r1, #3
 8007b46:	f025 0503 	bic.w	r5, r5, #3
 8007b4a:	3508      	adds	r5, #8
 8007b4c:	2d0c      	cmp	r5, #12
 8007b4e:	bf38      	it	cc
 8007b50:	250c      	movcc	r5, #12
 8007b52:	2d00      	cmp	r5, #0
 8007b54:	4606      	mov	r6, r0
 8007b56:	db01      	blt.n	8007b5c <_malloc_r+0x1c>
 8007b58:	42a9      	cmp	r1, r5
 8007b5a:	d904      	bls.n	8007b66 <_malloc_r+0x26>
 8007b5c:	230c      	movs	r3, #12
 8007b5e:	6033      	str	r3, [r6, #0]
 8007b60:	2000      	movs	r0, #0
 8007b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c3c <_malloc_r+0xfc>
 8007b6a:	f000 f869 	bl	8007c40 <__malloc_lock>
 8007b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b72:	461c      	mov	r4, r3
 8007b74:	bb44      	cbnz	r4, 8007bc8 <_malloc_r+0x88>
 8007b76:	4629      	mov	r1, r5
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f7ff ffbf 	bl	8007afc <sbrk_aligned>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	4604      	mov	r4, r0
 8007b82:	d158      	bne.n	8007c36 <_malloc_r+0xf6>
 8007b84:	f8d8 4000 	ldr.w	r4, [r8]
 8007b88:	4627      	mov	r7, r4
 8007b8a:	2f00      	cmp	r7, #0
 8007b8c:	d143      	bne.n	8007c16 <_malloc_r+0xd6>
 8007b8e:	2c00      	cmp	r4, #0
 8007b90:	d04b      	beq.n	8007c2a <_malloc_r+0xea>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	4639      	mov	r1, r7
 8007b96:	4630      	mov	r0, r6
 8007b98:	eb04 0903 	add.w	r9, r4, r3
 8007b9c:	f000 fdfc 	bl	8008798 <_sbrk_r>
 8007ba0:	4581      	cmp	r9, r0
 8007ba2:	d142      	bne.n	8007c2a <_malloc_r+0xea>
 8007ba4:	6821      	ldr	r1, [r4, #0]
 8007ba6:	1a6d      	subs	r5, r5, r1
 8007ba8:	4629      	mov	r1, r5
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7ff ffa6 	bl	8007afc <sbrk_aligned>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d03a      	beq.n	8007c2a <_malloc_r+0xea>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	442b      	add	r3, r5
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	f8d8 3000 	ldr.w	r3, [r8]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	bb62      	cbnz	r2, 8007c1c <_malloc_r+0xdc>
 8007bc2:	f8c8 7000 	str.w	r7, [r8]
 8007bc6:	e00f      	b.n	8007be8 <_malloc_r+0xa8>
 8007bc8:	6822      	ldr	r2, [r4, #0]
 8007bca:	1b52      	subs	r2, r2, r5
 8007bcc:	d420      	bmi.n	8007c10 <_malloc_r+0xd0>
 8007bce:	2a0b      	cmp	r2, #11
 8007bd0:	d917      	bls.n	8007c02 <_malloc_r+0xc2>
 8007bd2:	1961      	adds	r1, r4, r5
 8007bd4:	42a3      	cmp	r3, r4
 8007bd6:	6025      	str	r5, [r4, #0]
 8007bd8:	bf18      	it	ne
 8007bda:	6059      	strne	r1, [r3, #4]
 8007bdc:	6863      	ldr	r3, [r4, #4]
 8007bde:	bf08      	it	eq
 8007be0:	f8c8 1000 	streq.w	r1, [r8]
 8007be4:	5162      	str	r2, [r4, r5]
 8007be6:	604b      	str	r3, [r1, #4]
 8007be8:	4630      	mov	r0, r6
 8007bea:	f000 f82f 	bl	8007c4c <__malloc_unlock>
 8007bee:	f104 000b 	add.w	r0, r4, #11
 8007bf2:	1d23      	adds	r3, r4, #4
 8007bf4:	f020 0007 	bic.w	r0, r0, #7
 8007bf8:	1ac2      	subs	r2, r0, r3
 8007bfa:	bf1c      	itt	ne
 8007bfc:	1a1b      	subne	r3, r3, r0
 8007bfe:	50a3      	strne	r3, [r4, r2]
 8007c00:	e7af      	b.n	8007b62 <_malloc_r+0x22>
 8007c02:	6862      	ldr	r2, [r4, #4]
 8007c04:	42a3      	cmp	r3, r4
 8007c06:	bf0c      	ite	eq
 8007c08:	f8c8 2000 	streq.w	r2, [r8]
 8007c0c:	605a      	strne	r2, [r3, #4]
 8007c0e:	e7eb      	b.n	8007be8 <_malloc_r+0xa8>
 8007c10:	4623      	mov	r3, r4
 8007c12:	6864      	ldr	r4, [r4, #4]
 8007c14:	e7ae      	b.n	8007b74 <_malloc_r+0x34>
 8007c16:	463c      	mov	r4, r7
 8007c18:	687f      	ldr	r7, [r7, #4]
 8007c1a:	e7b6      	b.n	8007b8a <_malloc_r+0x4a>
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	42a3      	cmp	r3, r4
 8007c22:	d1fb      	bne.n	8007c1c <_malloc_r+0xdc>
 8007c24:	2300      	movs	r3, #0
 8007c26:	6053      	str	r3, [r2, #4]
 8007c28:	e7de      	b.n	8007be8 <_malloc_r+0xa8>
 8007c2a:	230c      	movs	r3, #12
 8007c2c:	6033      	str	r3, [r6, #0]
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f000 f80c 	bl	8007c4c <__malloc_unlock>
 8007c34:	e794      	b.n	8007b60 <_malloc_r+0x20>
 8007c36:	6005      	str	r5, [r0, #0]
 8007c38:	e7d6      	b.n	8007be8 <_malloc_r+0xa8>
 8007c3a:	bf00      	nop
 8007c3c:	20000998 	.word	0x20000998

08007c40 <__malloc_lock>:
 8007c40:	4801      	ldr	r0, [pc, #4]	@ (8007c48 <__malloc_lock+0x8>)
 8007c42:	f7ff b8ba 	b.w	8006dba <__retarget_lock_acquire_recursive>
 8007c46:	bf00      	nop
 8007c48:	20000990 	.word	0x20000990

08007c4c <__malloc_unlock>:
 8007c4c:	4801      	ldr	r0, [pc, #4]	@ (8007c54 <__malloc_unlock+0x8>)
 8007c4e:	f7ff b8b5 	b.w	8006dbc <__retarget_lock_release_recursive>
 8007c52:	bf00      	nop
 8007c54:	20000990 	.word	0x20000990

08007c58 <_Balloc>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	69c6      	ldr	r6, [r0, #28]
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	460d      	mov	r5, r1
 8007c60:	b976      	cbnz	r6, 8007c80 <_Balloc+0x28>
 8007c62:	2010      	movs	r0, #16
 8007c64:	f7ff ff42 	bl	8007aec <malloc>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	61e0      	str	r0, [r4, #28]
 8007c6c:	b920      	cbnz	r0, 8007c78 <_Balloc+0x20>
 8007c6e:	4b18      	ldr	r3, [pc, #96]	@ (8007cd0 <_Balloc+0x78>)
 8007c70:	4818      	ldr	r0, [pc, #96]	@ (8007cd4 <_Balloc+0x7c>)
 8007c72:	216b      	movs	r1, #107	@ 0x6b
 8007c74:	f000 fdae 	bl	80087d4 <__assert_func>
 8007c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c7c:	6006      	str	r6, [r0, #0]
 8007c7e:	60c6      	str	r6, [r0, #12]
 8007c80:	69e6      	ldr	r6, [r4, #28]
 8007c82:	68f3      	ldr	r3, [r6, #12]
 8007c84:	b183      	cbz	r3, 8007ca8 <_Balloc+0x50>
 8007c86:	69e3      	ldr	r3, [r4, #28]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c8e:	b9b8      	cbnz	r0, 8007cc0 <_Balloc+0x68>
 8007c90:	2101      	movs	r1, #1
 8007c92:	fa01 f605 	lsl.w	r6, r1, r5
 8007c96:	1d72      	adds	r2, r6, #5
 8007c98:	0092      	lsls	r2, r2, #2
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f000 fdb8 	bl	8008810 <_calloc_r>
 8007ca0:	b160      	cbz	r0, 8007cbc <_Balloc+0x64>
 8007ca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ca6:	e00e      	b.n	8007cc6 <_Balloc+0x6e>
 8007ca8:	2221      	movs	r2, #33	@ 0x21
 8007caa:	2104      	movs	r1, #4
 8007cac:	4620      	mov	r0, r4
 8007cae:	f000 fdaf 	bl	8008810 <_calloc_r>
 8007cb2:	69e3      	ldr	r3, [r4, #28]
 8007cb4:	60f0      	str	r0, [r6, #12]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e4      	bne.n	8007c86 <_Balloc+0x2e>
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	6802      	ldr	r2, [r0, #0]
 8007cc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ccc:	e7f7      	b.n	8007cbe <_Balloc+0x66>
 8007cce:	bf00      	nop
 8007cd0:	08008f09 	.word	0x08008f09
 8007cd4:	08008f89 	.word	0x08008f89

08007cd8 <_Bfree>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	69c6      	ldr	r6, [r0, #28]
 8007cdc:	4605      	mov	r5, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	b976      	cbnz	r6, 8007d00 <_Bfree+0x28>
 8007ce2:	2010      	movs	r0, #16
 8007ce4:	f7ff ff02 	bl	8007aec <malloc>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	61e8      	str	r0, [r5, #28]
 8007cec:	b920      	cbnz	r0, 8007cf8 <_Bfree+0x20>
 8007cee:	4b09      	ldr	r3, [pc, #36]	@ (8007d14 <_Bfree+0x3c>)
 8007cf0:	4809      	ldr	r0, [pc, #36]	@ (8007d18 <_Bfree+0x40>)
 8007cf2:	218f      	movs	r1, #143	@ 0x8f
 8007cf4:	f000 fd6e 	bl	80087d4 <__assert_func>
 8007cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cfc:	6006      	str	r6, [r0, #0]
 8007cfe:	60c6      	str	r6, [r0, #12]
 8007d00:	b13c      	cbz	r4, 8007d12 <_Bfree+0x3a>
 8007d02:	69eb      	ldr	r3, [r5, #28]
 8007d04:	6862      	ldr	r2, [r4, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d0c:	6021      	str	r1, [r4, #0]
 8007d0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	08008f09 	.word	0x08008f09
 8007d18:	08008f89 	.word	0x08008f89

08007d1c <__multadd>:
 8007d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d20:	690d      	ldr	r5, [r1, #16]
 8007d22:	4607      	mov	r7, r0
 8007d24:	460c      	mov	r4, r1
 8007d26:	461e      	mov	r6, r3
 8007d28:	f101 0c14 	add.w	ip, r1, #20
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	f8dc 3000 	ldr.w	r3, [ip]
 8007d32:	b299      	uxth	r1, r3
 8007d34:	fb02 6101 	mla	r1, r2, r1, r6
 8007d38:	0c1e      	lsrs	r6, r3, #16
 8007d3a:	0c0b      	lsrs	r3, r1, #16
 8007d3c:	fb02 3306 	mla	r3, r2, r6, r3
 8007d40:	b289      	uxth	r1, r1
 8007d42:	3001      	adds	r0, #1
 8007d44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d48:	4285      	cmp	r5, r0
 8007d4a:	f84c 1b04 	str.w	r1, [ip], #4
 8007d4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d52:	dcec      	bgt.n	8007d2e <__multadd+0x12>
 8007d54:	b30e      	cbz	r6, 8007d9a <__multadd+0x7e>
 8007d56:	68a3      	ldr	r3, [r4, #8]
 8007d58:	42ab      	cmp	r3, r5
 8007d5a:	dc19      	bgt.n	8007d90 <__multadd+0x74>
 8007d5c:	6861      	ldr	r1, [r4, #4]
 8007d5e:	4638      	mov	r0, r7
 8007d60:	3101      	adds	r1, #1
 8007d62:	f7ff ff79 	bl	8007c58 <_Balloc>
 8007d66:	4680      	mov	r8, r0
 8007d68:	b928      	cbnz	r0, 8007d76 <__multadd+0x5a>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007da0 <__multadd+0x84>)
 8007d6e:	480d      	ldr	r0, [pc, #52]	@ (8007da4 <__multadd+0x88>)
 8007d70:	21ba      	movs	r1, #186	@ 0xba
 8007d72:	f000 fd2f 	bl	80087d4 <__assert_func>
 8007d76:	6922      	ldr	r2, [r4, #16]
 8007d78:	3202      	adds	r2, #2
 8007d7a:	f104 010c 	add.w	r1, r4, #12
 8007d7e:	0092      	lsls	r2, r2, #2
 8007d80:	300c      	adds	r0, #12
 8007d82:	f000 fd19 	bl	80087b8 <memcpy>
 8007d86:	4621      	mov	r1, r4
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f7ff ffa5 	bl	8007cd8 <_Bfree>
 8007d8e:	4644      	mov	r4, r8
 8007d90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d94:	3501      	adds	r5, #1
 8007d96:	615e      	str	r6, [r3, #20]
 8007d98:	6125      	str	r5, [r4, #16]
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007da0:	08008f78 	.word	0x08008f78
 8007da4:	08008f89 	.word	0x08008f89

08007da8 <__hi0bits>:
 8007da8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007dac:	4603      	mov	r3, r0
 8007dae:	bf36      	itet	cc
 8007db0:	0403      	lslcc	r3, r0, #16
 8007db2:	2000      	movcs	r0, #0
 8007db4:	2010      	movcc	r0, #16
 8007db6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dba:	bf3c      	itt	cc
 8007dbc:	021b      	lslcc	r3, r3, #8
 8007dbe:	3008      	addcc	r0, #8
 8007dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dc4:	bf3c      	itt	cc
 8007dc6:	011b      	lslcc	r3, r3, #4
 8007dc8:	3004      	addcc	r0, #4
 8007dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dce:	bf3c      	itt	cc
 8007dd0:	009b      	lslcc	r3, r3, #2
 8007dd2:	3002      	addcc	r0, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	db05      	blt.n	8007de4 <__hi0bits+0x3c>
 8007dd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ddc:	f100 0001 	add.w	r0, r0, #1
 8007de0:	bf08      	it	eq
 8007de2:	2020      	moveq	r0, #32
 8007de4:	4770      	bx	lr

08007de6 <__lo0bits>:
 8007de6:	6803      	ldr	r3, [r0, #0]
 8007de8:	4602      	mov	r2, r0
 8007dea:	f013 0007 	ands.w	r0, r3, #7
 8007dee:	d00b      	beq.n	8007e08 <__lo0bits+0x22>
 8007df0:	07d9      	lsls	r1, r3, #31
 8007df2:	d421      	bmi.n	8007e38 <__lo0bits+0x52>
 8007df4:	0798      	lsls	r0, r3, #30
 8007df6:	bf49      	itett	mi
 8007df8:	085b      	lsrmi	r3, r3, #1
 8007dfa:	089b      	lsrpl	r3, r3, #2
 8007dfc:	2001      	movmi	r0, #1
 8007dfe:	6013      	strmi	r3, [r2, #0]
 8007e00:	bf5c      	itt	pl
 8007e02:	6013      	strpl	r3, [r2, #0]
 8007e04:	2002      	movpl	r0, #2
 8007e06:	4770      	bx	lr
 8007e08:	b299      	uxth	r1, r3
 8007e0a:	b909      	cbnz	r1, 8007e10 <__lo0bits+0x2a>
 8007e0c:	0c1b      	lsrs	r3, r3, #16
 8007e0e:	2010      	movs	r0, #16
 8007e10:	b2d9      	uxtb	r1, r3
 8007e12:	b909      	cbnz	r1, 8007e18 <__lo0bits+0x32>
 8007e14:	3008      	adds	r0, #8
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	0719      	lsls	r1, r3, #28
 8007e1a:	bf04      	itt	eq
 8007e1c:	091b      	lsreq	r3, r3, #4
 8007e1e:	3004      	addeq	r0, #4
 8007e20:	0799      	lsls	r1, r3, #30
 8007e22:	bf04      	itt	eq
 8007e24:	089b      	lsreq	r3, r3, #2
 8007e26:	3002      	addeq	r0, #2
 8007e28:	07d9      	lsls	r1, r3, #31
 8007e2a:	d403      	bmi.n	8007e34 <__lo0bits+0x4e>
 8007e2c:	085b      	lsrs	r3, r3, #1
 8007e2e:	f100 0001 	add.w	r0, r0, #1
 8007e32:	d003      	beq.n	8007e3c <__lo0bits+0x56>
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	4770      	bx	lr
 8007e38:	2000      	movs	r0, #0
 8007e3a:	4770      	bx	lr
 8007e3c:	2020      	movs	r0, #32
 8007e3e:	4770      	bx	lr

08007e40 <__i2b>:
 8007e40:	b510      	push	{r4, lr}
 8007e42:	460c      	mov	r4, r1
 8007e44:	2101      	movs	r1, #1
 8007e46:	f7ff ff07 	bl	8007c58 <_Balloc>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	b928      	cbnz	r0, 8007e5a <__i2b+0x1a>
 8007e4e:	4b05      	ldr	r3, [pc, #20]	@ (8007e64 <__i2b+0x24>)
 8007e50:	4805      	ldr	r0, [pc, #20]	@ (8007e68 <__i2b+0x28>)
 8007e52:	f240 1145 	movw	r1, #325	@ 0x145
 8007e56:	f000 fcbd 	bl	80087d4 <__assert_func>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	6144      	str	r4, [r0, #20]
 8007e5e:	6103      	str	r3, [r0, #16]
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	bf00      	nop
 8007e64:	08008f78 	.word	0x08008f78
 8007e68:	08008f89 	.word	0x08008f89

08007e6c <__multiply>:
 8007e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e70:	4614      	mov	r4, r2
 8007e72:	690a      	ldr	r2, [r1, #16]
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	bfa8      	it	ge
 8007e7a:	4623      	movge	r3, r4
 8007e7c:	460f      	mov	r7, r1
 8007e7e:	bfa4      	itt	ge
 8007e80:	460c      	movge	r4, r1
 8007e82:	461f      	movge	r7, r3
 8007e84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e8c:	68a3      	ldr	r3, [r4, #8]
 8007e8e:	6861      	ldr	r1, [r4, #4]
 8007e90:	eb0a 0609 	add.w	r6, sl, r9
 8007e94:	42b3      	cmp	r3, r6
 8007e96:	b085      	sub	sp, #20
 8007e98:	bfb8      	it	lt
 8007e9a:	3101      	addlt	r1, #1
 8007e9c:	f7ff fedc 	bl	8007c58 <_Balloc>
 8007ea0:	b930      	cbnz	r0, 8007eb0 <__multiply+0x44>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	4b44      	ldr	r3, [pc, #272]	@ (8007fb8 <__multiply+0x14c>)
 8007ea6:	4845      	ldr	r0, [pc, #276]	@ (8007fbc <__multiply+0x150>)
 8007ea8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007eac:	f000 fc92 	bl	80087d4 <__assert_func>
 8007eb0:	f100 0514 	add.w	r5, r0, #20
 8007eb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007eb8:	462b      	mov	r3, r5
 8007eba:	2200      	movs	r2, #0
 8007ebc:	4543      	cmp	r3, r8
 8007ebe:	d321      	bcc.n	8007f04 <__multiply+0x98>
 8007ec0:	f107 0114 	add.w	r1, r7, #20
 8007ec4:	f104 0214 	add.w	r2, r4, #20
 8007ec8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ecc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007ed0:	9302      	str	r3, [sp, #8]
 8007ed2:	1b13      	subs	r3, r2, r4
 8007ed4:	3b15      	subs	r3, #21
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	3304      	adds	r3, #4
 8007edc:	f104 0715 	add.w	r7, r4, #21
 8007ee0:	42ba      	cmp	r2, r7
 8007ee2:	bf38      	it	cc
 8007ee4:	2304      	movcc	r3, #4
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	9b02      	ldr	r3, [sp, #8]
 8007eea:	9103      	str	r1, [sp, #12]
 8007eec:	428b      	cmp	r3, r1
 8007eee:	d80c      	bhi.n	8007f0a <__multiply+0x9e>
 8007ef0:	2e00      	cmp	r6, #0
 8007ef2:	dd03      	ble.n	8007efc <__multiply+0x90>
 8007ef4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d05b      	beq.n	8007fb4 <__multiply+0x148>
 8007efc:	6106      	str	r6, [r0, #16]
 8007efe:	b005      	add	sp, #20
 8007f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f04:	f843 2b04 	str.w	r2, [r3], #4
 8007f08:	e7d8      	b.n	8007ebc <__multiply+0x50>
 8007f0a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f0e:	f1ba 0f00 	cmp.w	sl, #0
 8007f12:	d024      	beq.n	8007f5e <__multiply+0xf2>
 8007f14:	f104 0e14 	add.w	lr, r4, #20
 8007f18:	46a9      	mov	r9, r5
 8007f1a:	f04f 0c00 	mov.w	ip, #0
 8007f1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f22:	f8d9 3000 	ldr.w	r3, [r9]
 8007f26:	fa1f fb87 	uxth.w	fp, r7
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f34:	f8d9 7000 	ldr.w	r7, [r9]
 8007f38:	4463      	add	r3, ip
 8007f3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f3e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f4c:	4572      	cmp	r2, lr
 8007f4e:	f849 3b04 	str.w	r3, [r9], #4
 8007f52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f56:	d8e2      	bhi.n	8007f1e <__multiply+0xb2>
 8007f58:	9b01      	ldr	r3, [sp, #4]
 8007f5a:	f845 c003 	str.w	ip, [r5, r3]
 8007f5e:	9b03      	ldr	r3, [sp, #12]
 8007f60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f64:	3104      	adds	r1, #4
 8007f66:	f1b9 0f00 	cmp.w	r9, #0
 8007f6a:	d021      	beq.n	8007fb0 <__multiply+0x144>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	f104 0c14 	add.w	ip, r4, #20
 8007f72:	46ae      	mov	lr, r5
 8007f74:	f04f 0a00 	mov.w	sl, #0
 8007f78:	f8bc b000 	ldrh.w	fp, [ip]
 8007f7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f80:	fb09 770b 	mla	r7, r9, fp, r7
 8007f84:	4457      	add	r7, sl
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f8c:	f84e 3b04 	str.w	r3, [lr], #4
 8007f90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f98:	f8be 3000 	ldrh.w	r3, [lr]
 8007f9c:	fb09 330a 	mla	r3, r9, sl, r3
 8007fa0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007fa4:	4562      	cmp	r2, ip
 8007fa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007faa:	d8e5      	bhi.n	8007f78 <__multiply+0x10c>
 8007fac:	9f01      	ldr	r7, [sp, #4]
 8007fae:	51eb      	str	r3, [r5, r7]
 8007fb0:	3504      	adds	r5, #4
 8007fb2:	e799      	b.n	8007ee8 <__multiply+0x7c>
 8007fb4:	3e01      	subs	r6, #1
 8007fb6:	e79b      	b.n	8007ef0 <__multiply+0x84>
 8007fb8:	08008f78 	.word	0x08008f78
 8007fbc:	08008f89 	.word	0x08008f89

08007fc0 <__pow5mult>:
 8007fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc4:	4615      	mov	r5, r2
 8007fc6:	f012 0203 	ands.w	r2, r2, #3
 8007fca:	4607      	mov	r7, r0
 8007fcc:	460e      	mov	r6, r1
 8007fce:	d007      	beq.n	8007fe0 <__pow5mult+0x20>
 8007fd0:	4c25      	ldr	r4, [pc, #148]	@ (8008068 <__pow5mult+0xa8>)
 8007fd2:	3a01      	subs	r2, #1
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fda:	f7ff fe9f 	bl	8007d1c <__multadd>
 8007fde:	4606      	mov	r6, r0
 8007fe0:	10ad      	asrs	r5, r5, #2
 8007fe2:	d03d      	beq.n	8008060 <__pow5mult+0xa0>
 8007fe4:	69fc      	ldr	r4, [r7, #28]
 8007fe6:	b97c      	cbnz	r4, 8008008 <__pow5mult+0x48>
 8007fe8:	2010      	movs	r0, #16
 8007fea:	f7ff fd7f 	bl	8007aec <malloc>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	61f8      	str	r0, [r7, #28]
 8007ff2:	b928      	cbnz	r0, 8008000 <__pow5mult+0x40>
 8007ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800806c <__pow5mult+0xac>)
 8007ff6:	481e      	ldr	r0, [pc, #120]	@ (8008070 <__pow5mult+0xb0>)
 8007ff8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ffc:	f000 fbea 	bl	80087d4 <__assert_func>
 8008000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008004:	6004      	str	r4, [r0, #0]
 8008006:	60c4      	str	r4, [r0, #12]
 8008008:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800800c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008010:	b94c      	cbnz	r4, 8008026 <__pow5mult+0x66>
 8008012:	f240 2171 	movw	r1, #625	@ 0x271
 8008016:	4638      	mov	r0, r7
 8008018:	f7ff ff12 	bl	8007e40 <__i2b>
 800801c:	2300      	movs	r3, #0
 800801e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008022:	4604      	mov	r4, r0
 8008024:	6003      	str	r3, [r0, #0]
 8008026:	f04f 0900 	mov.w	r9, #0
 800802a:	07eb      	lsls	r3, r5, #31
 800802c:	d50a      	bpl.n	8008044 <__pow5mult+0x84>
 800802e:	4631      	mov	r1, r6
 8008030:	4622      	mov	r2, r4
 8008032:	4638      	mov	r0, r7
 8008034:	f7ff ff1a 	bl	8007e6c <__multiply>
 8008038:	4631      	mov	r1, r6
 800803a:	4680      	mov	r8, r0
 800803c:	4638      	mov	r0, r7
 800803e:	f7ff fe4b 	bl	8007cd8 <_Bfree>
 8008042:	4646      	mov	r6, r8
 8008044:	106d      	asrs	r5, r5, #1
 8008046:	d00b      	beq.n	8008060 <__pow5mult+0xa0>
 8008048:	6820      	ldr	r0, [r4, #0]
 800804a:	b938      	cbnz	r0, 800805c <__pow5mult+0x9c>
 800804c:	4622      	mov	r2, r4
 800804e:	4621      	mov	r1, r4
 8008050:	4638      	mov	r0, r7
 8008052:	f7ff ff0b 	bl	8007e6c <__multiply>
 8008056:	6020      	str	r0, [r4, #0]
 8008058:	f8c0 9000 	str.w	r9, [r0]
 800805c:	4604      	mov	r4, r0
 800805e:	e7e4      	b.n	800802a <__pow5mult+0x6a>
 8008060:	4630      	mov	r0, r6
 8008062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008066:	bf00      	nop
 8008068:	08008fe4 	.word	0x08008fe4
 800806c:	08008f09 	.word	0x08008f09
 8008070:	08008f89 	.word	0x08008f89

08008074 <__lshift>:
 8008074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008078:	460c      	mov	r4, r1
 800807a:	6849      	ldr	r1, [r1, #4]
 800807c:	6923      	ldr	r3, [r4, #16]
 800807e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008082:	68a3      	ldr	r3, [r4, #8]
 8008084:	4607      	mov	r7, r0
 8008086:	4691      	mov	r9, r2
 8008088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800808c:	f108 0601 	add.w	r6, r8, #1
 8008090:	42b3      	cmp	r3, r6
 8008092:	db0b      	blt.n	80080ac <__lshift+0x38>
 8008094:	4638      	mov	r0, r7
 8008096:	f7ff fddf 	bl	8007c58 <_Balloc>
 800809a:	4605      	mov	r5, r0
 800809c:	b948      	cbnz	r0, 80080b2 <__lshift+0x3e>
 800809e:	4602      	mov	r2, r0
 80080a0:	4b28      	ldr	r3, [pc, #160]	@ (8008144 <__lshift+0xd0>)
 80080a2:	4829      	ldr	r0, [pc, #164]	@ (8008148 <__lshift+0xd4>)
 80080a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080a8:	f000 fb94 	bl	80087d4 <__assert_func>
 80080ac:	3101      	adds	r1, #1
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	e7ee      	b.n	8008090 <__lshift+0x1c>
 80080b2:	2300      	movs	r3, #0
 80080b4:	f100 0114 	add.w	r1, r0, #20
 80080b8:	f100 0210 	add.w	r2, r0, #16
 80080bc:	4618      	mov	r0, r3
 80080be:	4553      	cmp	r3, sl
 80080c0:	db33      	blt.n	800812a <__lshift+0xb6>
 80080c2:	6920      	ldr	r0, [r4, #16]
 80080c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080c8:	f104 0314 	add.w	r3, r4, #20
 80080cc:	f019 091f 	ands.w	r9, r9, #31
 80080d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080d8:	d02b      	beq.n	8008132 <__lshift+0xbe>
 80080da:	f1c9 0e20 	rsb	lr, r9, #32
 80080de:	468a      	mov	sl, r1
 80080e0:	2200      	movs	r2, #0
 80080e2:	6818      	ldr	r0, [r3, #0]
 80080e4:	fa00 f009 	lsl.w	r0, r0, r9
 80080e8:	4310      	orrs	r0, r2
 80080ea:	f84a 0b04 	str.w	r0, [sl], #4
 80080ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80080f2:	459c      	cmp	ip, r3
 80080f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80080f8:	d8f3      	bhi.n	80080e2 <__lshift+0x6e>
 80080fa:	ebac 0304 	sub.w	r3, ip, r4
 80080fe:	3b15      	subs	r3, #21
 8008100:	f023 0303 	bic.w	r3, r3, #3
 8008104:	3304      	adds	r3, #4
 8008106:	f104 0015 	add.w	r0, r4, #21
 800810a:	4584      	cmp	ip, r0
 800810c:	bf38      	it	cc
 800810e:	2304      	movcc	r3, #4
 8008110:	50ca      	str	r2, [r1, r3]
 8008112:	b10a      	cbz	r2, 8008118 <__lshift+0xa4>
 8008114:	f108 0602 	add.w	r6, r8, #2
 8008118:	3e01      	subs	r6, #1
 800811a:	4638      	mov	r0, r7
 800811c:	612e      	str	r6, [r5, #16]
 800811e:	4621      	mov	r1, r4
 8008120:	f7ff fdda 	bl	8007cd8 <_Bfree>
 8008124:	4628      	mov	r0, r5
 8008126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812a:	f842 0f04 	str.w	r0, [r2, #4]!
 800812e:	3301      	adds	r3, #1
 8008130:	e7c5      	b.n	80080be <__lshift+0x4a>
 8008132:	3904      	subs	r1, #4
 8008134:	f853 2b04 	ldr.w	r2, [r3], #4
 8008138:	f841 2f04 	str.w	r2, [r1, #4]!
 800813c:	459c      	cmp	ip, r3
 800813e:	d8f9      	bhi.n	8008134 <__lshift+0xc0>
 8008140:	e7ea      	b.n	8008118 <__lshift+0xa4>
 8008142:	bf00      	nop
 8008144:	08008f78 	.word	0x08008f78
 8008148:	08008f89 	.word	0x08008f89

0800814c <__mcmp>:
 800814c:	690a      	ldr	r2, [r1, #16]
 800814e:	4603      	mov	r3, r0
 8008150:	6900      	ldr	r0, [r0, #16]
 8008152:	1a80      	subs	r0, r0, r2
 8008154:	b530      	push	{r4, r5, lr}
 8008156:	d10e      	bne.n	8008176 <__mcmp+0x2a>
 8008158:	3314      	adds	r3, #20
 800815a:	3114      	adds	r1, #20
 800815c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008160:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008164:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008168:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800816c:	4295      	cmp	r5, r2
 800816e:	d003      	beq.n	8008178 <__mcmp+0x2c>
 8008170:	d205      	bcs.n	800817e <__mcmp+0x32>
 8008172:	f04f 30ff 	mov.w	r0, #4294967295
 8008176:	bd30      	pop	{r4, r5, pc}
 8008178:	42a3      	cmp	r3, r4
 800817a:	d3f3      	bcc.n	8008164 <__mcmp+0x18>
 800817c:	e7fb      	b.n	8008176 <__mcmp+0x2a>
 800817e:	2001      	movs	r0, #1
 8008180:	e7f9      	b.n	8008176 <__mcmp+0x2a>
	...

08008184 <__mdiff>:
 8008184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	4689      	mov	r9, r1
 800818a:	4606      	mov	r6, r0
 800818c:	4611      	mov	r1, r2
 800818e:	4648      	mov	r0, r9
 8008190:	4614      	mov	r4, r2
 8008192:	f7ff ffdb 	bl	800814c <__mcmp>
 8008196:	1e05      	subs	r5, r0, #0
 8008198:	d112      	bne.n	80081c0 <__mdiff+0x3c>
 800819a:	4629      	mov	r1, r5
 800819c:	4630      	mov	r0, r6
 800819e:	f7ff fd5b 	bl	8007c58 <_Balloc>
 80081a2:	4602      	mov	r2, r0
 80081a4:	b928      	cbnz	r0, 80081b2 <__mdiff+0x2e>
 80081a6:	4b3f      	ldr	r3, [pc, #252]	@ (80082a4 <__mdiff+0x120>)
 80081a8:	f240 2137 	movw	r1, #567	@ 0x237
 80081ac:	483e      	ldr	r0, [pc, #248]	@ (80082a8 <__mdiff+0x124>)
 80081ae:	f000 fb11 	bl	80087d4 <__assert_func>
 80081b2:	2301      	movs	r3, #1
 80081b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081b8:	4610      	mov	r0, r2
 80081ba:	b003      	add	sp, #12
 80081bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c0:	bfbc      	itt	lt
 80081c2:	464b      	movlt	r3, r9
 80081c4:	46a1      	movlt	r9, r4
 80081c6:	4630      	mov	r0, r6
 80081c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081cc:	bfba      	itte	lt
 80081ce:	461c      	movlt	r4, r3
 80081d0:	2501      	movlt	r5, #1
 80081d2:	2500      	movge	r5, #0
 80081d4:	f7ff fd40 	bl	8007c58 <_Balloc>
 80081d8:	4602      	mov	r2, r0
 80081da:	b918      	cbnz	r0, 80081e4 <__mdiff+0x60>
 80081dc:	4b31      	ldr	r3, [pc, #196]	@ (80082a4 <__mdiff+0x120>)
 80081de:	f240 2145 	movw	r1, #581	@ 0x245
 80081e2:	e7e3      	b.n	80081ac <__mdiff+0x28>
 80081e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081e8:	6926      	ldr	r6, [r4, #16]
 80081ea:	60c5      	str	r5, [r0, #12]
 80081ec:	f109 0310 	add.w	r3, r9, #16
 80081f0:	f109 0514 	add.w	r5, r9, #20
 80081f4:	f104 0e14 	add.w	lr, r4, #20
 80081f8:	f100 0b14 	add.w	fp, r0, #20
 80081fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008200:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	46d9      	mov	r9, fp
 8008208:	f04f 0c00 	mov.w	ip, #0
 800820c:	9b01      	ldr	r3, [sp, #4]
 800820e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008212:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	fa1f f38a 	uxth.w	r3, sl
 800821c:	4619      	mov	r1, r3
 800821e:	b283      	uxth	r3, r0
 8008220:	1acb      	subs	r3, r1, r3
 8008222:	0c00      	lsrs	r0, r0, #16
 8008224:	4463      	add	r3, ip
 8008226:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800822a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800822e:	b29b      	uxth	r3, r3
 8008230:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008234:	4576      	cmp	r6, lr
 8008236:	f849 3b04 	str.w	r3, [r9], #4
 800823a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800823e:	d8e5      	bhi.n	800820c <__mdiff+0x88>
 8008240:	1b33      	subs	r3, r6, r4
 8008242:	3b15      	subs	r3, #21
 8008244:	f023 0303 	bic.w	r3, r3, #3
 8008248:	3415      	adds	r4, #21
 800824a:	3304      	adds	r3, #4
 800824c:	42a6      	cmp	r6, r4
 800824e:	bf38      	it	cc
 8008250:	2304      	movcc	r3, #4
 8008252:	441d      	add	r5, r3
 8008254:	445b      	add	r3, fp
 8008256:	461e      	mov	r6, r3
 8008258:	462c      	mov	r4, r5
 800825a:	4544      	cmp	r4, r8
 800825c:	d30e      	bcc.n	800827c <__mdiff+0xf8>
 800825e:	f108 0103 	add.w	r1, r8, #3
 8008262:	1b49      	subs	r1, r1, r5
 8008264:	f021 0103 	bic.w	r1, r1, #3
 8008268:	3d03      	subs	r5, #3
 800826a:	45a8      	cmp	r8, r5
 800826c:	bf38      	it	cc
 800826e:	2100      	movcc	r1, #0
 8008270:	440b      	add	r3, r1
 8008272:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008276:	b191      	cbz	r1, 800829e <__mdiff+0x11a>
 8008278:	6117      	str	r7, [r2, #16]
 800827a:	e79d      	b.n	80081b8 <__mdiff+0x34>
 800827c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008280:	46e6      	mov	lr, ip
 8008282:	0c08      	lsrs	r0, r1, #16
 8008284:	fa1c fc81 	uxtah	ip, ip, r1
 8008288:	4471      	add	r1, lr
 800828a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800828e:	b289      	uxth	r1, r1
 8008290:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008294:	f846 1b04 	str.w	r1, [r6], #4
 8008298:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800829c:	e7dd      	b.n	800825a <__mdiff+0xd6>
 800829e:	3f01      	subs	r7, #1
 80082a0:	e7e7      	b.n	8008272 <__mdiff+0xee>
 80082a2:	bf00      	nop
 80082a4:	08008f78 	.word	0x08008f78
 80082a8:	08008f89 	.word	0x08008f89

080082ac <__d2b>:
 80082ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082b0:	460f      	mov	r7, r1
 80082b2:	2101      	movs	r1, #1
 80082b4:	ec59 8b10 	vmov	r8, r9, d0
 80082b8:	4616      	mov	r6, r2
 80082ba:	f7ff fccd 	bl	8007c58 <_Balloc>
 80082be:	4604      	mov	r4, r0
 80082c0:	b930      	cbnz	r0, 80082d0 <__d2b+0x24>
 80082c2:	4602      	mov	r2, r0
 80082c4:	4b23      	ldr	r3, [pc, #140]	@ (8008354 <__d2b+0xa8>)
 80082c6:	4824      	ldr	r0, [pc, #144]	@ (8008358 <__d2b+0xac>)
 80082c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80082cc:	f000 fa82 	bl	80087d4 <__assert_func>
 80082d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082d8:	b10d      	cbz	r5, 80082de <__d2b+0x32>
 80082da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	f1b8 0300 	subs.w	r3, r8, #0
 80082e4:	d023      	beq.n	800832e <__d2b+0x82>
 80082e6:	4668      	mov	r0, sp
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	f7ff fd7c 	bl	8007de6 <__lo0bits>
 80082ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082f2:	b1d0      	cbz	r0, 800832a <__d2b+0x7e>
 80082f4:	f1c0 0320 	rsb	r3, r0, #32
 80082f8:	fa02 f303 	lsl.w	r3, r2, r3
 80082fc:	430b      	orrs	r3, r1
 80082fe:	40c2      	lsrs	r2, r0
 8008300:	6163      	str	r3, [r4, #20]
 8008302:	9201      	str	r2, [sp, #4]
 8008304:	9b01      	ldr	r3, [sp, #4]
 8008306:	61a3      	str	r3, [r4, #24]
 8008308:	2b00      	cmp	r3, #0
 800830a:	bf0c      	ite	eq
 800830c:	2201      	moveq	r2, #1
 800830e:	2202      	movne	r2, #2
 8008310:	6122      	str	r2, [r4, #16]
 8008312:	b1a5      	cbz	r5, 800833e <__d2b+0x92>
 8008314:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008318:	4405      	add	r5, r0
 800831a:	603d      	str	r5, [r7, #0]
 800831c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008320:	6030      	str	r0, [r6, #0]
 8008322:	4620      	mov	r0, r4
 8008324:	b003      	add	sp, #12
 8008326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800832a:	6161      	str	r1, [r4, #20]
 800832c:	e7ea      	b.n	8008304 <__d2b+0x58>
 800832e:	a801      	add	r0, sp, #4
 8008330:	f7ff fd59 	bl	8007de6 <__lo0bits>
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	6163      	str	r3, [r4, #20]
 8008338:	3020      	adds	r0, #32
 800833a:	2201      	movs	r2, #1
 800833c:	e7e8      	b.n	8008310 <__d2b+0x64>
 800833e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008342:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008346:	6038      	str	r0, [r7, #0]
 8008348:	6918      	ldr	r0, [r3, #16]
 800834a:	f7ff fd2d 	bl	8007da8 <__hi0bits>
 800834e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008352:	e7e5      	b.n	8008320 <__d2b+0x74>
 8008354:	08008f78 	.word	0x08008f78
 8008358:	08008f89 	.word	0x08008f89

0800835c <__ssputs_r>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	688e      	ldr	r6, [r1, #8]
 8008362:	461f      	mov	r7, r3
 8008364:	42be      	cmp	r6, r7
 8008366:	680b      	ldr	r3, [r1, #0]
 8008368:	4682      	mov	sl, r0
 800836a:	460c      	mov	r4, r1
 800836c:	4690      	mov	r8, r2
 800836e:	d82d      	bhi.n	80083cc <__ssputs_r+0x70>
 8008370:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008374:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008378:	d026      	beq.n	80083c8 <__ssputs_r+0x6c>
 800837a:	6965      	ldr	r5, [r4, #20]
 800837c:	6909      	ldr	r1, [r1, #16]
 800837e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008382:	eba3 0901 	sub.w	r9, r3, r1
 8008386:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800838a:	1c7b      	adds	r3, r7, #1
 800838c:	444b      	add	r3, r9
 800838e:	106d      	asrs	r5, r5, #1
 8008390:	429d      	cmp	r5, r3
 8008392:	bf38      	it	cc
 8008394:	461d      	movcc	r5, r3
 8008396:	0553      	lsls	r3, r2, #21
 8008398:	d527      	bpl.n	80083ea <__ssputs_r+0x8e>
 800839a:	4629      	mov	r1, r5
 800839c:	f7ff fbd0 	bl	8007b40 <_malloc_r>
 80083a0:	4606      	mov	r6, r0
 80083a2:	b360      	cbz	r0, 80083fe <__ssputs_r+0xa2>
 80083a4:	6921      	ldr	r1, [r4, #16]
 80083a6:	464a      	mov	r2, r9
 80083a8:	f000 fa06 	bl	80087b8 <memcpy>
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083b6:	81a3      	strh	r3, [r4, #12]
 80083b8:	6126      	str	r6, [r4, #16]
 80083ba:	6165      	str	r5, [r4, #20]
 80083bc:	444e      	add	r6, r9
 80083be:	eba5 0509 	sub.w	r5, r5, r9
 80083c2:	6026      	str	r6, [r4, #0]
 80083c4:	60a5      	str	r5, [r4, #8]
 80083c6:	463e      	mov	r6, r7
 80083c8:	42be      	cmp	r6, r7
 80083ca:	d900      	bls.n	80083ce <__ssputs_r+0x72>
 80083cc:	463e      	mov	r6, r7
 80083ce:	6820      	ldr	r0, [r4, #0]
 80083d0:	4632      	mov	r2, r6
 80083d2:	4641      	mov	r1, r8
 80083d4:	f000 f9c6 	bl	8008764 <memmove>
 80083d8:	68a3      	ldr	r3, [r4, #8]
 80083da:	1b9b      	subs	r3, r3, r6
 80083dc:	60a3      	str	r3, [r4, #8]
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	4433      	add	r3, r6
 80083e2:	6023      	str	r3, [r4, #0]
 80083e4:	2000      	movs	r0, #0
 80083e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ea:	462a      	mov	r2, r5
 80083ec:	f000 fa36 	bl	800885c <_realloc_r>
 80083f0:	4606      	mov	r6, r0
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d1e0      	bne.n	80083b8 <__ssputs_r+0x5c>
 80083f6:	6921      	ldr	r1, [r4, #16]
 80083f8:	4650      	mov	r0, sl
 80083fa:	f7ff fb2d 	bl	8007a58 <_free_r>
 80083fe:	230c      	movs	r3, #12
 8008400:	f8ca 3000 	str.w	r3, [sl]
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800840a:	81a3      	strh	r3, [r4, #12]
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	e7e9      	b.n	80083e6 <__ssputs_r+0x8a>
	...

08008414 <_svfiprintf_r>:
 8008414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008418:	4698      	mov	r8, r3
 800841a:	898b      	ldrh	r3, [r1, #12]
 800841c:	061b      	lsls	r3, r3, #24
 800841e:	b09d      	sub	sp, #116	@ 0x74
 8008420:	4607      	mov	r7, r0
 8008422:	460d      	mov	r5, r1
 8008424:	4614      	mov	r4, r2
 8008426:	d510      	bpl.n	800844a <_svfiprintf_r+0x36>
 8008428:	690b      	ldr	r3, [r1, #16]
 800842a:	b973      	cbnz	r3, 800844a <_svfiprintf_r+0x36>
 800842c:	2140      	movs	r1, #64	@ 0x40
 800842e:	f7ff fb87 	bl	8007b40 <_malloc_r>
 8008432:	6028      	str	r0, [r5, #0]
 8008434:	6128      	str	r0, [r5, #16]
 8008436:	b930      	cbnz	r0, 8008446 <_svfiprintf_r+0x32>
 8008438:	230c      	movs	r3, #12
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	b01d      	add	sp, #116	@ 0x74
 8008442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008446:	2340      	movs	r3, #64	@ 0x40
 8008448:	616b      	str	r3, [r5, #20]
 800844a:	2300      	movs	r3, #0
 800844c:	9309      	str	r3, [sp, #36]	@ 0x24
 800844e:	2320      	movs	r3, #32
 8008450:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008454:	f8cd 800c 	str.w	r8, [sp, #12]
 8008458:	2330      	movs	r3, #48	@ 0x30
 800845a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085f8 <_svfiprintf_r+0x1e4>
 800845e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008462:	f04f 0901 	mov.w	r9, #1
 8008466:	4623      	mov	r3, r4
 8008468:	469a      	mov	sl, r3
 800846a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800846e:	b10a      	cbz	r2, 8008474 <_svfiprintf_r+0x60>
 8008470:	2a25      	cmp	r2, #37	@ 0x25
 8008472:	d1f9      	bne.n	8008468 <_svfiprintf_r+0x54>
 8008474:	ebba 0b04 	subs.w	fp, sl, r4
 8008478:	d00b      	beq.n	8008492 <_svfiprintf_r+0x7e>
 800847a:	465b      	mov	r3, fp
 800847c:	4622      	mov	r2, r4
 800847e:	4629      	mov	r1, r5
 8008480:	4638      	mov	r0, r7
 8008482:	f7ff ff6b 	bl	800835c <__ssputs_r>
 8008486:	3001      	adds	r0, #1
 8008488:	f000 80a7 	beq.w	80085da <_svfiprintf_r+0x1c6>
 800848c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800848e:	445a      	add	r2, fp
 8008490:	9209      	str	r2, [sp, #36]	@ 0x24
 8008492:	f89a 3000 	ldrb.w	r3, [sl]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 809f 	beq.w	80085da <_svfiprintf_r+0x1c6>
 800849c:	2300      	movs	r3, #0
 800849e:	f04f 32ff 	mov.w	r2, #4294967295
 80084a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084a6:	f10a 0a01 	add.w	sl, sl, #1
 80084aa:	9304      	str	r3, [sp, #16]
 80084ac:	9307      	str	r3, [sp, #28]
 80084ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80084b4:	4654      	mov	r4, sl
 80084b6:	2205      	movs	r2, #5
 80084b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084bc:	484e      	ldr	r0, [pc, #312]	@ (80085f8 <_svfiprintf_r+0x1e4>)
 80084be:	f7f7 fea7 	bl	8000210 <memchr>
 80084c2:	9a04      	ldr	r2, [sp, #16]
 80084c4:	b9d8      	cbnz	r0, 80084fe <_svfiprintf_r+0xea>
 80084c6:	06d0      	lsls	r0, r2, #27
 80084c8:	bf44      	itt	mi
 80084ca:	2320      	movmi	r3, #32
 80084cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084d0:	0711      	lsls	r1, r2, #28
 80084d2:	bf44      	itt	mi
 80084d4:	232b      	movmi	r3, #43	@ 0x2b
 80084d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084da:	f89a 3000 	ldrb.w	r3, [sl]
 80084de:	2b2a      	cmp	r3, #42	@ 0x2a
 80084e0:	d015      	beq.n	800850e <_svfiprintf_r+0xfa>
 80084e2:	9a07      	ldr	r2, [sp, #28]
 80084e4:	4654      	mov	r4, sl
 80084e6:	2000      	movs	r0, #0
 80084e8:	f04f 0c0a 	mov.w	ip, #10
 80084ec:	4621      	mov	r1, r4
 80084ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084f2:	3b30      	subs	r3, #48	@ 0x30
 80084f4:	2b09      	cmp	r3, #9
 80084f6:	d94b      	bls.n	8008590 <_svfiprintf_r+0x17c>
 80084f8:	b1b0      	cbz	r0, 8008528 <_svfiprintf_r+0x114>
 80084fa:	9207      	str	r2, [sp, #28]
 80084fc:	e014      	b.n	8008528 <_svfiprintf_r+0x114>
 80084fe:	eba0 0308 	sub.w	r3, r0, r8
 8008502:	fa09 f303 	lsl.w	r3, r9, r3
 8008506:	4313      	orrs	r3, r2
 8008508:	9304      	str	r3, [sp, #16]
 800850a:	46a2      	mov	sl, r4
 800850c:	e7d2      	b.n	80084b4 <_svfiprintf_r+0xa0>
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	1d19      	adds	r1, r3, #4
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	9103      	str	r1, [sp, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	bfbb      	ittet	lt
 800851a:	425b      	neglt	r3, r3
 800851c:	f042 0202 	orrlt.w	r2, r2, #2
 8008520:	9307      	strge	r3, [sp, #28]
 8008522:	9307      	strlt	r3, [sp, #28]
 8008524:	bfb8      	it	lt
 8008526:	9204      	strlt	r2, [sp, #16]
 8008528:	7823      	ldrb	r3, [r4, #0]
 800852a:	2b2e      	cmp	r3, #46	@ 0x2e
 800852c:	d10a      	bne.n	8008544 <_svfiprintf_r+0x130>
 800852e:	7863      	ldrb	r3, [r4, #1]
 8008530:	2b2a      	cmp	r3, #42	@ 0x2a
 8008532:	d132      	bne.n	800859a <_svfiprintf_r+0x186>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	1d1a      	adds	r2, r3, #4
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	9203      	str	r2, [sp, #12]
 800853c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008540:	3402      	adds	r4, #2
 8008542:	9305      	str	r3, [sp, #20]
 8008544:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008608 <_svfiprintf_r+0x1f4>
 8008548:	7821      	ldrb	r1, [r4, #0]
 800854a:	2203      	movs	r2, #3
 800854c:	4650      	mov	r0, sl
 800854e:	f7f7 fe5f 	bl	8000210 <memchr>
 8008552:	b138      	cbz	r0, 8008564 <_svfiprintf_r+0x150>
 8008554:	9b04      	ldr	r3, [sp, #16]
 8008556:	eba0 000a 	sub.w	r0, r0, sl
 800855a:	2240      	movs	r2, #64	@ 0x40
 800855c:	4082      	lsls	r2, r0
 800855e:	4313      	orrs	r3, r2
 8008560:	3401      	adds	r4, #1
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008568:	4824      	ldr	r0, [pc, #144]	@ (80085fc <_svfiprintf_r+0x1e8>)
 800856a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800856e:	2206      	movs	r2, #6
 8008570:	f7f7 fe4e 	bl	8000210 <memchr>
 8008574:	2800      	cmp	r0, #0
 8008576:	d036      	beq.n	80085e6 <_svfiprintf_r+0x1d2>
 8008578:	4b21      	ldr	r3, [pc, #132]	@ (8008600 <_svfiprintf_r+0x1ec>)
 800857a:	bb1b      	cbnz	r3, 80085c4 <_svfiprintf_r+0x1b0>
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	3307      	adds	r3, #7
 8008580:	f023 0307 	bic.w	r3, r3, #7
 8008584:	3308      	adds	r3, #8
 8008586:	9303      	str	r3, [sp, #12]
 8008588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858a:	4433      	add	r3, r6
 800858c:	9309      	str	r3, [sp, #36]	@ 0x24
 800858e:	e76a      	b.n	8008466 <_svfiprintf_r+0x52>
 8008590:	fb0c 3202 	mla	r2, ip, r2, r3
 8008594:	460c      	mov	r4, r1
 8008596:	2001      	movs	r0, #1
 8008598:	e7a8      	b.n	80084ec <_svfiprintf_r+0xd8>
 800859a:	2300      	movs	r3, #0
 800859c:	3401      	adds	r4, #1
 800859e:	9305      	str	r3, [sp, #20]
 80085a0:	4619      	mov	r1, r3
 80085a2:	f04f 0c0a 	mov.w	ip, #10
 80085a6:	4620      	mov	r0, r4
 80085a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ac:	3a30      	subs	r2, #48	@ 0x30
 80085ae:	2a09      	cmp	r2, #9
 80085b0:	d903      	bls.n	80085ba <_svfiprintf_r+0x1a6>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0c6      	beq.n	8008544 <_svfiprintf_r+0x130>
 80085b6:	9105      	str	r1, [sp, #20]
 80085b8:	e7c4      	b.n	8008544 <_svfiprintf_r+0x130>
 80085ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80085be:	4604      	mov	r4, r0
 80085c0:	2301      	movs	r3, #1
 80085c2:	e7f0      	b.n	80085a6 <_svfiprintf_r+0x192>
 80085c4:	ab03      	add	r3, sp, #12
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	462a      	mov	r2, r5
 80085ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008604 <_svfiprintf_r+0x1f0>)
 80085cc:	a904      	add	r1, sp, #16
 80085ce:	4638      	mov	r0, r7
 80085d0:	f7fd fe84 	bl	80062dc <_printf_float>
 80085d4:	1c42      	adds	r2, r0, #1
 80085d6:	4606      	mov	r6, r0
 80085d8:	d1d6      	bne.n	8008588 <_svfiprintf_r+0x174>
 80085da:	89ab      	ldrh	r3, [r5, #12]
 80085dc:	065b      	lsls	r3, r3, #25
 80085de:	f53f af2d 	bmi.w	800843c <_svfiprintf_r+0x28>
 80085e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085e4:	e72c      	b.n	8008440 <_svfiprintf_r+0x2c>
 80085e6:	ab03      	add	r3, sp, #12
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	462a      	mov	r2, r5
 80085ec:	4b05      	ldr	r3, [pc, #20]	@ (8008604 <_svfiprintf_r+0x1f0>)
 80085ee:	a904      	add	r1, sp, #16
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7fe f90b 	bl	800680c <_printf_i>
 80085f6:	e7ed      	b.n	80085d4 <_svfiprintf_r+0x1c0>
 80085f8:	080090e0 	.word	0x080090e0
 80085fc:	080090ea 	.word	0x080090ea
 8008600:	080062dd 	.word	0x080062dd
 8008604:	0800835d 	.word	0x0800835d
 8008608:	080090e6 	.word	0x080090e6

0800860c <__sflush_r>:
 800860c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008614:	0716      	lsls	r6, r2, #28
 8008616:	4605      	mov	r5, r0
 8008618:	460c      	mov	r4, r1
 800861a:	d454      	bmi.n	80086c6 <__sflush_r+0xba>
 800861c:	684b      	ldr	r3, [r1, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	dc02      	bgt.n	8008628 <__sflush_r+0x1c>
 8008622:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	dd48      	ble.n	80086ba <__sflush_r+0xae>
 8008628:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800862a:	2e00      	cmp	r6, #0
 800862c:	d045      	beq.n	80086ba <__sflush_r+0xae>
 800862e:	2300      	movs	r3, #0
 8008630:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008634:	682f      	ldr	r7, [r5, #0]
 8008636:	6a21      	ldr	r1, [r4, #32]
 8008638:	602b      	str	r3, [r5, #0]
 800863a:	d030      	beq.n	800869e <__sflush_r+0x92>
 800863c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800863e:	89a3      	ldrh	r3, [r4, #12]
 8008640:	0759      	lsls	r1, r3, #29
 8008642:	d505      	bpl.n	8008650 <__sflush_r+0x44>
 8008644:	6863      	ldr	r3, [r4, #4]
 8008646:	1ad2      	subs	r2, r2, r3
 8008648:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800864a:	b10b      	cbz	r3, 8008650 <__sflush_r+0x44>
 800864c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	2300      	movs	r3, #0
 8008652:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008654:	6a21      	ldr	r1, [r4, #32]
 8008656:	4628      	mov	r0, r5
 8008658:	47b0      	blx	r6
 800865a:	1c43      	adds	r3, r0, #1
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	d106      	bne.n	800866e <__sflush_r+0x62>
 8008660:	6829      	ldr	r1, [r5, #0]
 8008662:	291d      	cmp	r1, #29
 8008664:	d82b      	bhi.n	80086be <__sflush_r+0xb2>
 8008666:	4a2a      	ldr	r2, [pc, #168]	@ (8008710 <__sflush_r+0x104>)
 8008668:	410a      	asrs	r2, r1
 800866a:	07d6      	lsls	r6, r2, #31
 800866c:	d427      	bmi.n	80086be <__sflush_r+0xb2>
 800866e:	2200      	movs	r2, #0
 8008670:	6062      	str	r2, [r4, #4]
 8008672:	04d9      	lsls	r1, r3, #19
 8008674:	6922      	ldr	r2, [r4, #16]
 8008676:	6022      	str	r2, [r4, #0]
 8008678:	d504      	bpl.n	8008684 <__sflush_r+0x78>
 800867a:	1c42      	adds	r2, r0, #1
 800867c:	d101      	bne.n	8008682 <__sflush_r+0x76>
 800867e:	682b      	ldr	r3, [r5, #0]
 8008680:	b903      	cbnz	r3, 8008684 <__sflush_r+0x78>
 8008682:	6560      	str	r0, [r4, #84]	@ 0x54
 8008684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008686:	602f      	str	r7, [r5, #0]
 8008688:	b1b9      	cbz	r1, 80086ba <__sflush_r+0xae>
 800868a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800868e:	4299      	cmp	r1, r3
 8008690:	d002      	beq.n	8008698 <__sflush_r+0x8c>
 8008692:	4628      	mov	r0, r5
 8008694:	f7ff f9e0 	bl	8007a58 <_free_r>
 8008698:	2300      	movs	r3, #0
 800869a:	6363      	str	r3, [r4, #52]	@ 0x34
 800869c:	e00d      	b.n	80086ba <__sflush_r+0xae>
 800869e:	2301      	movs	r3, #1
 80086a0:	4628      	mov	r0, r5
 80086a2:	47b0      	blx	r6
 80086a4:	4602      	mov	r2, r0
 80086a6:	1c50      	adds	r0, r2, #1
 80086a8:	d1c9      	bne.n	800863e <__sflush_r+0x32>
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0c6      	beq.n	800863e <__sflush_r+0x32>
 80086b0:	2b1d      	cmp	r3, #29
 80086b2:	d001      	beq.n	80086b8 <__sflush_r+0xac>
 80086b4:	2b16      	cmp	r3, #22
 80086b6:	d11e      	bne.n	80086f6 <__sflush_r+0xea>
 80086b8:	602f      	str	r7, [r5, #0]
 80086ba:	2000      	movs	r0, #0
 80086bc:	e022      	b.n	8008704 <__sflush_r+0xf8>
 80086be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086c2:	b21b      	sxth	r3, r3
 80086c4:	e01b      	b.n	80086fe <__sflush_r+0xf2>
 80086c6:	690f      	ldr	r7, [r1, #16]
 80086c8:	2f00      	cmp	r7, #0
 80086ca:	d0f6      	beq.n	80086ba <__sflush_r+0xae>
 80086cc:	0793      	lsls	r3, r2, #30
 80086ce:	680e      	ldr	r6, [r1, #0]
 80086d0:	bf08      	it	eq
 80086d2:	694b      	ldreq	r3, [r1, #20]
 80086d4:	600f      	str	r7, [r1, #0]
 80086d6:	bf18      	it	ne
 80086d8:	2300      	movne	r3, #0
 80086da:	eba6 0807 	sub.w	r8, r6, r7
 80086de:	608b      	str	r3, [r1, #8]
 80086e0:	f1b8 0f00 	cmp.w	r8, #0
 80086e4:	dde9      	ble.n	80086ba <__sflush_r+0xae>
 80086e6:	6a21      	ldr	r1, [r4, #32]
 80086e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086ea:	4643      	mov	r3, r8
 80086ec:	463a      	mov	r2, r7
 80086ee:	4628      	mov	r0, r5
 80086f0:	47b0      	blx	r6
 80086f2:	2800      	cmp	r0, #0
 80086f4:	dc08      	bgt.n	8008708 <__sflush_r+0xfc>
 80086f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086fe:	81a3      	strh	r3, [r4, #12]
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
 8008704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008708:	4407      	add	r7, r0
 800870a:	eba8 0800 	sub.w	r8, r8, r0
 800870e:	e7e7      	b.n	80086e0 <__sflush_r+0xd4>
 8008710:	dfbffffe 	.word	0xdfbffffe

08008714 <_fflush_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	690b      	ldr	r3, [r1, #16]
 8008718:	4605      	mov	r5, r0
 800871a:	460c      	mov	r4, r1
 800871c:	b913      	cbnz	r3, 8008724 <_fflush_r+0x10>
 800871e:	2500      	movs	r5, #0
 8008720:	4628      	mov	r0, r5
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	b118      	cbz	r0, 800872e <_fflush_r+0x1a>
 8008726:	6a03      	ldr	r3, [r0, #32]
 8008728:	b90b      	cbnz	r3, 800872e <_fflush_r+0x1a>
 800872a:	f7fe fa1b 	bl	8006b64 <__sinit>
 800872e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0f3      	beq.n	800871e <_fflush_r+0xa>
 8008736:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008738:	07d0      	lsls	r0, r2, #31
 800873a:	d404      	bmi.n	8008746 <_fflush_r+0x32>
 800873c:	0599      	lsls	r1, r3, #22
 800873e:	d402      	bmi.n	8008746 <_fflush_r+0x32>
 8008740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008742:	f7fe fb3a 	bl	8006dba <__retarget_lock_acquire_recursive>
 8008746:	4628      	mov	r0, r5
 8008748:	4621      	mov	r1, r4
 800874a:	f7ff ff5f 	bl	800860c <__sflush_r>
 800874e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008750:	07da      	lsls	r2, r3, #31
 8008752:	4605      	mov	r5, r0
 8008754:	d4e4      	bmi.n	8008720 <_fflush_r+0xc>
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	059b      	lsls	r3, r3, #22
 800875a:	d4e1      	bmi.n	8008720 <_fflush_r+0xc>
 800875c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800875e:	f7fe fb2d 	bl	8006dbc <__retarget_lock_release_recursive>
 8008762:	e7dd      	b.n	8008720 <_fflush_r+0xc>

08008764 <memmove>:
 8008764:	4288      	cmp	r0, r1
 8008766:	b510      	push	{r4, lr}
 8008768:	eb01 0402 	add.w	r4, r1, r2
 800876c:	d902      	bls.n	8008774 <memmove+0x10>
 800876e:	4284      	cmp	r4, r0
 8008770:	4623      	mov	r3, r4
 8008772:	d807      	bhi.n	8008784 <memmove+0x20>
 8008774:	1e43      	subs	r3, r0, #1
 8008776:	42a1      	cmp	r1, r4
 8008778:	d008      	beq.n	800878c <memmove+0x28>
 800877a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800877e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008782:	e7f8      	b.n	8008776 <memmove+0x12>
 8008784:	4402      	add	r2, r0
 8008786:	4601      	mov	r1, r0
 8008788:	428a      	cmp	r2, r1
 800878a:	d100      	bne.n	800878e <memmove+0x2a>
 800878c:	bd10      	pop	{r4, pc}
 800878e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008796:	e7f7      	b.n	8008788 <memmove+0x24>

08008798 <_sbrk_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d06      	ldr	r5, [pc, #24]	@ (80087b4 <_sbrk_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7f9 fbf8 	bl	8001f98 <_sbrk>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_sbrk_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_sbrk_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	2000098c 	.word	0x2000098c

080087b8 <memcpy>:
 80087b8:	440a      	add	r2, r1
 80087ba:	4291      	cmp	r1, r2
 80087bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80087c0:	d100      	bne.n	80087c4 <memcpy+0xc>
 80087c2:	4770      	bx	lr
 80087c4:	b510      	push	{r4, lr}
 80087c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ce:	4291      	cmp	r1, r2
 80087d0:	d1f9      	bne.n	80087c6 <memcpy+0xe>
 80087d2:	bd10      	pop	{r4, pc}

080087d4 <__assert_func>:
 80087d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087d6:	4614      	mov	r4, r2
 80087d8:	461a      	mov	r2, r3
 80087da:	4b09      	ldr	r3, [pc, #36]	@ (8008800 <__assert_func+0x2c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4605      	mov	r5, r0
 80087e0:	68d8      	ldr	r0, [r3, #12]
 80087e2:	b954      	cbnz	r4, 80087fa <__assert_func+0x26>
 80087e4:	4b07      	ldr	r3, [pc, #28]	@ (8008804 <__assert_func+0x30>)
 80087e6:	461c      	mov	r4, r3
 80087e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087ec:	9100      	str	r1, [sp, #0]
 80087ee:	462b      	mov	r3, r5
 80087f0:	4905      	ldr	r1, [pc, #20]	@ (8008808 <__assert_func+0x34>)
 80087f2:	f000 f86f 	bl	80088d4 <fiprintf>
 80087f6:	f000 f87f 	bl	80088f8 <abort>
 80087fa:	4b04      	ldr	r3, [pc, #16]	@ (800880c <__assert_func+0x38>)
 80087fc:	e7f4      	b.n	80087e8 <__assert_func+0x14>
 80087fe:	bf00      	nop
 8008800:	20000018 	.word	0x20000018
 8008804:	08009136 	.word	0x08009136
 8008808:	08009108 	.word	0x08009108
 800880c:	080090fb 	.word	0x080090fb

08008810 <_calloc_r>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	fba1 5402 	umull	r5, r4, r1, r2
 8008816:	b93c      	cbnz	r4, 8008828 <_calloc_r+0x18>
 8008818:	4629      	mov	r1, r5
 800881a:	f7ff f991 	bl	8007b40 <_malloc_r>
 800881e:	4606      	mov	r6, r0
 8008820:	b928      	cbnz	r0, 800882e <_calloc_r+0x1e>
 8008822:	2600      	movs	r6, #0
 8008824:	4630      	mov	r0, r6
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	220c      	movs	r2, #12
 800882a:	6002      	str	r2, [r0, #0]
 800882c:	e7f9      	b.n	8008822 <_calloc_r+0x12>
 800882e:	462a      	mov	r2, r5
 8008830:	4621      	mov	r1, r4
 8008832:	f7fe fa44 	bl	8006cbe <memset>
 8008836:	e7f5      	b.n	8008824 <_calloc_r+0x14>

08008838 <__ascii_mbtowc>:
 8008838:	b082      	sub	sp, #8
 800883a:	b901      	cbnz	r1, 800883e <__ascii_mbtowc+0x6>
 800883c:	a901      	add	r1, sp, #4
 800883e:	b142      	cbz	r2, 8008852 <__ascii_mbtowc+0x1a>
 8008840:	b14b      	cbz	r3, 8008856 <__ascii_mbtowc+0x1e>
 8008842:	7813      	ldrb	r3, [r2, #0]
 8008844:	600b      	str	r3, [r1, #0]
 8008846:	7812      	ldrb	r2, [r2, #0]
 8008848:	1e10      	subs	r0, r2, #0
 800884a:	bf18      	it	ne
 800884c:	2001      	movne	r0, #1
 800884e:	b002      	add	sp, #8
 8008850:	4770      	bx	lr
 8008852:	4610      	mov	r0, r2
 8008854:	e7fb      	b.n	800884e <__ascii_mbtowc+0x16>
 8008856:	f06f 0001 	mvn.w	r0, #1
 800885a:	e7f8      	b.n	800884e <__ascii_mbtowc+0x16>

0800885c <_realloc_r>:
 800885c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008860:	4680      	mov	r8, r0
 8008862:	4615      	mov	r5, r2
 8008864:	460c      	mov	r4, r1
 8008866:	b921      	cbnz	r1, 8008872 <_realloc_r+0x16>
 8008868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800886c:	4611      	mov	r1, r2
 800886e:	f7ff b967 	b.w	8007b40 <_malloc_r>
 8008872:	b92a      	cbnz	r2, 8008880 <_realloc_r+0x24>
 8008874:	f7ff f8f0 	bl	8007a58 <_free_r>
 8008878:	2400      	movs	r4, #0
 800887a:	4620      	mov	r0, r4
 800887c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008880:	f000 f841 	bl	8008906 <_malloc_usable_size_r>
 8008884:	4285      	cmp	r5, r0
 8008886:	4606      	mov	r6, r0
 8008888:	d802      	bhi.n	8008890 <_realloc_r+0x34>
 800888a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800888e:	d8f4      	bhi.n	800887a <_realloc_r+0x1e>
 8008890:	4629      	mov	r1, r5
 8008892:	4640      	mov	r0, r8
 8008894:	f7ff f954 	bl	8007b40 <_malloc_r>
 8008898:	4607      	mov	r7, r0
 800889a:	2800      	cmp	r0, #0
 800889c:	d0ec      	beq.n	8008878 <_realloc_r+0x1c>
 800889e:	42b5      	cmp	r5, r6
 80088a0:	462a      	mov	r2, r5
 80088a2:	4621      	mov	r1, r4
 80088a4:	bf28      	it	cs
 80088a6:	4632      	movcs	r2, r6
 80088a8:	f7ff ff86 	bl	80087b8 <memcpy>
 80088ac:	4621      	mov	r1, r4
 80088ae:	4640      	mov	r0, r8
 80088b0:	f7ff f8d2 	bl	8007a58 <_free_r>
 80088b4:	463c      	mov	r4, r7
 80088b6:	e7e0      	b.n	800887a <_realloc_r+0x1e>

080088b8 <__ascii_wctomb>:
 80088b8:	4603      	mov	r3, r0
 80088ba:	4608      	mov	r0, r1
 80088bc:	b141      	cbz	r1, 80088d0 <__ascii_wctomb+0x18>
 80088be:	2aff      	cmp	r2, #255	@ 0xff
 80088c0:	d904      	bls.n	80088cc <__ascii_wctomb+0x14>
 80088c2:	228a      	movs	r2, #138	@ 0x8a
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ca:	4770      	bx	lr
 80088cc:	700a      	strb	r2, [r1, #0]
 80088ce:	2001      	movs	r0, #1
 80088d0:	4770      	bx	lr
	...

080088d4 <fiprintf>:
 80088d4:	b40e      	push	{r1, r2, r3}
 80088d6:	b503      	push	{r0, r1, lr}
 80088d8:	4601      	mov	r1, r0
 80088da:	ab03      	add	r3, sp, #12
 80088dc:	4805      	ldr	r0, [pc, #20]	@ (80088f4 <fiprintf+0x20>)
 80088de:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e2:	6800      	ldr	r0, [r0, #0]
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	f000 f83f 	bl	8008968 <_vfiprintf_r>
 80088ea:	b002      	add	sp, #8
 80088ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80088f0:	b003      	add	sp, #12
 80088f2:	4770      	bx	lr
 80088f4:	20000018 	.word	0x20000018

080088f8 <abort>:
 80088f8:	b508      	push	{r3, lr}
 80088fa:	2006      	movs	r0, #6
 80088fc:	f000 fa08 	bl	8008d10 <raise>
 8008900:	2001      	movs	r0, #1
 8008902:	f7f9 fad0 	bl	8001ea6 <_exit>

08008906 <_malloc_usable_size_r>:
 8008906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800890a:	1f18      	subs	r0, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	bfbc      	itt	lt
 8008910:	580b      	ldrlt	r3, [r1, r0]
 8008912:	18c0      	addlt	r0, r0, r3
 8008914:	4770      	bx	lr

08008916 <__sfputc_r>:
 8008916:	6893      	ldr	r3, [r2, #8]
 8008918:	3b01      	subs	r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	b410      	push	{r4}
 800891e:	6093      	str	r3, [r2, #8]
 8008920:	da08      	bge.n	8008934 <__sfputc_r+0x1e>
 8008922:	6994      	ldr	r4, [r2, #24]
 8008924:	42a3      	cmp	r3, r4
 8008926:	db01      	blt.n	800892c <__sfputc_r+0x16>
 8008928:	290a      	cmp	r1, #10
 800892a:	d103      	bne.n	8008934 <__sfputc_r+0x1e>
 800892c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008930:	f000 b932 	b.w	8008b98 <__swbuf_r>
 8008934:	6813      	ldr	r3, [r2, #0]
 8008936:	1c58      	adds	r0, r3, #1
 8008938:	6010      	str	r0, [r2, #0]
 800893a:	7019      	strb	r1, [r3, #0]
 800893c:	4608      	mov	r0, r1
 800893e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008942:	4770      	bx	lr

08008944 <__sfputs_r>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	4606      	mov	r6, r0
 8008948:	460f      	mov	r7, r1
 800894a:	4614      	mov	r4, r2
 800894c:	18d5      	adds	r5, r2, r3
 800894e:	42ac      	cmp	r4, r5
 8008950:	d101      	bne.n	8008956 <__sfputs_r+0x12>
 8008952:	2000      	movs	r0, #0
 8008954:	e007      	b.n	8008966 <__sfputs_r+0x22>
 8008956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800895a:	463a      	mov	r2, r7
 800895c:	4630      	mov	r0, r6
 800895e:	f7ff ffda 	bl	8008916 <__sfputc_r>
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	d1f3      	bne.n	800894e <__sfputs_r+0xa>
 8008966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008968 <_vfiprintf_r>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	460d      	mov	r5, r1
 800896e:	b09d      	sub	sp, #116	@ 0x74
 8008970:	4614      	mov	r4, r2
 8008972:	4698      	mov	r8, r3
 8008974:	4606      	mov	r6, r0
 8008976:	b118      	cbz	r0, 8008980 <_vfiprintf_r+0x18>
 8008978:	6a03      	ldr	r3, [r0, #32]
 800897a:	b90b      	cbnz	r3, 8008980 <_vfiprintf_r+0x18>
 800897c:	f7fe f8f2 	bl	8006b64 <__sinit>
 8008980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008982:	07d9      	lsls	r1, r3, #31
 8008984:	d405      	bmi.n	8008992 <_vfiprintf_r+0x2a>
 8008986:	89ab      	ldrh	r3, [r5, #12]
 8008988:	059a      	lsls	r2, r3, #22
 800898a:	d402      	bmi.n	8008992 <_vfiprintf_r+0x2a>
 800898c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800898e:	f7fe fa14 	bl	8006dba <__retarget_lock_acquire_recursive>
 8008992:	89ab      	ldrh	r3, [r5, #12]
 8008994:	071b      	lsls	r3, r3, #28
 8008996:	d501      	bpl.n	800899c <_vfiprintf_r+0x34>
 8008998:	692b      	ldr	r3, [r5, #16]
 800899a:	b99b      	cbnz	r3, 80089c4 <_vfiprintf_r+0x5c>
 800899c:	4629      	mov	r1, r5
 800899e:	4630      	mov	r0, r6
 80089a0:	f000 f938 	bl	8008c14 <__swsetup_r>
 80089a4:	b170      	cbz	r0, 80089c4 <_vfiprintf_r+0x5c>
 80089a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089a8:	07dc      	lsls	r4, r3, #31
 80089aa:	d504      	bpl.n	80089b6 <_vfiprintf_r+0x4e>
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	b01d      	add	sp, #116	@ 0x74
 80089b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b6:	89ab      	ldrh	r3, [r5, #12]
 80089b8:	0598      	lsls	r0, r3, #22
 80089ba:	d4f7      	bmi.n	80089ac <_vfiprintf_r+0x44>
 80089bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089be:	f7fe f9fd 	bl	8006dbc <__retarget_lock_release_recursive>
 80089c2:	e7f3      	b.n	80089ac <_vfiprintf_r+0x44>
 80089c4:	2300      	movs	r3, #0
 80089c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80089c8:	2320      	movs	r3, #32
 80089ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80089d2:	2330      	movs	r3, #48	@ 0x30
 80089d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b84 <_vfiprintf_r+0x21c>
 80089d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089dc:	f04f 0901 	mov.w	r9, #1
 80089e0:	4623      	mov	r3, r4
 80089e2:	469a      	mov	sl, r3
 80089e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089e8:	b10a      	cbz	r2, 80089ee <_vfiprintf_r+0x86>
 80089ea:	2a25      	cmp	r2, #37	@ 0x25
 80089ec:	d1f9      	bne.n	80089e2 <_vfiprintf_r+0x7a>
 80089ee:	ebba 0b04 	subs.w	fp, sl, r4
 80089f2:	d00b      	beq.n	8008a0c <_vfiprintf_r+0xa4>
 80089f4:	465b      	mov	r3, fp
 80089f6:	4622      	mov	r2, r4
 80089f8:	4629      	mov	r1, r5
 80089fa:	4630      	mov	r0, r6
 80089fc:	f7ff ffa2 	bl	8008944 <__sfputs_r>
 8008a00:	3001      	adds	r0, #1
 8008a02:	f000 80a7 	beq.w	8008b54 <_vfiprintf_r+0x1ec>
 8008a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a08:	445a      	add	r2, fp
 8008a0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 809f 	beq.w	8008b54 <_vfiprintf_r+0x1ec>
 8008a16:	2300      	movs	r3, #0
 8008a18:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a20:	f10a 0a01 	add.w	sl, sl, #1
 8008a24:	9304      	str	r3, [sp, #16]
 8008a26:	9307      	str	r3, [sp, #28]
 8008a28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a2e:	4654      	mov	r4, sl
 8008a30:	2205      	movs	r2, #5
 8008a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a36:	4853      	ldr	r0, [pc, #332]	@ (8008b84 <_vfiprintf_r+0x21c>)
 8008a38:	f7f7 fbea 	bl	8000210 <memchr>
 8008a3c:	9a04      	ldr	r2, [sp, #16]
 8008a3e:	b9d8      	cbnz	r0, 8008a78 <_vfiprintf_r+0x110>
 8008a40:	06d1      	lsls	r1, r2, #27
 8008a42:	bf44      	itt	mi
 8008a44:	2320      	movmi	r3, #32
 8008a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a4a:	0713      	lsls	r3, r2, #28
 8008a4c:	bf44      	itt	mi
 8008a4e:	232b      	movmi	r3, #43	@ 0x2b
 8008a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a54:	f89a 3000 	ldrb.w	r3, [sl]
 8008a58:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a5a:	d015      	beq.n	8008a88 <_vfiprintf_r+0x120>
 8008a5c:	9a07      	ldr	r2, [sp, #28]
 8008a5e:	4654      	mov	r4, sl
 8008a60:	2000      	movs	r0, #0
 8008a62:	f04f 0c0a 	mov.w	ip, #10
 8008a66:	4621      	mov	r1, r4
 8008a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a6c:	3b30      	subs	r3, #48	@ 0x30
 8008a6e:	2b09      	cmp	r3, #9
 8008a70:	d94b      	bls.n	8008b0a <_vfiprintf_r+0x1a2>
 8008a72:	b1b0      	cbz	r0, 8008aa2 <_vfiprintf_r+0x13a>
 8008a74:	9207      	str	r2, [sp, #28]
 8008a76:	e014      	b.n	8008aa2 <_vfiprintf_r+0x13a>
 8008a78:	eba0 0308 	sub.w	r3, r0, r8
 8008a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a80:	4313      	orrs	r3, r2
 8008a82:	9304      	str	r3, [sp, #16]
 8008a84:	46a2      	mov	sl, r4
 8008a86:	e7d2      	b.n	8008a2e <_vfiprintf_r+0xc6>
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	1d19      	adds	r1, r3, #4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	9103      	str	r1, [sp, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	bfbb      	ittet	lt
 8008a94:	425b      	neglt	r3, r3
 8008a96:	f042 0202 	orrlt.w	r2, r2, #2
 8008a9a:	9307      	strge	r3, [sp, #28]
 8008a9c:	9307      	strlt	r3, [sp, #28]
 8008a9e:	bfb8      	it	lt
 8008aa0:	9204      	strlt	r2, [sp, #16]
 8008aa2:	7823      	ldrb	r3, [r4, #0]
 8008aa4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aa6:	d10a      	bne.n	8008abe <_vfiprintf_r+0x156>
 8008aa8:	7863      	ldrb	r3, [r4, #1]
 8008aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aac:	d132      	bne.n	8008b14 <_vfiprintf_r+0x1ac>
 8008aae:	9b03      	ldr	r3, [sp, #12]
 8008ab0:	1d1a      	adds	r2, r3, #4
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	9203      	str	r2, [sp, #12]
 8008ab6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008aba:	3402      	adds	r4, #2
 8008abc:	9305      	str	r3, [sp, #20]
 8008abe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b94 <_vfiprintf_r+0x22c>
 8008ac2:	7821      	ldrb	r1, [r4, #0]
 8008ac4:	2203      	movs	r2, #3
 8008ac6:	4650      	mov	r0, sl
 8008ac8:	f7f7 fba2 	bl	8000210 <memchr>
 8008acc:	b138      	cbz	r0, 8008ade <_vfiprintf_r+0x176>
 8008ace:	9b04      	ldr	r3, [sp, #16]
 8008ad0:	eba0 000a 	sub.w	r0, r0, sl
 8008ad4:	2240      	movs	r2, #64	@ 0x40
 8008ad6:	4082      	lsls	r2, r0
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	3401      	adds	r4, #1
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae2:	4829      	ldr	r0, [pc, #164]	@ (8008b88 <_vfiprintf_r+0x220>)
 8008ae4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ae8:	2206      	movs	r2, #6
 8008aea:	f7f7 fb91 	bl	8000210 <memchr>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d03f      	beq.n	8008b72 <_vfiprintf_r+0x20a>
 8008af2:	4b26      	ldr	r3, [pc, #152]	@ (8008b8c <_vfiprintf_r+0x224>)
 8008af4:	bb1b      	cbnz	r3, 8008b3e <_vfiprintf_r+0x1d6>
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	3307      	adds	r3, #7
 8008afa:	f023 0307 	bic.w	r3, r3, #7
 8008afe:	3308      	adds	r3, #8
 8008b00:	9303      	str	r3, [sp, #12]
 8008b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b04:	443b      	add	r3, r7
 8008b06:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b08:	e76a      	b.n	80089e0 <_vfiprintf_r+0x78>
 8008b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b0e:	460c      	mov	r4, r1
 8008b10:	2001      	movs	r0, #1
 8008b12:	e7a8      	b.n	8008a66 <_vfiprintf_r+0xfe>
 8008b14:	2300      	movs	r3, #0
 8008b16:	3401      	adds	r4, #1
 8008b18:	9305      	str	r3, [sp, #20]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	f04f 0c0a 	mov.w	ip, #10
 8008b20:	4620      	mov	r0, r4
 8008b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b26:	3a30      	subs	r2, #48	@ 0x30
 8008b28:	2a09      	cmp	r2, #9
 8008b2a:	d903      	bls.n	8008b34 <_vfiprintf_r+0x1cc>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0c6      	beq.n	8008abe <_vfiprintf_r+0x156>
 8008b30:	9105      	str	r1, [sp, #20]
 8008b32:	e7c4      	b.n	8008abe <_vfiprintf_r+0x156>
 8008b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b38:	4604      	mov	r4, r0
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e7f0      	b.n	8008b20 <_vfiprintf_r+0x1b8>
 8008b3e:	ab03      	add	r3, sp, #12
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	462a      	mov	r2, r5
 8008b44:	4b12      	ldr	r3, [pc, #72]	@ (8008b90 <_vfiprintf_r+0x228>)
 8008b46:	a904      	add	r1, sp, #16
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7fd fbc7 	bl	80062dc <_printf_float>
 8008b4e:	4607      	mov	r7, r0
 8008b50:	1c78      	adds	r0, r7, #1
 8008b52:	d1d6      	bne.n	8008b02 <_vfiprintf_r+0x19a>
 8008b54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b56:	07d9      	lsls	r1, r3, #31
 8008b58:	d405      	bmi.n	8008b66 <_vfiprintf_r+0x1fe>
 8008b5a:	89ab      	ldrh	r3, [r5, #12]
 8008b5c:	059a      	lsls	r2, r3, #22
 8008b5e:	d402      	bmi.n	8008b66 <_vfiprintf_r+0x1fe>
 8008b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b62:	f7fe f92b 	bl	8006dbc <__retarget_lock_release_recursive>
 8008b66:	89ab      	ldrh	r3, [r5, #12]
 8008b68:	065b      	lsls	r3, r3, #25
 8008b6a:	f53f af1f 	bmi.w	80089ac <_vfiprintf_r+0x44>
 8008b6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b70:	e71e      	b.n	80089b0 <_vfiprintf_r+0x48>
 8008b72:	ab03      	add	r3, sp, #12
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	462a      	mov	r2, r5
 8008b78:	4b05      	ldr	r3, [pc, #20]	@ (8008b90 <_vfiprintf_r+0x228>)
 8008b7a:	a904      	add	r1, sp, #16
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f7fd fe45 	bl	800680c <_printf_i>
 8008b82:	e7e4      	b.n	8008b4e <_vfiprintf_r+0x1e6>
 8008b84:	080090e0 	.word	0x080090e0
 8008b88:	080090ea 	.word	0x080090ea
 8008b8c:	080062dd 	.word	0x080062dd
 8008b90:	08008945 	.word	0x08008945
 8008b94:	080090e6 	.word	0x080090e6

08008b98 <__swbuf_r>:
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	460e      	mov	r6, r1
 8008b9c:	4614      	mov	r4, r2
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	b118      	cbz	r0, 8008baa <__swbuf_r+0x12>
 8008ba2:	6a03      	ldr	r3, [r0, #32]
 8008ba4:	b90b      	cbnz	r3, 8008baa <__swbuf_r+0x12>
 8008ba6:	f7fd ffdd 	bl	8006b64 <__sinit>
 8008baa:	69a3      	ldr	r3, [r4, #24]
 8008bac:	60a3      	str	r3, [r4, #8]
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	071a      	lsls	r2, r3, #28
 8008bb2:	d501      	bpl.n	8008bb8 <__swbuf_r+0x20>
 8008bb4:	6923      	ldr	r3, [r4, #16]
 8008bb6:	b943      	cbnz	r3, 8008bca <__swbuf_r+0x32>
 8008bb8:	4621      	mov	r1, r4
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f000 f82a 	bl	8008c14 <__swsetup_r>
 8008bc0:	b118      	cbz	r0, 8008bca <__swbuf_r+0x32>
 8008bc2:	f04f 37ff 	mov.w	r7, #4294967295
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	6922      	ldr	r2, [r4, #16]
 8008bce:	1a98      	subs	r0, r3, r2
 8008bd0:	6963      	ldr	r3, [r4, #20]
 8008bd2:	b2f6      	uxtb	r6, r6
 8008bd4:	4283      	cmp	r3, r0
 8008bd6:	4637      	mov	r7, r6
 8008bd8:	dc05      	bgt.n	8008be6 <__swbuf_r+0x4e>
 8008bda:	4621      	mov	r1, r4
 8008bdc:	4628      	mov	r0, r5
 8008bde:	f7ff fd99 	bl	8008714 <_fflush_r>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d1ed      	bne.n	8008bc2 <__swbuf_r+0x2a>
 8008be6:	68a3      	ldr	r3, [r4, #8]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	60a3      	str	r3, [r4, #8]
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	6022      	str	r2, [r4, #0]
 8008bf2:	701e      	strb	r6, [r3, #0]
 8008bf4:	6962      	ldr	r2, [r4, #20]
 8008bf6:	1c43      	adds	r3, r0, #1
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d004      	beq.n	8008c06 <__swbuf_r+0x6e>
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	07db      	lsls	r3, r3, #31
 8008c00:	d5e1      	bpl.n	8008bc6 <__swbuf_r+0x2e>
 8008c02:	2e0a      	cmp	r6, #10
 8008c04:	d1df      	bne.n	8008bc6 <__swbuf_r+0x2e>
 8008c06:	4621      	mov	r1, r4
 8008c08:	4628      	mov	r0, r5
 8008c0a:	f7ff fd83 	bl	8008714 <_fflush_r>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d0d9      	beq.n	8008bc6 <__swbuf_r+0x2e>
 8008c12:	e7d6      	b.n	8008bc2 <__swbuf_r+0x2a>

08008c14 <__swsetup_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4b29      	ldr	r3, [pc, #164]	@ (8008cbc <__swsetup_r+0xa8>)
 8008c18:	4605      	mov	r5, r0
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	b118      	cbz	r0, 8008c28 <__swsetup_r+0x14>
 8008c20:	6a03      	ldr	r3, [r0, #32]
 8008c22:	b90b      	cbnz	r3, 8008c28 <__swsetup_r+0x14>
 8008c24:	f7fd ff9e 	bl	8006b64 <__sinit>
 8008c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c2c:	0719      	lsls	r1, r3, #28
 8008c2e:	d422      	bmi.n	8008c76 <__swsetup_r+0x62>
 8008c30:	06da      	lsls	r2, r3, #27
 8008c32:	d407      	bmi.n	8008c44 <__swsetup_r+0x30>
 8008c34:	2209      	movs	r2, #9
 8008c36:	602a      	str	r2, [r5, #0]
 8008c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c3c:	81a3      	strh	r3, [r4, #12]
 8008c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c42:	e033      	b.n	8008cac <__swsetup_r+0x98>
 8008c44:	0758      	lsls	r0, r3, #29
 8008c46:	d512      	bpl.n	8008c6e <__swsetup_r+0x5a>
 8008c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c4a:	b141      	cbz	r1, 8008c5e <__swsetup_r+0x4a>
 8008c4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c50:	4299      	cmp	r1, r3
 8008c52:	d002      	beq.n	8008c5a <__swsetup_r+0x46>
 8008c54:	4628      	mov	r0, r5
 8008c56:	f7fe feff 	bl	8007a58 <_free_r>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c64:	81a3      	strh	r3, [r4, #12]
 8008c66:	2300      	movs	r3, #0
 8008c68:	6063      	str	r3, [r4, #4]
 8008c6a:	6923      	ldr	r3, [r4, #16]
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	f043 0308 	orr.w	r3, r3, #8
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	b94b      	cbnz	r3, 8008c8e <__swsetup_r+0x7a>
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c84:	d003      	beq.n	8008c8e <__swsetup_r+0x7a>
 8008c86:	4621      	mov	r1, r4
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f000 f883 	bl	8008d94 <__smakebuf_r>
 8008c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c92:	f013 0201 	ands.w	r2, r3, #1
 8008c96:	d00a      	beq.n	8008cae <__swsetup_r+0x9a>
 8008c98:	2200      	movs	r2, #0
 8008c9a:	60a2      	str	r2, [r4, #8]
 8008c9c:	6962      	ldr	r2, [r4, #20]
 8008c9e:	4252      	negs	r2, r2
 8008ca0:	61a2      	str	r2, [r4, #24]
 8008ca2:	6922      	ldr	r2, [r4, #16]
 8008ca4:	b942      	cbnz	r2, 8008cb8 <__swsetup_r+0xa4>
 8008ca6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008caa:	d1c5      	bne.n	8008c38 <__swsetup_r+0x24>
 8008cac:	bd38      	pop	{r3, r4, r5, pc}
 8008cae:	0799      	lsls	r1, r3, #30
 8008cb0:	bf58      	it	pl
 8008cb2:	6962      	ldrpl	r2, [r4, #20]
 8008cb4:	60a2      	str	r2, [r4, #8]
 8008cb6:	e7f4      	b.n	8008ca2 <__swsetup_r+0x8e>
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e7f7      	b.n	8008cac <__swsetup_r+0x98>
 8008cbc:	20000018 	.word	0x20000018

08008cc0 <_raise_r>:
 8008cc0:	291f      	cmp	r1, #31
 8008cc2:	b538      	push	{r3, r4, r5, lr}
 8008cc4:	4605      	mov	r5, r0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	d904      	bls.n	8008cd4 <_raise_r+0x14>
 8008cca:	2316      	movs	r3, #22
 8008ccc:	6003      	str	r3, [r0, #0]
 8008cce:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008cd6:	b112      	cbz	r2, 8008cde <_raise_r+0x1e>
 8008cd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cdc:	b94b      	cbnz	r3, 8008cf2 <_raise_r+0x32>
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f000 f830 	bl	8008d44 <_getpid_r>
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	4601      	mov	r1, r0
 8008ce8:	4628      	mov	r0, r5
 8008cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cee:	f000 b817 	b.w	8008d20 <_kill_r>
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d00a      	beq.n	8008d0c <_raise_r+0x4c>
 8008cf6:	1c59      	adds	r1, r3, #1
 8008cf8:	d103      	bne.n	8008d02 <_raise_r+0x42>
 8008cfa:	2316      	movs	r3, #22
 8008cfc:	6003      	str	r3, [r0, #0]
 8008cfe:	2001      	movs	r0, #1
 8008d00:	e7e7      	b.n	8008cd2 <_raise_r+0x12>
 8008d02:	2100      	movs	r1, #0
 8008d04:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008d08:	4620      	mov	r0, r4
 8008d0a:	4798      	blx	r3
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	e7e0      	b.n	8008cd2 <_raise_r+0x12>

08008d10 <raise>:
 8008d10:	4b02      	ldr	r3, [pc, #8]	@ (8008d1c <raise+0xc>)
 8008d12:	4601      	mov	r1, r0
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	f7ff bfd3 	b.w	8008cc0 <_raise_r>
 8008d1a:	bf00      	nop
 8008d1c:	20000018 	.word	0x20000018

08008d20 <_kill_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	@ (8008d40 <_kill_r+0x20>)
 8008d24:	2300      	movs	r3, #0
 8008d26:	4604      	mov	r4, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	602b      	str	r3, [r5, #0]
 8008d2e:	f7f9 f8aa 	bl	8001e86 <_kill>
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	d102      	bne.n	8008d3c <_kill_r+0x1c>
 8008d36:	682b      	ldr	r3, [r5, #0]
 8008d38:	b103      	cbz	r3, 8008d3c <_kill_r+0x1c>
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	bd38      	pop	{r3, r4, r5, pc}
 8008d3e:	bf00      	nop
 8008d40:	2000098c 	.word	0x2000098c

08008d44 <_getpid_r>:
 8008d44:	f7f9 b897 	b.w	8001e76 <_getpid>

08008d48 <__swhatbuf_r>:
 8008d48:	b570      	push	{r4, r5, r6, lr}
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d50:	2900      	cmp	r1, #0
 8008d52:	b096      	sub	sp, #88	@ 0x58
 8008d54:	4615      	mov	r5, r2
 8008d56:	461e      	mov	r6, r3
 8008d58:	da0d      	bge.n	8008d76 <__swhatbuf_r+0x2e>
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d60:	f04f 0100 	mov.w	r1, #0
 8008d64:	bf14      	ite	ne
 8008d66:	2340      	movne	r3, #64	@ 0x40
 8008d68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	6031      	str	r1, [r6, #0]
 8008d70:	602b      	str	r3, [r5, #0]
 8008d72:	b016      	add	sp, #88	@ 0x58
 8008d74:	bd70      	pop	{r4, r5, r6, pc}
 8008d76:	466a      	mov	r2, sp
 8008d78:	f000 f848 	bl	8008e0c <_fstat_r>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	dbec      	blt.n	8008d5a <__swhatbuf_r+0x12>
 8008d80:	9901      	ldr	r1, [sp, #4]
 8008d82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d8a:	4259      	negs	r1, r3
 8008d8c:	4159      	adcs	r1, r3
 8008d8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d92:	e7eb      	b.n	8008d6c <__swhatbuf_r+0x24>

08008d94 <__smakebuf_r>:
 8008d94:	898b      	ldrh	r3, [r1, #12]
 8008d96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d98:	079d      	lsls	r5, r3, #30
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	d507      	bpl.n	8008db0 <__smakebuf_r+0x1c>
 8008da0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	6123      	str	r3, [r4, #16]
 8008da8:	2301      	movs	r3, #1
 8008daa:	6163      	str	r3, [r4, #20]
 8008dac:	b003      	add	sp, #12
 8008dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db0:	ab01      	add	r3, sp, #4
 8008db2:	466a      	mov	r2, sp
 8008db4:	f7ff ffc8 	bl	8008d48 <__swhatbuf_r>
 8008db8:	9f00      	ldr	r7, [sp, #0]
 8008dba:	4605      	mov	r5, r0
 8008dbc:	4639      	mov	r1, r7
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f7fe febe 	bl	8007b40 <_malloc_r>
 8008dc4:	b948      	cbnz	r0, 8008dda <__smakebuf_r+0x46>
 8008dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dca:	059a      	lsls	r2, r3, #22
 8008dcc:	d4ee      	bmi.n	8008dac <__smakebuf_r+0x18>
 8008dce:	f023 0303 	bic.w	r3, r3, #3
 8008dd2:	f043 0302 	orr.w	r3, r3, #2
 8008dd6:	81a3      	strh	r3, [r4, #12]
 8008dd8:	e7e2      	b.n	8008da0 <__smakebuf_r+0xc>
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	6020      	str	r0, [r4, #0]
 8008dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008de2:	81a3      	strh	r3, [r4, #12]
 8008de4:	9b01      	ldr	r3, [sp, #4]
 8008de6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008dea:	b15b      	cbz	r3, 8008e04 <__smakebuf_r+0x70>
 8008dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008df0:	4630      	mov	r0, r6
 8008df2:	f000 f81d 	bl	8008e30 <_isatty_r>
 8008df6:	b128      	cbz	r0, 8008e04 <__smakebuf_r+0x70>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	f023 0303 	bic.w	r3, r3, #3
 8008dfe:	f043 0301 	orr.w	r3, r3, #1
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	431d      	orrs	r5, r3
 8008e08:	81a5      	strh	r5, [r4, #12]
 8008e0a:	e7cf      	b.n	8008dac <__smakebuf_r+0x18>

08008e0c <_fstat_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4d07      	ldr	r5, [pc, #28]	@ (8008e2c <_fstat_r+0x20>)
 8008e10:	2300      	movs	r3, #0
 8008e12:	4604      	mov	r4, r0
 8008e14:	4608      	mov	r0, r1
 8008e16:	4611      	mov	r1, r2
 8008e18:	602b      	str	r3, [r5, #0]
 8008e1a:	f7f9 f894 	bl	8001f46 <_fstat>
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	d102      	bne.n	8008e28 <_fstat_r+0x1c>
 8008e22:	682b      	ldr	r3, [r5, #0]
 8008e24:	b103      	cbz	r3, 8008e28 <_fstat_r+0x1c>
 8008e26:	6023      	str	r3, [r4, #0]
 8008e28:	bd38      	pop	{r3, r4, r5, pc}
 8008e2a:	bf00      	nop
 8008e2c:	2000098c 	.word	0x2000098c

08008e30 <_isatty_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4d06      	ldr	r5, [pc, #24]	@ (8008e4c <_isatty_r+0x1c>)
 8008e34:	2300      	movs	r3, #0
 8008e36:	4604      	mov	r4, r0
 8008e38:	4608      	mov	r0, r1
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	f7f9 f893 	bl	8001f66 <_isatty>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_isatty_r+0x1a>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_isatty_r+0x1a>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	2000098c 	.word	0x2000098c

08008e50 <_init>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr

08008e5c <_fini>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	bf00      	nop
 8008e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e62:	bc08      	pop	{r3}
 8008e64:	469e      	mov	lr, r3
 8008e66:	4770      	bx	lr
